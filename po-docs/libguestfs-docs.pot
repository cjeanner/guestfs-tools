# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Red Hat Inc.
# This file is distributed under the same license as the libguestfs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: libguestfs 1.8.0\n"
"Report-Msgid-Bugs-To: libguestfs@redhat.com\n"
"POT-Creation-Date: 2010-12-19 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: ENCODING"

# type: =encoding
#: ../src/guestfs.pod:1 ../fish/guestfish.pod:1 ../test-tool/libguestfs-test-tool.pod:1 ../fuse/guestmount.pod:1
msgid "utf8"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:3 ../fish/guestfish.pod:3 ../test-tool/libguestfs-test-tool.pod:3 ../fuse/guestmount.pod:3
msgid "NAME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:5
msgid "guestfs - Library for accessing and modifying virtual machine images"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:7 ../fish/guestfish.pod:7 ../test-tool/libguestfs-test-tool.pod:7 ../fuse/guestmount.pod:7
msgid "SYNOPSIS"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:9
#, no-wrap
msgid ""
" #include <guestfs.h>\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:11
#, no-wrap
msgid ""
" guestfs_h *g = guestfs_create ();\n"
" guestfs_add_drive (g, \"guest.img\");\n"
" guestfs_launch (g);\n"
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
" guestfs_touch (g, \"/hello\");\n"
" guestfs_umount (g, \"/\");\n"
" guestfs_close (g);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:19
#, no-wrap
msgid ""
" cc prog.c -o prog -lguestfs\n"
"or:\n"
" cc prog.c -o prog `pkg-config libguestfs --cflags --libs`\n"
"\n"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:23 ../fish/guestfish.pod:30 ../test-tool/libguestfs-test-tool.pod:11 ../fuse/guestmount.pod:20
msgid "DESCRIPTION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:25
msgid ""
"Libguestfs is a library for accessing and modifying guest disk images.  "
"Amongst the things this is good for: making batch configuration changes to "
"guests, getting disk used/free statistics (see also: virt-df), migrating "
"between virtualization systems (see also: virt-p2v), performing partial "
"backups, performing partial guest clones, cloning guests and changing "
"registry/UUID/hostname info, and much else besides."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:33
msgid ""
"Libguestfs uses Linux kernel and qemu code, and can access any type of guest "
"filesystem that Linux and qemu can, including but not limited to: ext2/3/4, "
"btrfs, FAT and NTFS, LVM, many different disk partition schemes, qcow, "
"qcow2, vmdk."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:38
msgid ""
"Libguestfs provides ways to enumerate guest storage (eg. partitions, LVs, "
"what filesystem is in each LV, etc.).  It can also run commands in the "
"context of the guest.  Also you can access filesystems over FUSE."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:43
msgid ""
"Libguestfs is a library that can be linked with C and C++ management "
"programs (or management programs written in OCaml, Perl, Python, Ruby, Java, "
"PHP, Haskell or C#).  You can also use it from shell scripts or the command "
"line."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:48
msgid ""
"You don't need to be root to use libguestfs, although obviously you do need "
"enough permissions to access the disk images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:51
msgid ""
"Libguestfs is a large API because it can do many things.  For a gentle "
"introduction, please read the L</API OVERVIEW> section next."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:54
msgid ""
"There are also some example programs in the L<guestfs-examples(3)> manual "
"page."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:57
msgid "API OVERVIEW"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:59
msgid ""
"This section provides a gentler overview of the libguestfs API.  We also try "
"to group API calls together, where that may not be obvious from reading "
"about the individual calls in the main section of this manual."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:64
msgid "HANDLES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:66
msgid ""
"Before you can use libguestfs calls, you have to create a handle.  Then you "
"must add at least one disk image to the handle, followed by launching the "
"handle, then performing whatever operations you want, and finally closing "
"the handle.  By convention we use the single letter C<g> for the name of the "
"handle variable, although of course you can use any name you want."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:73
msgid "The general structure of all libguestfs-using programs looks like this:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:76
#, no-wrap
msgid ""
" guestfs_h *g = guestfs_create ();\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:78
#, no-wrap
msgid ""
" /* Call guestfs_add_drive additional times if there are\n"
"  * multiple disk images.\n"
"  */\n"
" guestfs_add_drive (g, \"guest.img\");\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:83
#, no-wrap
msgid ""
" /* Most manipulation calls won't work until you've launched\n"
"  * the handle 'g'.  You have to do this _after_ adding drives\n"
"  * and _before_ other commands.\n"
"  */\n"
" guestfs_launch (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:89
#, no-wrap
msgid ""
" /* Now you can examine what partitions, LVs etc are available.\n"
"  */\n"
" char **partitions = guestfs_list_partitions (g);\n"
" char **logvols = guestfs_lvs (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:94
#, no-wrap
msgid ""
" /* To access a filesystem in the image, you must mount it.\n"
"  */\n"
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:98
#, no-wrap
msgid ""
" /* Now you can perform filesystem actions on the guest\n"
"  * disk image.\n"
"  */\n"
" guestfs_touch (g, \"/hello\");\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:103
#, no-wrap
msgid ""
" /* This is only needed for libguestfs < 1.5.24.  Since then\n"
"  * it is done automatically when you close the handle.  See\n"
"  * discussion of autosync in this page.\n"
"  */\n"
" guestfs_sync (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:109
#, no-wrap
msgid ""
" /* Close the handle 'g'. */\n"
" guestfs_close (g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:112
msgid ""
"The code above doesn't include any error checking.  In real code you should "
"check return values carefully for errors.  In general all functions that "
"return integers return C<-1> on error, and all functions that return "
"pointers return C<NULL> on error.  See section L</ERROR HANDLING> below for "
"how to handle errors, and consult the documentation for each function call "
"below to see precisely how they return error indications.  See "
"L<guestfs-examples(3)> for fully worked examples."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:121
msgid "DISK IMAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:123
msgid ""
"The image filename (C<\"guest.img\"> in the example above) could be a disk "
"image from a virtual machine, a L<dd(1)> copy of a physical hard disk, an "
"actual block device, or simply an empty file of zeroes that you have created "
"through L<posix_fallocate(3)>.  Libguestfs lets you do useful things to all "
"of these."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:129
msgid ""
"The call you should use in modern code for adding drives is "
"L</guestfs_add_drive_opts>.  To add a disk image, allowing writes, and "
"specifying that the format is raw, do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:133
#, no-wrap
msgid ""
" guestfs_add_drive_opts (g, filename,\n"
"                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, \"raw\",\n"
"                         -1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:137
msgid "You can add a disk read-only using:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:139
#, no-wrap
msgid ""
" guestfs_add_drive_opts (g, filename,\n"
"                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, \"raw\",\n"
"                         GUESTFS_ADD_DRIVE_OPTS_READONLY, 1,\n"
"                         -1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:144
msgid ""
"or by calling the older function L</guestfs_add_drive_ro>.  In either case "
"libguestfs won't modify the file."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:147
msgid ""
"Be extremely cautious if the disk image is in use, eg. if it is being used "
"by a virtual machine.  Adding it read-write will almost certainly cause disk "
"corruption, but adding it read-only is safe."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:151
msgid ""
"You must add at least one disk image, and you may add multiple disk images.  "
"In the API, the disk images are usually referred to as C</dev/sda> (for the "
"first one you added), C</dev/sdb> (for the second one you added), etc."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:156
msgid ""
"Once L</guestfs_launch> has been called you cannot add any more images.  You "
"can call L</guestfs_list_devices> to get a list of the device names, in the "
"order that you added them.  See also L</BLOCK DEVICE NAMING> below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:161
msgid "MOUNTING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:163
msgid ""
"Before you can read or write files, create directories and so on in a disk "
"image that contains filesystems, you have to mount those filesystems using "
"L</guestfs_mount>.  If you already know that a disk image contains (for "
"example) one partition with a filesystem on that partition, then you can "
"mount it directly:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:169
#, no-wrap
msgid ""
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:171
msgid ""
"where C</dev/sda1> means literally the first partition (C<1>) of the first "
"disk image that we added (C</dev/sda>).  If the disk contains Linux LVM2 "
"logical volumes you could refer to those instead (eg. C</dev/VG/LV>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:175
msgid ""
"If you are given a disk image and you don't know what it contains then you "
"have to find out.  Libguestfs can do that too: use "
"L</guestfs_list_partitions> and L</guestfs_lvs> to list possible partitions "
"and LVs, and either try mounting each to see what is mountable, or else "
"examine them with L</guestfs_vfs_type> or L</guestfs_file>.  Libguestfs also "
"has a set of APIs for inspection of disk images (see L</INSPECTION> below).  "
"But you might find it easier to look at higher level programs built on top "
"of libguestfs, in particular L<virt-inspector(1)>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:185
msgid ""
"To mount a disk image read-only, use L</guestfs_mount_ro>.  There are "
"several other variations of the C<guestfs_mount_*> call."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:188
msgid "FILESYSTEM ACCESS AND MODIFICATION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:190
msgid ""
"The majority of the libguestfs API consists of fairly low-level calls for "
"accessing and modifying the files, directories, symlinks etc on mounted "
"filesystems.  There are over a hundred such calls which you can find listed "
"in detail below in this man page, and we don't even pretend to cover them "
"all in this overview."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:196
msgid ""
"Specify filenames as full paths, starting with C<\"/\"> and including the "
"mount point."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:199
msgid ""
"For example, if you mounted a filesystem at C<\"/\"> and you want to read "
"the file called C<\"etc/passwd\"> then you could do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:202
#, no-wrap
msgid ""
" char *data = guestfs_cat (g, \"/etc/passwd\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:204
msgid ""
"This would return C<data> as a newly allocated buffer containing the full "
"content of that file (with some conditions: see also L</DOWNLOADING> below), "
"or C<NULL> if there was an error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:208
msgid ""
"As another example, to create a top-level directory on that filesystem "
"called C<\"var\"> you would do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:211
#, no-wrap
msgid ""
" guestfs_mkdir (g, \"/var\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:213
msgid "To create a symlink you could do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:215
#, no-wrap
msgid ""
" guestfs_ln_s (g, \"/etc/init.d/portmap\",\n"
"               \"/etc/rc3.d/S30portmap\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:218
msgid ""
"Libguestfs will reject attempts to use relative paths and there is no "
"concept of a current working directory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:221
msgid ""
"Libguestfs can return errors in many situations: for example if the "
"filesystem isn't writable, or if a file or directory that you requested "
"doesn't exist.  If you are using the C API (documented here)  you have to "
"check for those error conditions after each call.  (Other language bindings "
"turn these errors into exceptions)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:227
msgid ""
"File writes are affected by the per-handle umask, set by calling "
"L</guestfs_umask> and defaulting to 022.  See L</UMASK>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:230
msgid "PARTITIONING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:232
msgid ""
"Libguestfs contains API calls to read, create and modify partition tables on "
"disk images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:235
msgid ""
"In the common case where you want to create a single partition covering the "
"whole disk, you should use the L</guestfs_part_disk> call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:239
#, no-wrap
msgid ""
" const char *parttype = \"mbr\";\n"
" if (disk_is_larger_than_2TB)\n"
"   parttype = \"gpt\";\n"
" guestfs_part_disk (g, \"/dev/sda\", parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:244
msgid ""
"Obviously this effectively wipes anything that was on that disk image "
"before."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:247
msgid "LVM2"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:249
msgid ""
"Libguestfs provides access to a large part of the LVM2 API, such as "
"L</guestfs_lvcreate> and L</guestfs_vgremove>.  It won't make much sense "
"unless you familiarize yourself with the concepts of physical volumes, "
"volume groups and logical volumes."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:254
msgid ""
"This author strongly recommends reading the LVM HOWTO, online at "
"L<http://tldp.org/HOWTO/LVM-HOWTO/>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:257
msgid "DOWNLOADING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:259
msgid ""
"Use L</guestfs_cat> to download small, text only files.  This call is "
"limited to files which are less than 2 MB and which cannot contain any ASCII "
"NUL (C<\\0>) characters.  However it has a very simple to use API."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:264
msgid ""
"L</guestfs_read_file> can be used to read files which contain arbitrary 8 "
"bit data, since it returns a (pointer, size) pair.  However it is still "
"limited to \"small\" files, less than 2 MB."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:268
msgid ""
"L</guestfs_download> can be used to download any file, with no limits on "
"content or size (even files larger than 4 GB)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:271
msgid "To download multiple files, see L</guestfs_tar_out> and L</guestfs_tgz_out>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:274
msgid "UPLOADING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:276
msgid ""
"It's often the case that you want to write a file or files to the disk "
"image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:279
msgid ""
"To write a small file with fixed content, use L</guestfs_write>.  To create "
"a file of all zeroes, use L</guestfs_truncate_size> (sparse) or "
"L</guestfs_fallocate64> (with all disk blocks allocated).  There are a "
"variety of other functions for creating test files, for example "
"L</guestfs_fill> and L</guestfs_fill_pattern>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:285
msgid ""
"To upload a single file, use L</guestfs_upload>.  This call has no limits on "
"file content or size (even files larger than 4 GB)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:288
msgid "To upload multiple files, see L</guestfs_tar_in> and L</guestfs_tgz_in>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:290
msgid ""
"However the fastest way to upload I<large numbers of arbitrary files> is to "
"turn them into a squashfs or CD ISO (see L<mksquashfs(8)> and "
"L<mkisofs(8)>), then attach this using L</guestfs_add_drive_ro>.  If you add "
"the drive in a predictable way (eg. adding it last after all other drives) "
"then you can get the device name from L</guestfs_list_devices> and mount it "
"directly using L</guestfs_mount_ro>.  Note that squashfs images are "
"sometimes non-portable between kernel versions, and they don't support "
"labels or UUIDs.  If you want to pre-build an image or you need to mount it "
"using a label or UUID, use an ISO image instead."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:301
msgid "COPYING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:303
msgid ""
"There are various different commands for copying between files and devices "
"and in and out of the guest filesystem.  These are summarised in the table "
"below."
msgstr ""

# type: =item
#: ../src/guestfs.pod:309
msgid "B<file> to B<file>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:311
msgid ""
"Use L</guestfs_cp> to copy a single file, or L</guestfs_cp_a> to copy "
"directories recursively."
msgstr ""

# type: =item
#: ../src/guestfs.pod:314
msgid "B<file or device> to B<file or device>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:316
msgid ""
"Use L</guestfs_dd> which efficiently uses L<dd(1)> to copy between files and "
"devices in the guest."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:319
msgid "Example: duplicate the contents of an LV:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:321
#, no-wrap
msgid ""
" guestfs_dd (g, \"/dev/VG/Original\", \"/dev/VG/Copy\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:323
msgid ""
"The destination (C</dev/VG/Copy>) must be at least as large as the source "
"(C</dev/VG/Original>).  To copy less than the whole source device, use "
"L</guestfs_copy_size>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:327
msgid "B<file on the host> to B<file or device>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:329
msgid "Use L</guestfs_upload>.  See L</UPLOADING> above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:331
msgid "B<file or device> to B<file on the host>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:333
msgid "Use L</guestfs_download>.  See L</DOWNLOADING> above."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:337
msgid "UPLOADING AND DOWNLOADING TO PIPES AND FILE DESCRIPTORS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:339
msgid ""
"Calls like L</guestfs_upload>, L</guestfs_download>, L</guestfs_tar_in>, "
"L</guestfs_tar_out> etc appear to only take filenames as arguments, so it "
"appears you can only upload and download to files.  However many Un*x-like "
"hosts let you use the special device files C</dev/stdin>, C</dev/stdout>, "
"C</dev/stderr> and C</dev/fd/N> to read and write from stdin, stdout, "
"stderr, and arbitrary file descriptor N."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:347
msgid "For example, L<virt-cat(1)> writes its output to stdout by doing:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:350
#, no-wrap
msgid ""
" guestfs_download (filename, \"/dev/stdout\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:352
msgid "and you can write tar output to a pipe C<fd> by doing:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:354
#, no-wrap
msgid ""
" char devfd[64];\n"
" snprintf (devfd, sizeof devfd, \"/dev/fd/%d\", fd);\n"
" guestfs_tar_out (\"/\", devfd);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:358
msgid "LISTING FILES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:360
msgid ""
"L</guestfs_ll> is just designed for humans to read (mainly when using the "
"L<guestfish(1)>-equivalent command C<ll>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:363
msgid ""
"L</guestfs_ls> is a quick way to get a list of files in a directory from "
"programs, as a flat list of strings."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:366
msgid ""
"L</guestfs_readdir> is a programmatic way to get a list of files in a "
"directory, plus additional information about each one.  It is more "
"equivalent to using the L<readdir(3)> call on a local filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:370
msgid ""
"L</guestfs_find> and L</guestfs_find0> can be used to recursively list "
"files."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:373
msgid "RUNNING COMMANDS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:375
msgid ""
"Although libguestfs is primarily an API for manipulating files inside guest "
"images, we also provide some limited facilities for running commands inside "
"guests."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:379
msgid "There are many limitations to this:"
msgstr ""

# type: =item
#: ../src/guestfs.pod:383 ../src/guestfs.pod:388 ../src/guestfs.pod:393 ../src/guestfs.pod:397 ../src/guestfs.pod:402 ../src/guestfs.pod:406 ../src/guestfs.pod:411 ../src/guestfs.pod:416 ../src/guestfs.pod:1006 ../src/guestfs.pod:1010 ../src/guestfs.pod:1014 ../src/guestfs.pod:1019 ../src/guestfs.pod:1027 ../src/guestfs.pod:1046 ../src/guestfs.pod:1054 ../src/guestfs.pod:1076 ../src/guestfs.pod:1080 ../src/guestfs.pod:1084 ../src/guestfs.pod:1088 ../src/guestfs.pod:1092 ../src/guestfs.pod:1096 ../src/guestfs.pod:1578 ../src/guestfs.pod:1583 ../src/guestfs.pod:1587 ../src/guestfs.pod:1697 ../src/guestfs.pod:1702 ../src/guestfs.pod:1706 ../src/guestfs.pod:2058 ../src/guestfs.pod:2064 ../src/guestfs.pod:2069 ../src/guestfs.pod:2075 ../src/guestfs.pod:2187 ../src/guestfs.pod:2191 ../src/guestfs.pod:2195 ../src/guestfs.pod:2199 ../src/guestfs-actions.pod:15 ../src/guestfs-actions.pod:22 ../src/guestfs-actions.pod:571 ../src/guestfs-actions.pod:579 ../src/guestfs-actions.pod:586 ../src/guestfs-actions.pod:593 ../src/guestfs-actions.pod:1589 ../src/guestfs-actions.pod:1593 ../src/guestfs-actions.pod:1597 ../src/guestfs-actions.pod:1601 ../src/guestfs-actions.pod:1609 ../src/guestfs-actions.pod:1613 ../src/guestfs-actions.pod:1617 ../src/guestfs-actions.pod:1627 ../src/guestfs-actions.pod:1631 ../src/guestfs-actions.pod:1635 ../src/guestfs-actions.pod:1773 ../src/guestfs-actions.pod:1777 ../src/guestfs-actions.pod:1782 ../src/guestfs-actions.pod:1787 ../src/guestfs-actions.pod:1848 ../src/guestfs-actions.pod:1852 ../src/guestfs-actions.pod:1857 ../fish/guestfish.pod:427 ../fish/guestfish.pod:431 ../fish/guestfish.pod:435 ../fish/guestfish.pod:439 ../fish/guestfish-actions.pod:13 ../fish/guestfish-actions.pod:20 ../fish/guestfish-actions.pod:375 ../fish/guestfish-actions.pod:383 ../fish/guestfish-actions.pod:390 ../fish/guestfish-actions.pod:397 ../fish/guestfish-actions.pod:1067 ../fish/guestfish-actions.pod:1071 ../fish/guestfish-actions.pod:1075 ../fish/guestfish-actions.pod:1079 ../fish/guestfish-actions.pod:1087 ../fish/guestfish-actions.pod:1091 ../fish/guestfish-actions.pod:1095 ../fish/guestfish-actions.pod:1105 ../fish/guestfish-actions.pod:1109 ../fish/guestfish-actions.pod:1113 ../fish/guestfish-actions.pod:1203 ../fish/guestfish-actions.pod:1207 ../fish/guestfish-actions.pod:1212 ../fish/guestfish-actions.pod:1217 ../fish/guestfish-actions.pod:1259 ../fish/guestfish-actions.pod:1263 ../fish/guestfish-actions.pod:1268
msgid "*"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:385
msgid ""
"The kernel version that the command runs under will be different from what "
"it expects."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:390
msgid ""
"If the command needs to communicate with daemons, then most likely they "
"won't be running."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:395
msgid "The command will be running in limited memory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:399
msgid ""
"The network may not be available unless you enable it (see "
"L</guestfs_set_network>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:404
msgid "Only supports Linux guests (not Windows, BSD, etc)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:408
msgid "Architecture limitations (eg. won't work for a PPC guest on an X86 host)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:413
msgid ""
"For SELinux guests, you may need to enable SELinux and load policy first.  "
"See L</SELINUX> in this manpage."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:418
msgid ""
"I<Security:> It is not safe to run commands from untrusted, possibly "
"malicious guests.  These commands may attempt to exploit your program by "
"sending unexpected output.  They could also try to exploit the Linux kernel "
"or qemu provided by the libguestfs appliance.  They could use the network "
"provided by the libguestfs appliance to bypass ordinary network partitions "
"and firewalls.  They could use the elevated privileges or different SELinux "
"context of your program to their advantage."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:427
msgid ""
"A secure alternative is to use libguestfs to install a \"firstboot\" script "
"(a script which runs when the guest next boots normally), and to have this "
"script run the commands you want in the normal context of the running guest, "
"network security and so on.  For information about other security issues, "
"see L</SECURITY>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:435
msgid ""
"The two main API calls to run commands are L</guestfs_command> and "
"L</guestfs_sh> (there are also variations)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:438
msgid ""
"The difference is that L</guestfs_sh> runs commands using the shell, so any "
"shell globs, redirections, etc will work."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:441
msgid "CONFIGURATION FILES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:443
msgid ""
"To read and write configuration files in Linux guest filesystems, we "
"strongly recommend using Augeas.  For example, Augeas understands how to "
"read and write, say, a Linux shadow password file or X.org configuration "
"file, and so avoids you having to write that code."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:448
msgid ""
"The main Augeas calls are bound through the C<guestfs_aug_*> APIs.  We don't "
"document Augeas itself here because there is excellent documentation on the "
"L<http://augeas.net/> website."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:452
msgid ""
"If you don't want to use Augeas (you fool!) then try calling "
"L</guestfs_read_lines> to get the file as a list of lines which you can "
"iterate over."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:456
msgid "SELINUX"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:458
msgid ""
"We support SELinux guests.  To ensure that labeling happens correctly in "
"SELinux guests, you need to enable SELinux and load the guest's policy:"
msgstr ""

# type: =item
#: ../src/guestfs.pod:464 ../src/guestfs.pod:1199 ../src/guestfs.pod:1330
msgid "1."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:466
msgid "Before launching, do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:468
#, no-wrap
msgid ""
" guestfs_set_selinux (g, 1);\n"
"\n"
msgstr ""

# type: =item
#: ../src/guestfs.pod:470 ../src/guestfs.pod:1203 ../src/guestfs.pod:1334
msgid "2."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:472
msgid ""
"After mounting the guest's filesystem(s), load the policy.  This is best "
"done by running the L<load_policy(8)> command in the guest itself:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:476
#, no-wrap
msgid ""
" guestfs_sh (g, \"/usr/sbin/load_policy\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:478
msgid ""
"(Older versions of C<load_policy> require you to specify the name of the "
"policy file)."
msgstr ""

# type: =item
#: ../src/guestfs.pod:481 ../src/guestfs.pod:1340
msgid "3."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:483
msgid ""
"Optionally, set the security context for the API.  The correct security "
"context to use can only be known by inspecting the guest.  As an example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:487
#, no-wrap
msgid ""
" guestfs_setcon (g, \"unconfined_u:unconfined_r:unconfined_t:s0\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:491
msgid "This will work for running commands and editing existing files."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:493
msgid ""
"When new files are created, you may need to label them explicitly, for "
"example by running the external command C<restorecon pathname>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:497
msgid "UMASK"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:499
msgid ""
"Certain calls are affected by the current file mode creation mask (the "
"\"umask\").  In particular ones which create files or directories, such as "
"L</guestfs_touch>, L</guestfs_mknod> or L</guestfs_mkdir>.  This affects "
"either the default mode that the file is created with or modifies the mode "
"that you supply."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:505
msgid ""
"The default umask is C<022>, so files are created with modes such as C<0644> "
"and directories with C<0755>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:508
msgid ""
"There are two ways to avoid being affected by umask.  Either set umask to 0 "
"(call C<guestfs_umask (g, 0)> early after launching).  Or call "
"L</guestfs_chmod> after creating each file or directory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:512
msgid "For more information about umask, see L<umask(2)>."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:514 ../fish/guestfish.pod:720
msgid "ENCRYPTED DISKS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:516
msgid ""
"Libguestfs allows you to access Linux guests which have been encrypted using "
"whole disk encryption that conforms to the Linux Unified Key Setup (LUKS) "
"standard.  This includes nearly all whole disk encryption systems used by "
"modern Linux guests."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:522
msgid ""
"Use L</guestfs_vfs_type> to identify LUKS-encrypted block devices (it "
"returns the string C<crypto_LUKS>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:525
msgid ""
"Then open these devices by calling L</guestfs_luks_open>.  Obviously you "
"will require the passphrase!"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:528
msgid ""
"Opening a LUKS device creates a new device mapper device called "
"C</dev/mapper/mapname> (where C<mapname> is the string you supply to "
"L</guestfs_luks_open>).  Reads and writes to this mapper device are "
"decrypted from and encrypted to the underlying block device respectively."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:534
msgid ""
"LVM volume groups on the device can be made visible by calling "
"L</guestfs_vgscan> followed by L</guestfs_vg_activate_all>.  The logical "
"volume(s) can now be mounted in the usual way."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:538
msgid ""
"Use the reverse process to close a LUKS device.  Unmount any logical volumes "
"on it, deactivate the volume groups by caling C<guestfs_vg_activate (g, 0, "
"[\"/dev/VG\"])>.  Then close the mapper device by calling "
"L</guestfs_luks_close> on the C</dev/mapper/mapname> device (I<not> the "
"underlying encrypted block device)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:545
msgid "INSPECTION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:547
msgid ""
"Libguestfs has APIs for inspecting an unknown disk image to find out if it "
"contains operating systems.  (These APIs used to be in a separate Perl-only "
"library called L<Sys::Guestfs::Lib(3)> but since version 1.5.3 the most "
"frequently used part of this library has been rewritten in C and moved into "
"the core code)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:553
msgid ""
"Add all disks belonging to the unknown virtual machine and call "
"L</guestfs_launch> in the usual way."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:556
msgid ""
"Then call L</guestfs_inspect_os>.  This function uses other libguestfs calls "
"and certain heuristics, and returns a list of operating systems that were "
"found.  An empty list means none were found.  A single element is the root "
"filesystem of the operating system.  For dual- or multi-boot guests, "
"multiple roots can be returned, each one corresponding to a separate "
"operating system.  (Multi-boot virtual machines are extremely rare in the "
"world of virtualization, but since this scenario can happen, we have built "
"libguestfs to deal with it.)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:565
msgid ""
"For each root, you can then call various C<guestfs_inspect_get_*> functions "
"to get additional details about that operating system.  For example, call "
"L</guestfs_inspect_get_type> to return the string C<windows> or C<linux> for "
"Windows and Linux-based operating systems respectively."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:571
msgid ""
"Un*x-like and Linux-based operating systems usually consist of several "
"filesystems which are mounted at boot time (for example, a separate boot "
"partition mounted on C</boot>).  The inspection rules are able to detect how "
"filesystems correspond to mount points.  Call "
"C<guestfs_inspect_get_mountpoints> to get this mapping.  It might return a "
"hash table like this example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:578
#, no-wrap
msgid ""
" /boot => /dev/sda1\n"
" /     => /dev/vg_guest/lv_root\n"
" /usr  => /dev/vg_guest/lv_usr\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:582
msgid ""
"The caller can then make calls to L</guestfs_mount_options> to mount the "
"filesystems as suggested."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:585
msgid ""
"Be careful to mount filesystems in the right order (eg. C</> before "
"C</usr>).  Sorting the keys of the hash by length, shortest first, should "
"work."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:589
msgid ""
"Inspection currently only works for some common operating systems.  "
"Contributors are welcome to send patches for other operating systems that we "
"currently cannot detect."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:593
msgid ""
"Encrypted disks must be opened before inspection.  See L</ENCRYPTED DISKS> "
"for more details.  The L</guestfs_inspect_os> function just ignores any "
"encrypted devices."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:597
msgid ""
"A note on the implementation: The call L</guestfs_inspect_os> performs "
"inspection and caches the results in the guest handle.  Subsequent calls to "
"C<guestfs_inspect_get_*> return this cached information, but I<do not> "
"re-read the disks.  If you change the content of the guest disks, you can "
"redo inspection by calling L</guestfs_inspect_os> again.  "
"(L</guestfs_inspect_list_applications> works a little differently from the "
"other calls and does read the disks.  See documentation for that function "
"for details)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:606
msgid "SPECIAL CONSIDERATIONS FOR WINDOWS GUESTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:608
msgid ""
"Libguestfs can mount NTFS partitions.  It does this using the "
"L<http://www.ntfs-3g.org/> driver."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:611
msgid "DRIVE LETTERS AND PATHS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:613
msgid ""
"DOS and Windows still use drive letters, and the filesystems are always "
"treated as case insensitive by Windows itself, and therefore you might find "
"a Windows configuration file referring to a path like "
"C<c:\\windows\\system32>.  When the filesystem is mounted in libguestfs, "
"that directory might be referred to as C</WINDOWS/System32>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:619
msgid ""
"Drive letter mappings are outside the scope of libguestfs.  You have to use "
"libguestfs to read the appropriate Windows Registry and configuration files, "
"to determine yourself how drives are mapped (see also L<hivex(3)> and "
"L<virt-inspector(1)>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:624
msgid ""
"Replacing backslash characters with forward slash characters is also outside "
"the scope of libguestfs, but something that you can easily do."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:627
msgid ""
"Where we can help is in resolving the case insensitivity of paths.  For "
"this, call L</guestfs_case_sensitive_path>."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:630
msgid "ACCESSING THE WINDOWS REGISTRY"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:632
msgid ""
"Libguestfs also provides some help for decoding Windows Registry \"hive\" "
"files, through the library C<hivex> which is part of the libguestfs project "
"although ships as a separate tarball.  You have to locate and download the "
"hive file(s) yourself, and then pass them to C<hivex> functions.  See also "
"the programs L<hivexml(1)>, L<hivexsh(1)>, L<hivexregedit(1)> and "
"L<virt-win-reg(1)> for more help on this issue."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:640
msgid "SYMLINKS ON NTFS-3G FILESYSTEMS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:642
msgid ""
"Ntfs-3g tries to rewrite \"Junction Points\" and NTFS \"symbolic links\" to "
"provide something which looks like a Linux symlink.  The way it tries to do "
"the rewriting is described here:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:646
msgid "L<http://www.tuxera.com/community/ntfs-3g-advanced/junction-points-and-symbolic-links/>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:648
msgid ""
"The essential problem is that ntfs-3g simply does not have enough "
"information to do a correct job.  NTFS links can contain drive letters and "
"references to external device GUIDs that ntfs-3g has no way of resolving.  "
"It is almost certainly the case that libguestfs callers should ignore what "
"ntfs-3g does (ie. don't use L</guestfs_readlink> on NTFS volumes)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:655
msgid ""
"Instead if you encounter a symbolic link on an ntfs-3g filesystem, use "
"L</guestfs_lgetxattr> to read the C<system.ntfs_reparse_data> extended "
"attribute, and read the raw reparse data from that (you can find the format "
"documented in various places around the web)."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:660
msgid "EXTENDED ATTRIBUTES ON NTFS-3G FILESYSTEMS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:662
msgid ""
"There are other useful extended attributes that can be read from ntfs-3g "
"filesystems (using L</guestfs_getxattr>).  See:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:665
msgid "L<http://www.tuxera.com/community/ntfs-3g-advanced/extended-attributes/>"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:667
msgid "USING LIBGUESTFS WITH OTHER PROGRAMMING LANGUAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:669
msgid ""
"Although we don't want to discourage you from using the C API, we will "
"mention here that the same API is also available in other languages."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:672
msgid ""
"The API is broadly identical in all supported languages.  This means that "
"the C call C<guestfs_mount(g,path)> is C<$g-E<gt>mount($path)> in Perl, "
"C<g.mount(path)> in Python, and C<Guestfs.mount g path> in OCaml.  In other "
"words, a straightforward, predictable isomorphism between each language."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:678
msgid ""
"Error messages are automatically transformed into exceptions if the language "
"supports it."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:681
msgid ""
"We don't try to \"object orientify\" parts of the API in OO languages, "
"although contributors are welcome to write higher level APIs above what we "
"provide in their favourite languages if they wish."
msgstr ""

# type: =item
#: ../src/guestfs.pod:687
msgid "B<C++>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:689
msgid ""
"You can use the I<guestfs.h> header file from C++ programs.  The C++ API is "
"identical to the C API.  C++ classes and exceptions are not used."
msgstr ""

# type: =item
#: ../src/guestfs.pod:693
msgid "B<C#>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:695
msgid ""
"The C# bindings are highly experimental.  Please read the warnings at the "
"top of C<csharp/Libguestfs.cs>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:698
msgid "B<Haskell>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:700
msgid ""
"This is the only language binding that is working but incomplete.  Only "
"calls which return simple integers have been bound in Haskell, and we are "
"looking for help to complete this binding."
msgstr ""

# type: =item
#: ../src/guestfs.pod:704
msgid "B<Java>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:706
msgid ""
"Full documentation is contained in the Javadoc which is distributed with "
"libguestfs."
msgstr ""

# type: =item
#: ../src/guestfs.pod:709
msgid "B<OCaml>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:711
msgid "For documentation see L<guestfs-ocaml(3)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:713
msgid "B<Perl>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:715
msgid "For documentation see L<Sys::Guestfs(3)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:717
msgid "B<PHP>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:719
msgid ""
"For documentation see C<README-PHP> supplied with libguestfs sources or in "
"the php-libguestfs package for your distribution."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:722
msgid "The PHP binding only works correctly on 64 bit machines."
msgstr ""

# type: =item
#: ../src/guestfs.pod:724
msgid "B<Python>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:726
msgid "For documentation see L<guestfs-python(3)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:728
msgid "B<Ruby>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:730
msgid "For documentation see L<guestfs-ruby(3)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:732
msgid "B<shell scripts>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:734
msgid "For documentation see L<guestfish(1)>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:738
msgid "LIBGUESTFS GOTCHAS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:740
msgid ""
"L<http://en.wikipedia.org/wiki/Gotcha_(programming)>: \"A feature of a "
"system [...] that works in the way it is documented but is counterintuitive "
"and almost invites mistakes.\""
msgstr ""

# type: textblock
#: ../src/guestfs.pod:744
msgid ""
"Since we developed libguestfs and the associated tools, there are several "
"things we would have designed differently, but are now stuck with for "
"backwards compatibility or other reasons.  If there is ever a libguestfs 2.0 "
"release, you can expect these to change.  Beware of them."
msgstr ""

# type: =item
#: ../src/guestfs.pod:752
msgid "Autosync / forgetting to sync."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:754
msgid ""
"When modifying a filesystem from C or another language, you B<must> unmount "
"all filesystems and call L</guestfs_sync> explicitly before you close the "
"libguestfs handle.  You can also call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:758
#, no-wrap
msgid ""
" guestfs_set_autosync (g, 1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:760
msgid ""
"to have the unmount/sync done automatically for you when the handle 'g' is "
"closed.  (This feature is called \"autosync\", L</guestfs_set_autosync> "
"q.v.)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:764
msgid ""
"If you forget to do this, then it is entirely possible that your changes "
"won't be written out, or will be partially written, or (very rarely) that "
"you'll get disk corruption."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:768
msgid ""
"Note that in L<guestfish(3)> autosync is the default.  So quick and dirty "
"guestfish scripts that forget to sync will work just fine, which can make "
"this very puzzling if you are trying to debug a problem."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:772
msgid ""
"Update: Autosync is enabled by default for all API users starting from "
"libguestfs 1.5.24."
msgstr ""

# type: =item
#: ../src/guestfs.pod:775
msgid "Mount option C<-o sync> should not be the default."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:777
msgid ""
"If you use L</guestfs_mount>, then C<-o sync,noatime> are added implicitly.  "
"However C<-o sync> does not add any reliability benefit, but does have a "
"very large performance impact."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:781
msgid ""
"The work around is to use L</guestfs_mount_options> and set the mount "
"options that you actually want to use."
msgstr ""

# type: =item
#: ../src/guestfs.pod:784
msgid "Read-only should be the default."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:786
msgid ""
"In L<guestfish(3)>, I<--ro> should be the default, and you should have to "
"specify I<--rw> if you want to make changes to the image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:789
msgid "This would reduce the potential to corrupt live VM images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:791
msgid ""
"Note that many filesystems change the disk when you just mount and unmount, "
"even if you didn't perform any writes.  You need to use "
"L</guestfs_add_drive_ro> to guarantee that the disk is not changed."
msgstr ""

# type: =item
#: ../src/guestfs.pod:795
msgid "guestfish command line is hard to use."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:797
msgid ""
"C<guestfish disk.img> doesn't do what people expect (open C<disk.img> for "
"examination).  It tries to run a guestfish command C<disk.img> which doesn't "
"exist, so it fails.  In earlier versions of guestfish the error message was "
"also unintuitive, but we have corrected this since.  Like the Bourne shell, "
"we should have used C<guestfish -c command> to run commands."
msgstr ""

# type: =item
#: ../src/guestfs.pod:804
msgid "guestfish megabyte modifiers don't work right on all commands"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:806
msgid ""
"In recent guestfish you can use C<1M> to mean 1 megabyte (and similarly for "
"other modifiers).  What guestfish actually does is to multiply the number "
"part by the modifier part and pass the result to the C API.  However this "
"doesn't work for a few APIs which aren't expecting bytes, but are already "
"expecting some other unit (eg. megabytes)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:813
msgid "The most common is L</guestfs_lvcreate>.  The guestfish command:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:815
#, no-wrap
msgid ""
" lvcreate LV VG 100M\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:817
msgid ""
"does not do what you might expect.  Instead because L</guestfs_lvcreate> is "
"already expecting megabytes, this tries to create a 100 I<terabyte> (100 "
"megabytes * megabytes) logical volume.  The error message you get from this "
"is also a little obscure."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:822
msgid ""
"This could be fixed in the generator by specially marking parameters and "
"return values which take bytes or other units."
msgstr ""

# type: =item
#: ../src/guestfs.pod:825
msgid "Ambiguity between devices and paths"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:827
msgid ""
"There is a subtle ambiguity in the API between a device name "
"(eg. C</dev/sdb2>) and a similar pathname.  A file might just happen to be "
"called C<sdb2> in the directory C</dev> (consider some non-Unix VM image)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:832
msgid ""
"In the current API we usually resolve this ambiguity by having two separate "
"calls, for example L</guestfs_checksum> and L</guestfs_checksum_device>.  "
"Some API calls are ambiguous and (incorrectly) resolve the problem by "
"detecting if the path supplied begins with C</dev/>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:838
msgid ""
"To avoid both the ambiguity and the need to duplicate some calls, we could "
"make paths/devices into structured names.  One way to do this would be to "
"use a notation like grub (C<hd(0,0)>), although nobody really likes this "
"aspect of grub.  Another way would be to use a structured type, equivalent "
"to this OCaml type:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:844
#, no-wrap
msgid ""
" type path = Path of string | Device of int | Partition of int * int\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:846
msgid "which would allow you to pass arguments like:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:848
#, no-wrap
msgid ""
" Path \"/foo/bar\"\n"
" Device 1            (* /dev/sdb, or perhaps /dev/sda *)\n"
" Partition (1, 2)    (* /dev/sdb2 (or is it /dev/sda2 or /dev/sdb3?) *)\n"
" Path \"/dev/sdb2\"    (* not a device *)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:853
msgid ""
"As you can see there are still problems to resolve even with this "
"representation.  Also consider how it might work in guestfish."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:858
msgid "PROTOCOL LIMITS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:860
msgid ""
"Internally libguestfs uses a message-based protocol to pass API calls and "
"their responses to and from a small \"appliance\" (see L</INTERNALS> for "
"plenty more detail about this).  The maximum message size used by the "
"protocol is slightly less than 4 MB.  For some API calls you may need to be "
"aware of this limit.  The API calls which may be affected are individually "
"documented, with a link back to this section of the documentation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:868
msgid ""
"A simple call such as L</guestfs_cat> returns its result (the file data) in "
"a simple string.  Because this string is at some point internally encoded as "
"a message, the maximum size that it can return is slightly under 4 MB.  If "
"the requested file is larger than this then you will get an error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:874
msgid ""
"In order to transfer large files into and out of the guest filesystem, you "
"need to use particular calls that support this.  The sections L</UPLOADING> "
"and L</DOWNLOADING> document how to do this."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:878
msgid ""
"You might also consider mounting the disk image using our FUSE filesystem "
"support (L<guestmount(1)>)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:881
msgid "KEYS AND PASSPHRASES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:883
msgid ""
"Certain libguestfs calls take a parameter that contains sensitive key "
"material, passed in as a C string."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:886
msgid ""
"In the future we would hope to change the libguestfs implementation so that "
"keys are L<mlock(2)>-ed into physical RAM, and thus can never end up in "
"swap.  However this is I<not> done at the moment, because of the complexity "
"of such an implementation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:891
msgid ""
"Therefore you should be aware that any key parameter you pass to libguestfs "
"might end up being written out to the swap partition.  If this is a concern, "
"scrub the swap partition or don't use libguestfs on encrypted devices."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:896
msgid "MULTIPLE HANDLES AND MULTIPLE THREADS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:898
msgid ""
"All high-level libguestfs actions are synchronous.  If you want to use "
"libguestfs asynchronously then you must create a thread."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:901
msgid ""
"Only use the handle from a single thread.  Either use the handle exclusively "
"from one thread, or provide your own mutex so that two threads cannot issue "
"calls on the same handle at the same time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:905
msgid ""
"See the graphical program guestfs-browser for one possible architecture for "
"multithreaded programs using libvirt and libguestfs."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:908
msgid "PATH"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:910
msgid ""
"Libguestfs needs a kernel and initrd.img, which it finds by looking along an "
"internal path."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:913
msgid ""
"By default it looks for these in the directory C<$libdir/guestfs> "
"(eg. C</usr/local/lib/guestfs> or C</usr/lib64/guestfs>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:916
msgid ""
"Use L</guestfs_set_path> or set the environment variable L</LIBGUESTFS_PATH> "
"to change the directories that libguestfs will search in.  The value is a "
"colon-separated list of paths.  The current directory is I<not> searched "
"unless the path contains an empty element or C<.>.  For example "
"C<LIBGUESTFS_PATH=:/usr/lib/guestfs> would search the current directory and "
"then C</usr/lib/guestfs>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:923
msgid "QEMU WRAPPERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:925
msgid ""
"If you want to compile your own qemu, run qemu from a non-standard location, "
"or pass extra arguments to qemu, then you can write a shell-script wrapper "
"around qemu."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:929
msgid ""
"There is one important rule to remember: you I<must C<exec qemu>> as the "
"last command in the shell script (so that qemu replaces the shell and "
"becomes the direct child of the libguestfs-using program).  If you don't do "
"this, then the qemu process won't be cleaned up correctly."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:934
msgid ""
"Here is an example of a wrapper, where I have built my own copy of qemu from "
"source:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:937
#, no-wrap
msgid ""
" #!/bin/sh -\n"
" qemudir=/home/rjones/d/qemu\n"
" exec $qemudir/x86_64-softmmu/qemu-system-x86_64 -L $qemudir/pc-bios "
"\"$@\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:941
msgid ""
"Save this script as C</tmp/qemu.wrapper> (or wherever), C<chmod +x>, and "
"then use it by setting the LIBGUESTFS_QEMU environment variable.  For "
"example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:945
#, no-wrap
msgid ""
" LIBGUESTFS_QEMU=/tmp/qemu.wrapper guestfish\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:947
msgid ""
"Note that libguestfs also calls qemu with the -help and -version options in "
"order to determine features."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:950
msgid "ABI GUARANTEE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:952
msgid ""
"We guarantee the libguestfs ABI (binary interface), for public, high-level "
"actions as outlined in this section.  Although we will deprecate some "
"actions, for example if they get replaced by newer calls, we will keep the "
"old actions forever.  This allows you the developer to program in confidence "
"against the libguestfs API."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:958
msgid "BLOCK DEVICE NAMING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:960
msgid ""
"In the kernel there is now quite a profusion of schemata for naming block "
"devices (in this context, by I<block device> I mean a physical or virtual "
"hard drive).  The original Linux IDE driver used names starting with "
"C</dev/hd*>.  SCSI devices have historically used a different naming scheme, "
"C</dev/sd*>.  When the Linux kernel I<libata> driver became a popular "
"replacement for the old IDE driver (particularly for SATA devices) those "
"devices also used the C</dev/sd*> scheme.  Additionally we now have virtual "
"machines with paravirtualized drivers.  This has created several different "
"naming systems, such as C</dev/vd*> for virtio disks and C</dev/xvd*> for "
"Xen PV disks."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:972
msgid ""
"As discussed above, libguestfs uses a qemu appliance running an embedded "
"Linux kernel to access block devices.  We can run a variety of appliances "
"based on a variety of Linux kernels."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:976
msgid ""
"This causes a problem for libguestfs because many API calls use device or "
"partition names.  Working scripts and the recipe (example) scripts that we "
"make available over the internet could fail if the naming scheme changes."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:981
msgid ""
"Therefore libguestfs defines C</dev/sd*> as the I<standard naming scheme>.  "
"Internally C</dev/sd*> names are translated, if necessary, to other names as "
"required.  For example, under RHEL 5 which uses the C</dev/hd*> scheme, any "
"device parameter C</dev/sda2> is translated to C</dev/hda2> transparently."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:987
msgid ""
"Note that this I<only> applies to parameters.  The L</guestfs_list_devices>, "
"L</guestfs_list_partitions> and similar calls return the true names of the "
"devices and partitions as known to the appliance."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:992
msgid "ALGORITHM FOR BLOCK DEVICE NAME TRANSLATION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:994
msgid ""
"Usually this translation is transparent.  However in some (very rare)  cases "
"you may need to know the exact algorithm.  Such cases include where you use "
"L</guestfs_config> to add a mixture of virtio and IDE devices to the "
"qemu-based appliance, so have a mixture of C</dev/sd*> and C</dev/vd*> "
"devices."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1000
msgid ""
"The algorithm is applied only to I<parameters> which are known to be either "
"device or partition names.  Return values from functions such as "
"L</guestfs_list_devices> are never changed."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1008
msgid "Is the string a parameter which is a device or partition name?"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1012
msgid "Does the string begin with C</dev/sd>?"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1016
msgid ""
"Does the named device exist? If so, we use that device.  However if I<not> "
"then we continue with this algorithm."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1021
msgid "Replace initial C</dev/sd> string with C</dev/hd>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1023
msgid "For example, change C</dev/sda2> to C</dev/hda2>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1025
msgid "If that named device exists, use it.  If not, continue."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1029
msgid "Replace initial C</dev/sd> string with C</dev/vd>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1031
msgid "If that named device exists, use it.  If not, return an error."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1035
msgid "PORTABILITY CONCERNS WITH BLOCK DEVICE NAMING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1037
msgid ""
"Although the standard naming scheme and automatic translation is useful for "
"simple programs and guestfish scripts, for larger programs it is best not to "
"rely on this mechanism."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1041
msgid ""
"Where possible for maximum future portability programs using libguestfs "
"should use these future-proof techniques:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1048
msgid ""
"Use L</guestfs_list_devices> or L</guestfs_list_partitions> to list actual "
"device names, and then use those names directly."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1051
msgid "Since those device names exist by definition, they will never be translated."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1056
msgid ""
"Use higher level ways to identify filesystems, such as LVM names, UUIDs and "
"filesystem labels."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1061
msgid "SECURITY"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1063
msgid ""
"This section discusses security implications of using libguestfs, "
"particularly with untrusted or malicious guests or disk images."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1066
msgid "GENERAL SECURITY CONSIDERATIONS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1068
msgid ""
"Be careful with any files or data that you download from a guest (by "
"\"download\" we mean not just the L</guestfs_download> command but any "
"command that reads files, filenames, directories or anything else from a "
"disk image).  An attacker could manipulate the data to fool your program "
"into doing the wrong thing.  Consider cases such as:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1078
msgid "the data (file etc) not being present"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1082
msgid "being present but empty"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1086
msgid "being much larger than normal"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1090
msgid "containing arbitrary 8 bit data"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1094
msgid "being in an unexpected character encoding"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1098
msgid "containing homoglyphs."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1102
msgid "SECURITY OF MOUNTING FILESYSTEMS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1104
msgid ""
"When you mount a filesystem under Linux, mistakes in the kernel filesystem "
"(VFS) module can sometimes be escalated into exploits by deliberately "
"creating a malicious, malformed filesystem.  These exploits are very severe "
"for two reasons.  Firstly there are very many filesystem drivers in the "
"kernel, and many of them are infrequently used and not much developer "
"attention has been paid to the code.  Linux userspace helps potential "
"crackers by detecting the filesystem type and automatically choosing the "
"right VFS driver, even if that filesystem type is obscure or unexpected for "
"the administrator.  Secondly, a kernel-level exploit is like a local root "
"exploit (worse in some ways), giving immediate and total access to the "
"system right down to the hardware level."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1117
msgid ""
"That explains why you should never mount a filesystem from an untrusted "
"guest on your host kernel.  How about libguestfs? We run a Linux kernel "
"inside a qemu virtual machine, usually running as a non-root user.  The "
"attacker would need to write a filesystem which first exploited the kernel, "
"and then exploited either qemu virtualization (eg. a faulty qemu driver) or "
"the libguestfs protocol, and finally to be as serious as the host kernel "
"exploit it would need to escalate its privileges to root.  This multi-step "
"escalation, performed by a static piece of data, is thought to be extremely "
"hard to do, although we never say 'never' about security issues."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1128
msgid ""
"In any case callers can reduce the attack surface by forcing the filesystem "
"type when mounting (use L</guestfs_mount_vfs>)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1131
msgid "PROTOCOL SECURITY"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1133
msgid ""
"The protocol is designed to be secure, being based on RFC 4506 (XDR)  with a "
"defined upper message size.  However a program that uses libguestfs must "
"also take care - for example you can write a program that downloads a binary "
"from a disk image and executes it locally, and no amount of protocol "
"security will save you from the consequences."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1139
msgid "INSPECTION SECURITY"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1141
msgid ""
"Parts of the inspection API (see L</INSPECTION>) return untrusted strings "
"directly from the guest, and these could contain any 8 bit data.  Callers "
"should be careful to escape these before printing them to a structured file "
"(for example, use HTML escaping if creating a web page)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1147
msgid ""
"Guest configuration may be altered in unusual ways by the administrator of "
"the virtual machine, and may not reflect reality (particularly for untrusted "
"or actively malicious guests).  For example we parse the hostname from "
"configuration files like C</etc/sysconfig/network> that we find in the "
"guest, but the guest administrator can easily manipulate these files to "
"provide the wrong hostname."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1155
msgid ""
"The inspection API parses guest configuration using two external libraries: "
"Augeas (Linux configuration) and hivex (Windows Registry).  Both are "
"designed to be robust in the face of malicious data, although denial of "
"service attacks are still possible, for example with oversized configuration "
"files."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1161
msgid "RUNNING UNTRUSTED GUEST COMMANDS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1163
msgid ""
"Be very cautious about running commands from the guest.  By running a "
"command in the guest, you are giving CPU time to a binary that you do not "
"control, under the same user account as the library, albeit wrapped in qemu "
"virtualization.  More information and alternatives can be found in the "
"section L</RUNNING COMMANDS>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1169
msgid "CVE-2010-3851"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1171
msgid "https://bugzilla.redhat.com/642934"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1173
msgid ""
"This security bug concerns the automatic disk format detection that qemu "
"does on disk images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1176
msgid ""
"A raw disk image is just the raw bytes, there is no header.  Other disk "
"images like qcow2 contain a special header.  Qemu deals with this by looking "
"for one of the known headers, and if none is found then assuming the disk "
"image must be raw."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1181
msgid ""
"This allows a guest which has been given a raw disk image to write some "
"other header.  At next boot (or when the disk image is accessed by "
"libguestfs) qemu would do autodetection and think the disk image format was, "
"say, qcow2 based on the header written by the guest."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1186
msgid ""
"This in itself would not be a problem, but qcow2 offers many features, one "
"of which is to allow a disk image to refer to another image (called the "
"\"backing disk\").  It does this by placing the path to the backing disk "
"into the qcow2 header.  This path is not validated and could point to any "
"host file (eg. \"/etc/passwd\").  The backing disk is then exposed through "
"\"holes\" in the qcow2 disk image, which of course is completely under the "
"control of the attacker."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1194
msgid "In libguestfs this is rather hard to exploit except under two circumstances:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1201
msgid "You have enabled the network or have opened the disk in write mode."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1205
msgid ""
"You are also running untrusted code from the guest (see L</RUNNING "
"COMMANDS>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1210
msgid ""
"The way to avoid this is to specify the expected disk format when adding "
"disks (the optional C<format> option to L</guestfs_add_drive_opts>).  You "
"should always do this if the disk is raw format, and it's a good idea for "
"other cases too."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1215
msgid ""
"For disks added from libvirt using calls like L</guestfs_add_domain>, the "
"format is fetched from libvirt and passed through."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1218
msgid ""
"For libguestfs tools, use the I<--format> command line parameter as "
"appropriate."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1221
msgid "CONNECTION MANAGEMENT"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1223
msgid "guestfs_h *"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1225
msgid ""
"C<guestfs_h> is the opaque type representing a connection handle.  Create a "
"handle by calling L</guestfs_create>.  Call L</guestfs_close> to free the "
"handle and release all resources used."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1229
msgid ""
"For information on using multiple handles and threads, see the section "
"L</MULTIPLE HANDLES AND MULTIPLE THREADS> below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1232
msgid "guestfs_create"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1234
#, no-wrap
msgid ""
" guestfs_h *guestfs_create (void);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1236
msgid "Create a connection handle."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1238
msgid ""
"You have to call L</guestfs_add_drive_opts> (or one of the equivalent calls) "
"on the handle at least once."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1241
msgid ""
"This function returns a non-NULL pointer to a handle on success or NULL on "
"error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1244
msgid "After configuring the handle, you have to call L</guestfs_launch>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1246
msgid ""
"You may also want to configure error handling for the handle.  See L</ERROR "
"HANDLING> section below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1249
msgid "guestfs_close"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1251
#, no-wrap
msgid ""
" void guestfs_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1253
msgid "This closes the connection handle and frees up all resources used."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1255
msgid "ERROR HANDLING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1257
msgid ""
"API functions can return errors.  For example, almost all functions that "
"return C<int> will return C<-1> to indicate an error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1260
msgid ""
"Additional information is available for errors: an error message string and "
"optionally an error number (errno) if the thing that failed was a system "
"call."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1264
msgid ""
"You can get at the additional information about the last error on the handle "
"by calling L</guestfs_last_error>, L</guestfs_last_errno>, and/or by setting "
"up an error handler with L</guestfs_set_error_handler>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1269
msgid ""
"When the handle is created, a default error handler is installed which "
"prints the error message string to C<stderr>.  For small short-running "
"command line programs it is sufficient to do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1273
#, no-wrap
msgid ""
" if (guestfs_launch (g) == -1)\n"
"   exit (EXIT_FAILURE);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1276
msgid ""
"since the default error handler will ensure that an error message has been "
"printed to C<stderr> before the program exits."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1279
msgid ""
"For other programs the caller will almost certainly want to install an "
"alternate error handler or do error handling in-line like this:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1282
#, no-wrap
msgid ""
" g = guestfs_create ();\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1284
#, no-wrap
msgid ""
" /* This disables the default behaviour of printing errors\n"
"    on stderr. */\n"
" guestfs_set_error_handler (g, NULL, NULL);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1288
#, no-wrap
msgid ""
" if (guestfs_launch (g) == -1) {\n"
"   /* Examine the error message and print it etc. */\n"
"   char *msg = guestfs_last_error (g);\n"
"   int errnum = guestfs_last_errno (g);\n"
"   fprintf (stderr, \"%s\\n\", msg);\n"
"   /* ... */\n"
"  }\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1296
msgid ""
"Out of memory errors are handled differently.  The default action is to call "
"L<abort(3)>.  If this is undesirable, then you can set a handler using "
"L</guestfs_set_out_of_memory_handler>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1300
msgid ""
"L</guestfs_create> returns C<NULL> if the handle cannot be created, and "
"because there is no handle if this happens there is no way to get additional "
"error information.  However L</guestfs_create> is supposed to be a "
"lightweight operation which can only fail because of insufficient memory (it "
"returns NULL in this case)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1306
msgid "guestfs_last_error"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1308
#, no-wrap
msgid ""
" const char *guestfs_last_error (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1310
msgid ""
"This returns the last error message that happened on C<g>.  If there has not "
"been an error since the handle was created, then this returns C<NULL>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1314
msgid ""
"The lifetime of the returned string is until the next error occurs, or "
"L</guestfs_close> is called."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1317
msgid "guestfs_last_errno"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1319
#, no-wrap
msgid ""
" int guestfs_last_errno (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1321
msgid "This returns the last error number (errno) that happened on C<g>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1323
msgid "If successful, an errno integer not equal to zero is returned."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1325
msgid "If no error, this returns 0.  This call can return 0 in three situations:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1332
msgid "There has not been any error on the handle."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1336
msgid ""
"There has been an error but the errno was meaningless.  This corresponds to "
"the case where the error did not come from a failed system call, but for "
"some other reason."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1342
msgid ""
"There was an error from a failed system call, but for some reason the errno "
"was not captured and returned.  This usually indicates a bug in libguestfs."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1348
msgid ""
"Libguestfs tries to convert the errno from inside the applicance into a "
"corresponding errno for the caller (not entirely trivial: the appliance "
"might be running a completely different operating system from the library "
"and error numbers are not standardized across Un*xen).  If this could not be "
"done, then the error is translated to C<EINVAL>.  In practice this should "
"only happen in very rare circumstances."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1356
msgid "guestfs_set_error_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1358
#, no-wrap
msgid ""
" typedef void (*guestfs_error_handler_cb) (guestfs_h *g,\n"
"                                           void *opaque,\n"
"                                           const char *msg);\n"
" void guestfs_set_error_handler (guestfs_h *g,\n"
"                                 guestfs_error_handler_cb cb,\n"
"                                 void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1365
msgid ""
"The callback C<cb> will be called if there is an error.  The parameters "
"passed to the callback are an opaque data pointer and the error message "
"string."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1369
msgid ""
"C<errno> is not passed to the callback.  To get that the callback must call "
"L</guestfs_last_errno>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1372
msgid ""
"Note that the message string C<msg> is freed as soon as the callback "
"function returns, so if you want to stash it somewhere you must make your "
"own copy."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1376
msgid "The default handler prints messages on C<stderr>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1378
msgid "If you set C<cb> to C<NULL> then I<no> handler is called."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1380
msgid "guestfs_get_error_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1382
#, no-wrap
msgid ""
" guestfs_error_handler_cb guestfs_get_error_handler (guestfs_h *g,\n"
"                                                     void **opaque_rtn);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1385
msgid "Returns the current error handler callback."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1387
msgid "guestfs_set_out_of_memory_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1389
#, no-wrap
msgid ""
" typedef void (*guestfs_abort_cb) (void);\n"
" int guestfs_set_out_of_memory_handler (guestfs_h *g,\n"
"                                        guestfs_abort_cb);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1393
msgid ""
"The callback C<cb> will be called if there is an out of memory situation.  "
"I<Note this callback must not return>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1396
msgid "The default is to call L<abort(3)>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1398
msgid "You cannot set C<cb> to C<NULL>.  You can't ignore out of memory situations."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1401
msgid "guestfs_get_out_of_memory_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1403
#, no-wrap
msgid ""
" guestfs_abort_fn guestfs_get_out_of_memory_handler (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1405
msgid "This returns the current out of memory handler."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1407
msgid "API CALLS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1409 ../fish/guestfish.pod:958
msgid "@ACTIONS@"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1411
msgid "STRUCTURES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1413
msgid "@STRUCTS@"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1415
msgid "AVAILABILITY"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1417
msgid "GROUPS OF FUNCTIONALITY IN THE APPLIANCE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1419
msgid ""
"Using L</guestfs_available> you can test availability of the following "
"groups of functions.  This test queries the appliance to see if the "
"appliance you are currently using supports the functionality."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1424
msgid "@AVAILABILITY@"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1426
msgid "GUESTFISH supported COMMAND"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1428
msgid ""
"In L<guestfish(3)> there is a handy interactive command C<supported> which "
"prints out the available groups and whether they are supported by this build "
"of libguestfs.  Note however that you have to do C<run> first."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1433
msgid "SINGLE CALLS AT COMPILE TIME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1435
msgid ""
"Since version 1.5.8, C<E<lt>guestfs.hE<gt>> defines symbols for each C API "
"function, such as:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1438
#, no-wrap
msgid ""
" #define LIBGUESTFS_HAVE_DD 1\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1440
msgid "if L</guestfs_dd> is available."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1442
msgid ""
"Before version 1.5.8, if you needed to test whether a single libguestfs "
"function is available at compile time, we recommended using build tools such "
"as autoconf or cmake.  For example in autotools you could use:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1447
#, no-wrap
msgid ""
" AC_CHECK_LIB([guestfs],[guestfs_create])\n"
" AC_CHECK_FUNCS([guestfs_dd])\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1450
msgid ""
"which would result in C<HAVE_GUESTFS_DD> being either defined or not defined "
"in your program."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1453
msgid "SINGLE CALLS AT RUN TIME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1455
msgid ""
"Testing at compile time doesn't guarantee that a function really exists in "
"the library.  The reason is that you might be dynamically linked against a "
"previous I<libguestfs.so> (dynamic library)  which doesn't have the call.  "
"This situation unfortunately results in a segmentation fault, which is a "
"shortcoming of the C dynamic linking system itself."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1462
msgid ""
"You can use L<dlopen(3)> to test if a function is available at run time, as "
"in this example program (note that you still need the compile time check as "
"well):"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1466
#, no-wrap
msgid ""
" #include <stdio.h>\n"
" #include <stdlib.h>\n"
" #include <unistd.h>\n"
" #include <dlfcn.h>\n"
" #include <guestfs.h>\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1472
#, no-wrap
msgid ""
" main ()\n"
" {\n"
" #ifdef LIBGUESTFS_HAVE_DD\n"
"   void *dl;\n"
"   int has_function;\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1478
#, no-wrap
msgid ""
"   /* Test if the function guestfs_dd is really available. */\n"
"   dl = dlopen (NULL, RTLD_LAZY);\n"
"   if (!dl) {\n"
"     fprintf (stderr, \"dlopen: %s\\n\", dlerror ());\n"
"     exit (EXIT_FAILURE);\n"
"   }\n"
"   has_function = dlsym (dl, \"guestfs_dd\") != NULL;\n"
"   dlclose (dl);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1487
#, no-wrap
msgid ""
"   if (!has_function)\n"
"     printf (\"this libguestfs.so does NOT have guestfs_dd function\\n\");\n"
"   else {\n"
"     printf (\"this libguestfs.so has guestfs_dd function\\n\");\n"
"     /* Now it's safe to call\n"
"     guestfs_dd (g, \"foo\", \"bar\");\n"
"     */\n"
"   }\n"
" #else\n"
"   printf (\"guestfs_dd function was not found at compile time\\n\");\n"
" #endif\n"
"  }\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1500
msgid ""
"You may think the above is an awful lot of hassle, and it is.  There are "
"other ways outside of the C linking system to ensure that this kind of "
"incompatibility never arises, such as using package versioning:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1505
#, no-wrap
msgid ""
" Requires: libguestfs >= 1.0.80\n"
"\n"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1507
msgid "CALLS WITH OPTIONAL ARGUMENTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1509
msgid ""
"A recent feature of the API is the introduction of calls which take optional "
"arguments.  In C these are declared 3 ways.  The main way is as a call which "
"takes variable arguments (ie. C<...>), as in this example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1514
#, no-wrap
msgid ""
" int guestfs_add_drive_opts (guestfs_h *g, const char *filename, ...);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1516
msgid ""
"Call this with a list of optional arguments, terminated by C<-1>.  So to "
"call with no optional arguments specified:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1519
#, no-wrap
msgid ""
" guestfs_add_drive_opts (g, filename, -1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1521
msgid "With a single optional argument:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1523
#, no-wrap
msgid ""
" guestfs_add_drive_opts (g, filename,\n"
"                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, \"qcow2\",\n"
"                         -1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1527
msgid "With two:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1529
#, no-wrap
msgid ""
" guestfs_add_drive_opts (g, filename,\n"
"                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, \"qcow2\",\n"
"                         GUESTFS_ADD_DRIVE_OPTS_READONLY, 1,\n"
"                         -1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1534
msgid ""
"and so forth.  Don't forget the terminating C<-1> otherwise Bad Things will "
"happen!"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1537
msgid "USING va_list FOR OPTIONAL ARGUMENTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1539
msgid ""
"The second variant has the same name with the suffix C<_va>, which works the "
"same way but takes a C<va_list>.  See the C manual for details.  For the "
"example function, this is declared:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1543
#, no-wrap
msgid ""
" int guestfs_add_drive_opts_va (guestfs_h *g, const char *filename,\n"
"                                va_list args);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1546
msgid "CONSTRUCTING OPTIONAL ARGUMENTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1548
msgid ""
"The third variant is useful where you need to construct these calls.  You "
"pass in a structure where you fill in the optional fields.  The structure "
"has a bitmask as the first element which you must set to indicate which "
"fields you have filled in.  For our example function the structure and call "
"are declared:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1554
#, no-wrap
msgid ""
" struct guestfs_add_drive_opts_argv {\n"
"   uint64_t bitmask;\n"
"   int readonly;\n"
"   const char *format;\n"
"   /* ... */\n"
" };\n"
" int guestfs_add_drive_opts_argv (guestfs_h *g, const char *filename,\n"
"              const struct guestfs_add_drive_opts_argv *optargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1563
msgid "You could call it like this:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1565
#, no-wrap
msgid ""
" struct guestfs_add_drive_opts_argv optargs = {\n"
"   .bitmask = GUESTFS_ADD_DRIVE_OPTS_READONLY_BITMASK |\n"
"              GUESTFS_ADD_DRIVE_OPTS_FORMAT_BITMASK,\n"
"   .readonly = 1,\n"
"   .format = \"qcow2\"\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1572
#, no-wrap
msgid ""
" guestfs_add_drive_opts_argv (g, filename, &optargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1574 ../src/guestfs-actions.pod:11 ../src/guestfs-actions.pod:1844 ../fish/guestfish-actions.pod:9 ../fish/guestfish-actions.pod:1255
msgid "Notes:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1580
msgid "The C<_BITMASK> suffix on each option name when specifying the bitmask."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1585
msgid "You do not need to fill in all fields of the structure."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1589
msgid ""
"There must be a one-to-one correspondence between fields of the structure "
"that are filled in, and bits set in the bitmask."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1594
msgid "OPTIONAL ARGUMENTS IN OTHER LANGUAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1596
msgid ""
"In other languages, optional arguments are expressed in the way that is "
"natural for that language.  We refer you to the language-specific "
"documentation for more details on that."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1600
msgid "For guestfish, see L<guestfish(1)/OPTIONAL ARGUMENTS>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1602
msgid "SETTING CALLBACKS TO HANDLE EVENTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1604
msgid ""
"The child process generates events in some situations.  Current events "
"include: receiving a log message, the child process exits."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1607
msgid ""
"Use the C<guestfs_set_*_callback> functions to set a callback for different "
"types of events."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1610
msgid ""
"Only I<one callback of each type> can be registered for each handle.  "
"Calling C<guestfs_set_*_callback> again overwrites the previous callback of "
"that type.  Cancel all callbacks of this type by calling this function with "
"C<cb> set to C<NULL>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1615
msgid "guestfs_set_log_message_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1617
#, no-wrap
msgid ""
" typedef void (*guestfs_log_message_cb) (guestfs_h *g, void *opaque,\n"
"                                         char *buf, int len);\n"
" void guestfs_set_log_message_callback (guestfs_h *g,\n"
"                                        guestfs_log_message_cb cb,\n"
"                                        void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1623
msgid ""
"The callback function C<cb> will be called whenever qemu or the guest writes "
"anything to the console."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1626
msgid "Use this function to capture kernel messages and similar."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1628
msgid ""
"Normally there is no log message handler, and log messages are just "
"discarded."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1631
msgid "guestfs_set_subprocess_quit_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1633
#, no-wrap
msgid ""
" typedef void (*guestfs_subprocess_quit_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_subprocess_quit_callback (guestfs_h *g,\n"
"                                            guestfs_subprocess_quit_cb cb,\n"
"                                            void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1638
msgid ""
"The callback function C<cb> will be called when the child process quits, "
"either asynchronously or if killed by L</guestfs_kill_subprocess>.  (This "
"corresponds to a transition from any state to the CONFIG state)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1643
msgid "guestfs_set_launch_done_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1645
#, no-wrap
msgid ""
" typedef void (*guestfs_launch_done_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_launch_done_callback (guestfs_h *g,\n"
"                                        guestfs_launch_done_cb cb,\n"
"                                        void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1650
msgid ""
"The callback function C<cb> will be called when the child process becomes "
"ready first time after it has been launched.  (This corresponds to a "
"transition from LAUNCHING to the READY state)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1654
msgid "guestfs_set_close_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1656
#, no-wrap
msgid ""
" typedef void (*guestfs_close_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_close_callback (guestfs_h *g,\n"
"                                  guestfs_close_cb cb,\n"
"                                  void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1661
msgid ""
"The callback function C<cb> will be called while the handle is being closed "
"(synchronously from L</guestfs_close>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1664
msgid ""
"Note that libguestfs installs an L<atexit(3)> handler to try to clean up "
"handles that are open when the program exits.  This means that this callback "
"might be called indirectly from L<exit(3)>, which can cause unexpected "
"problems in higher-level languages (eg. if your HLL interpreter has already "
"been cleaned up by the time this is called, and if your callback then jumps "
"into some HLL function)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1672
msgid "guestfs_set_progress_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1674
#, no-wrap
msgid ""
" typedef void (*guestfs_progress_cb) (guestfs_h *g, void *opaque,\n"
"                                      int proc_nr, int serial,\n"
"                                      uint64_t position, uint64_t total);\n"
" void guestfs_set_progress_callback (guestfs_h *g,\n"
"                                     guestfs_progress_cb cb,\n"
"                                     void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1681
msgid ""
"Some long-running operations can generate progress messages.  If this "
"callback is registered, then it will be called each time a progress message "
"is generated (usually two seconds after the operation started, and three "
"times per second thereafter until it completes, although the frequency may "
"change in future versions)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1687
msgid ""
"The callback receives two numbers: C<position> and C<total>.  The units of "
"C<total> are not defined, although for some operations C<total> may relate "
"in some way to the amount of data to be transferred (eg. in bytes or "
"megabytes), and C<position> may be the portion which has been transferred."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1693
msgid "The only defined and stable parts of the API are:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1699
msgid ""
"The callback can display to the user some type of progress bar or indicator "
"which shows the ratio of C<position>:C<total>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1704
msgid "0 E<lt>= C<position> E<lt>= C<total>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1708
msgid ""
"If any progress notification is sent during a call, then a final progress "
"notification is always sent when C<position> = C<total>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1711
msgid ""
"This is to simplify caller code, so callers can easily set the progress "
"indicator to \"100%\" at the end of the operation, without requiring special "
"code to detect this case."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1717
msgid ""
"The callback also receives the procedure number and serial number of the "
"call.  These are only useful for debugging protocol issues, and the callback "
"can normally ignore them.  The callback may want to print these numbers in "
"error messages or debugging messages."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1722
msgid "PRIVATE DATA AREA"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1724
msgid ""
"You can attach named pieces of private data to the libguestfs handle, and "
"fetch them by name for the lifetime of the handle.  This is called the "
"private data area and is only available from the C API."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1728
msgid "To attach a named piece of data, use the following call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1730
#, no-wrap
msgid ""
" void guestfs_set_private (guestfs_h *g, const char *key, void *data);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1732
msgid ""
"C<key> is the name to associate with this data, and C<data> is an arbitrary "
"pointer (which can be C<NULL>).  Any previous item with the same name is "
"overwritten."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1736
msgid ""
"You can use any C<key> you want, but names beginning with an underscore "
"character are reserved for internal libguestfs purposes (for implementing "
"language bindings).  It is recommended to prefix the name with some unique "
"string to avoid collisions with other users."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1741
msgid "To retrieve the pointer, use:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1743
#, no-wrap
msgid ""
" void *guestfs_get_private (guestfs_h *g, const char *key);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1745
msgid ""
"This function returns C<NULL> if either no data is found associated with "
"C<key>, or if the user previously set the C<key>'s C<data> pointer to "
"C<NULL>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1749
msgid ""
"Libguestfs does not try to look at or interpret the C<data> pointer in any "
"way.  As far as libguestfs is concerned, it need not be a valid pointer at "
"all.  In particular, libguestfs does I<not> try to free the data when the "
"handle is closed.  If the data must be freed, then the caller must either "
"free it before calling L</guestfs_close> or must set up a close callback to "
"do it (see L</guestfs_set_close_callback>, and note that only one callback "
"can be registered for a handle)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1757
msgid ""
"The private data area is implemented using a hash table, and should be "
"reasonably efficient for moderate numbers of keys."
msgstr ""

# type: =end
#: ../src/guestfs.pod:1760 ../src/guestfs.pod:1765
msgid "html"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1762
msgid ""
"<!-- old anchor for the next section --> <a "
"name=\"state_machine_and_low_level_event_api\"/>"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1767
msgid "ARCHITECTURE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1769
msgid ""
"Internally, libguestfs is implemented by running an appliance (a special "
"type of small virtual machine) using L<qemu(1)>.  Qemu runs as a child "
"process of the main program."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1773
#, no-wrap
msgid ""
"  ___________________\n"
" /                   \\\n"
" | main program      |\n"
" |                   |\n"
" |                   |           child process / appliance\n"
" |                   |           __________________________\n"
" |                   |          / qemu                     \\\n"
" +-------------------+   RPC    |      +-----------------+ |\n"
" | libguestfs     <--------------------> guestfsd        | |\n"
" |                   |          |      +-----------------+ |\n"
" \\___________________/          |      | Linux kernel    | |\n"
"                                |      +--^--------------+ |\n"
"                                \\_________|________________/\n"
"                                          |\n"
"                                   _______v______\n"
"                                  /              \\\n"
"                                  | Device or    |\n"
"                                  | disk image   |\n"
"                                  \\______________/\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1793
msgid ""
"The library, linked to the main program, creates the child process and hence "
"the appliance in the L</guestfs_launch> function."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1796
msgid ""
"Inside the appliance is a Linux kernel and a complete stack of userspace "
"tools (such as LVM and ext2 programs) and a small controlling daemon called "
"L</guestfsd>.  The library talks to L</guestfsd> using remote procedure "
"calls (RPC).  There is a mostly one-to-one correspondence between libguestfs "
"API calls and RPC calls to the daemon.  Lastly the disk image(s) are "
"attached to the qemu process which translates device access by the "
"appliance's Linux kernel into accesses to the image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1805
msgid ""
"A common misunderstanding is that the appliance \"is\" the virtual machine.  "
"Although the disk image you are attached to might also be used by some "
"virtual machine, libguestfs doesn't know or care about this.  (But you will "
"care if both libguestfs's qemu process and your virtual machine are trying "
"to update the disk image at the same time, since these usually results in "
"massive disk corruption)."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1812
msgid "STATE MACHINE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1814
msgid "libguestfs uses a state machine to model the child process:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1816
#, no-wrap
msgid ""
"                         |\n"
"                    guestfs_create\n"
"                         |\n"
"                         |\n"
"                     ____V_____\n"
"                    /          \\\n"
"                    |  CONFIG  |\n"
"                    \\__________/\n"
"                     ^ ^   ^  \\\n"
"                    /  |    \\  \\ guestfs_launch\n"
"                   /   |    _\\__V______\n"
"                  /    |   /           \\\n"
"                 /     |   | LAUNCHING |\n"
"                /      |   \\___________/\n"
"               /       |       /\n"
"              /        |  guestfs_launch\n"
"             /         |     /\n"
"    ______  /        __|____V\n"
"   /      \\ ------> /        \\\n"
"   | BUSY |         | READY  |\n"
"   \\______/ <------ \\________/\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1838
msgid ""
"The normal transitions are (1) CONFIG (when the handle is created, but there "
"is no child process), (2) LAUNCHING (when the child process is booting up), "
"(3) alternating between READY and BUSY as commands are issued to, and "
"carried out by, the child process."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1843
msgid ""
"The guest may be killed by L</guestfs_kill_subprocess>, or may die "
"asynchronously at any time (eg. due to some internal error), and that causes "
"the state to transition back to CONFIG."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1847
msgid ""
"Configuration commands for qemu such as L</guestfs_add_drive> can only be "
"issued when in the CONFIG state."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1850
msgid ""
"The API offers one call that goes from CONFIG through LAUNCHING to READY.  "
"L</guestfs_launch> blocks until the child process is READY to accept "
"commands (or until some failure or timeout).  L</guestfs_launch> internally "
"moves the state from CONFIG to LAUNCHING while it is running."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1856
msgid ""
"API actions such as L</guestfs_mount> can only be issued when in the READY "
"state.  These API calls block waiting for the command to be carried out "
"(ie. the state to transition to BUSY and then back to READY).  There are no "
"non-blocking versions, and no way to issue more than one command per handle "
"at the same time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1862
msgid ""
"Finally, the child process sends asynchronous messages back to the main "
"program, such as kernel log messages.  You can register a callback to "
"receive these messages."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1866
msgid "INTERNALS"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1868
msgid "COMMUNICATION PROTOCOL"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1870
msgid ""
"Don't rely on using this protocol directly.  This section documents how it "
"currently works, but it may change at any time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1873
msgid ""
"The protocol used to talk between the library and the daemon running inside "
"the qemu virtual machine is a simple RPC mechanism built on top of XDR (RFC "
"1014, RFC 1832, RFC 4506)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1877
msgid ""
"The detailed format of structures is in C<src/guestfs_protocol.x> (note: "
"this file is automatically generated)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1880
msgid ""
"There are two broad cases, ordinary functions that don't have any C<FileIn> "
"and C<FileOut> parameters, which are handled with very simple request/reply "
"messages.  Then there are functions that have any C<FileIn> or C<FileOut> "
"parameters, which use the same request and reply messages, but they may also "
"be followed by files sent using a chunked encoding."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1887
msgid "ORDINARY FUNCTIONS (NO FILEIN/FILEOUT PARAMS)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1889
msgid "For ordinary functions, the request message is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1891
#, no-wrap
msgid ""
" total length (header + arguments,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_args (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1896
msgid ""
"The total length field allows the daemon to allocate a fixed size buffer "
"into which it slurps the rest of the message.  As a result, the total length "
"is limited to C<GUESTFS_MESSAGE_MAX> bytes (currently 4MB), which means the "
"effective size of any request is limited to somewhere under this size."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1902
msgid ""
"Note also that many functions don't take any arguments, in which case the "
"C<guestfs_I<foo>_args> is completely omitted."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1905
msgid ""
"The header contains the procedure number (C<guestfs_proc>) which is how the "
"receiver knows what type of args structure to expect, or none at all."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1909
msgid ""
"For functions that take optional arguments, the optional arguments are "
"encoded in the C<guestfs_I<foo>_args> structure in the same way as ordinary "
"arguments.  A bitmask in the header indicates which optional arguments are "
"meaningful.  The bitmask is also checked to see if it contains bits set "
"which the daemon does not know about (eg. if more optional arguments were "
"added in a later version of the library), and this causes the call to be "
"rejected."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1917
msgid "The reply message for ordinary functions is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1919
#, no-wrap
msgid ""
" total length (header + ret,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_ret (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1924
msgid ""
"As above the C<guestfs_I<foo>_ret> structure may be completely omitted for "
"functions that return no formal return values."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1927
msgid "As above the total length of the reply is limited to C<GUESTFS_MESSAGE_MAX>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1930
msgid ""
"In the case of an error, a flag is set in the header, and the reply message "
"is slightly changed:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1933
#, no-wrap
msgid ""
" total length (header + error,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_message_error (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1938
msgid ""
"The C<guestfs_message_error> structure contains the error message as a "
"string."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1941
msgid "FUNCTIONS THAT HAVE FILEIN PARAMETERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1943
msgid ""
"A C<FileIn> parameter indicates that we transfer a file I<into> the guest.  "
"The normal request message is sent (see above).  However this is followed by "
"a sequence of file chunks."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1947
#, no-wrap
msgid ""
" total length (header + arguments,\n"
"      but not including the length word itself,\n"
"      and not including the chunks)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_args (encoded as XDR)\n"
" sequence of chunks for FileIn param #0\n"
" sequence of chunks for FileIn param #1 etc.\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1955
msgid "The \"sequence of chunks\" is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1957
#, no-wrap
msgid ""
" length of chunk (not including length word itself)\n"
" struct guestfs_chunk (encoded as XDR)\n"
" length of chunk\n"
" struct guestfs_chunk (encoded as XDR)\n"
"   ...\n"
" length of chunk\n"
" struct guestfs_chunk (with data.data_len == 0)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1965
msgid ""
"The final chunk has the C<data_len> field set to zero.  Additionally a flag "
"is set in the final chunk to indicate either successful completion or early "
"cancellation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1969
msgid ""
"At time of writing there are no functions that have more than one FileIn "
"parameter.  However this is (theoretically) supported, by sending the "
"sequence of chunks for each FileIn parameter one after another (from left to "
"right)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1974
msgid ""
"Both the library (sender) I<and> the daemon (receiver) may cancel the "
"transfer.  The library does this by sending a chunk with a special flag set "
"to indicate cancellation.  When the daemon sees this, it cancels the whole "
"RPC, does I<not> send any reply, and goes back to reading the next request."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1980
msgid ""
"The daemon may also cancel.  It does this by writing a special word "
"C<GUESTFS_CANCEL_FLAG> to the socket.  The library listens for this during "
"the transfer, and if it gets it, it will cancel the transfer (it sends a "
"cancel chunk).  The special word is chosen so that even if cancellation "
"happens right at the end of the transfer (after the library has finished "
"writing and has started listening for the reply), the \"spurious\" cancel "
"flag will not be confused with the reply message."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1989
msgid ""
"This protocol allows the transfer of arbitrary sized files (no 32 bit "
"limit), and also files where the size is not known in advance (eg. from "
"pipes or sockets).  However the chunks are rather small "
"(C<GUESTFS_MAX_CHUNK_SIZE>), so that neither the library nor the daemon need "
"to keep much in memory."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1995
msgid "FUNCTIONS THAT HAVE FILEOUT PARAMETERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1997
msgid ""
"The protocol for FileOut parameters is exactly the same as for FileIn "
"parameters, but with the roles of daemon and library reversed."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:2000
#, no-wrap
msgid ""
" total length (header + ret,\n"
"      but not including the length word itself,\n"
"      and not including the chunks)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_ret (encoded as XDR)\n"
" sequence of chunks for FileOut param #0\n"
" sequence of chunks for FileOut param #1 etc.\n"
"\n"
msgstr ""

# type: =head3
#: ../src/guestfs.pod:2008
msgid "INITIAL MESSAGE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2010
msgid ""
"When the daemon launches it sends an initial word (C<GUESTFS_LAUNCH_FLAG>) "
"which indicates that the guest and daemon is alive.  This is what "
"L</guestfs_launch> waits for."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:2014
msgid "PROGRESS NOTIFICATION MESSAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2016
msgid ""
"The daemon may send progress notification messages at any time.  These are "
"distinguished by the normal length word being replaced by "
"C<GUESTFS_PROGRESS_FLAG>, followed by a fixed size progress message."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2020
msgid ""
"The library turns them into progress callbacks (see "
"C<guestfs_set_progress_callback>) if there is a callback registered, or "
"discards them if not."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2024
msgid ""
"The daemon self-limits the frequency of progress messages it sends (see "
"C<daemon/proto.c:notify_progress>).  Not all calls generate progress "
"messages."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2028
msgid "LIBGUESTFS VERSION NUMBERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2030
msgid ""
"Since April 2010, libguestfs has started to make separate development and "
"stable releases, along with corresponding branches in our git repository.  "
"These separate releases can be identified by version number:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:2035
#, no-wrap
msgid ""
"                 even numbers for stable: 1.2.x, 1.4.x, ...\n"
"       .-------- odd numbers for development: 1.3.x, 1.5.x, ...\n"
"       |\n"
"       v\n"
" 1  .  3  .  5\n"
" ^           ^\n"
" |           |\n"
" |           `-------- sub-version\n"
" |\n"
" `------ always '1' because we don't change the ABI\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2046
msgid "Thus \"1.3.5\" is the 5th update to the development branch \"1.3\"."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2048
msgid ""
"As time passes we cherry pick fixes from the development branch and backport "
"those into the stable branch, the effect being that the stable branch should "
"get more stable and less buggy over time.  So the stable releases are ideal "
"for people who don't need new features but would just like the software to "
"work."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2054
msgid "Our criteria for backporting changes are:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2060
msgid ""
"Documentation changes which don't affect any code are backported unless the "
"documentation refers to a future feature which is not in stable."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2066
msgid ""
"Bug fixes which are not controversial, fix obvious problems, and have been "
"well tested are backported."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2071
msgid ""
"Simple rearrangements of code which shouldn't affect how it works get "
"backported.  This is so that the code in the two branches doesn't get too "
"far out of step, allowing us to backport future fixes more easily."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2077
msgid ""
"We I<don't> backport new features, new APIs, new tools etc, except in one "
"exceptional case: the new feature is required in order to implement an "
"important bug fix."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2083
msgid ""
"A new stable branch starts when we think the new features in development are "
"substantial and compelling enough over the current stable branch to warrant "
"it.  When that happens we create new stable and development versions 1.N.0 "
"and 1.(N+1).0 [N is even].  The new dot-oh release won't necessarily be so "
"stable at this point, but by backporting fixes from development, that branch "
"will stabilize over time."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2091 ../fish/guestfish.pod:965 ../test-tool/libguestfs-test-tool.pod:104
msgid "ENVIRONMENT VARIABLES"
msgstr ""

# type: =item
#: ../src/guestfs.pod:2095 ../fish/guestfish.pod:991
msgid "LIBGUESTFS_APPEND"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2097 ../fish/guestfish.pod:993
msgid "Pass additional options to the guest kernel."
msgstr ""

# type: =item
#: ../src/guestfs.pod:2099 ../fish/guestfish.pod:995
msgid "LIBGUESTFS_DEBUG"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2101
msgid ""
"Set C<LIBGUESTFS_DEBUG=1> to enable verbose messages.  This has the same "
"effect as calling C<guestfs_set_verbose (g, 1)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:2104 ../fish/guestfish.pod:1000
msgid "LIBGUESTFS_MEMSIZE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2106 ../fish/guestfish.pod:1002
msgid "Set the memory allocated to the qemu process, in megabytes.  For example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:2109 ../fish/guestfish.pod:1005
#, no-wrap
msgid ""
" LIBGUESTFS_MEMSIZE=700\n"
"\n"
msgstr ""

# type: =item
#: ../src/guestfs.pod:2111 ../fish/guestfish.pod:1007
msgid "LIBGUESTFS_PATH"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2113
msgid ""
"Set the path that libguestfs uses to search for kernel and initrd.img.  See "
"the discussion of paths in section PATH above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:2116 ../fish/guestfish.pod:1012
msgid "LIBGUESTFS_QEMU"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2118 ../fish/guestfish.pod:1014
msgid ""
"Set the default qemu binary that libguestfs uses.  If not set, then the qemu "
"which was found at compile time by the configure script is used."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2122
msgid "See also L</QEMU WRAPPERS> above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:2124 ../fish/guestfish.pod:1018
msgid "LIBGUESTFS_TRACE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2126
msgid ""
"Set C<LIBGUESTFS_TRACE=1> to enable command traces.  This has the same "
"effect as calling C<guestfs_set_trace (g, 1)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:2129 ../fish/guestfish.pod:1027
msgid "TMPDIR"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2131 ../fish/guestfish.pod:1029
msgid "Location of temporary directory, defaults to C</tmp>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2133 ../fish/guestfish.pod:1031
msgid ""
"If libguestfs was compiled to use the supermin appliance then the real "
"appliance is cached in this directory, shared between all handles belonging "
"to the same EUID.  You can use C<$TMPDIR> to configure another directory to "
"use in case C</tmp> is not large enough."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2141 ../fish/guestfish.pod:1089 ../test-tool/libguestfs-test-tool.pod:109 ../fuse/guestmount.pod:233
msgid "SEE ALSO"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2143
msgid ""
"L<guestfs-examples(3)>, L<guestfs-ocaml(3)>, L<guestfs-python(3)>, "
"L<guestfs-ruby(3)>, L<guestfish(1)>, L<guestmount(1)>, L<virt-cat(1)>, "
"L<virt-df(1)>, L<virt-edit(1)>, L<virt-filesystems(1)>, "
"L<virt-inspector(1)>, L<virt-list-filesystems(1)>, "
"L<virt-list-partitions(1)>, L<virt-ls(1)>, L<virt-make-fs(1)>, "
"L<virt-rescue(1)>, L<virt-tar(1)>, L<virt-win-reg(1)>, L<qemu(1)>, "
"L<febootstrap(1)>, L<hivex(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2166
msgid ""
"Tools with a similar purpose: L<fdisk(8)>, L<parted(8)>, L<kpartx(8)>, "
"L<lvm(8)>, L<disktype(1)>."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2173
msgid "BUGS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2175
msgid "To get a list of bugs against libguestfs use this link:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2177
msgid "L<https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2179
msgid "To report a new bug against libguestfs use this link:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2181
msgid "L<https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2183
msgid "When reporting a bug, please check:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2189
msgid "That the bug hasn't been reported already."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2193
msgid "That you are testing a recent version."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2197
msgid "Describe the bug accurately, and give a way to reproduce it."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2201
msgid ""
"Run libguestfs-test-tool and paste the B<complete, unedited> output into the "
"bug report."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2206 ../fish/guestfish.pod:1108 ../test-tool/libguestfs-test-tool.pod:115 ../fuse/guestmount.pod:244
msgid "AUTHORS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2208 ../fish/guestfish.pod:1110 ../test-tool/libguestfs-test-tool.pod:117 ../fuse/guestmount.pod:246
msgid "Richard W.M. Jones (C<rjones at redhat dot com>)"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:2210 ../fish/guestfish.pod:1112 ../test-tool/libguestfs-test-tool.pod:119 ../fuse/guestmount.pod:248
msgid "COPYRIGHT"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2212 ../fish/guestfish.pod:1114 ../fuse/guestmount.pod:250
msgid "Copyright (C) 2009-2010 Red Hat Inc.  L<http://libguestfs.org/>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2215
msgid ""
"This library is free software; you can redistribute it and/or modify it "
"under the terms of the GNU Lesser General Public License as published by the "
"Free Software Foundation; either version 2 of the License, or (at your "
"option) any later version."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2220
msgid ""
"This library is distributed in the hope that it will be useful, but WITHOUT "
"ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or "
"FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License "
"for more details."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:2225
msgid ""
"You should have received a copy of the GNU Lesser General Public License "
"along with this library; if not, write to the Free Software Foundation, "
"Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1
msgid "guestfs_add_cdrom"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3
#, no-wrap
msgid ""
" int\n"
" guestfs_add_cdrom (guestfs_h *g,\n"
"                    const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7 ../fish/guestfish-actions.pod:5
msgid "This function adds a virtual CD-ROM disk image to the guest."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:9 ../fish/guestfish-actions.pod:7
msgid "This is equivalent to the qemu parameter C<-cdrom filename>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:17
msgid ""
"This call checks for the existence of C<filename>.  This stops you from "
"specifying other types of drive which are supported by qemu such as C<nbd:> "
"and C<http:> URLs.  To specify those, use the general C<guestfs_config> call "
"instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:24
msgid ""
"If you just want to add an ISO file (often you use this as an efficient way "
"to transfer large files into the guest), then you should probably use "
"C<guestfs_add_drive_ro> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:30 ../src/guestfs-actions.pod:128 ../src/guestfs-actions.pod:189 ../src/guestfs-actions.pod:226 ../src/guestfs-actions.pod:240 ../src/guestfs-actions.pod:261 ../src/guestfs-actions.pod:281 ../src/guestfs-actions.pod:295 ../src/guestfs-actions.pod:410 ../src/guestfs-actions.pod:430 ../src/guestfs-actions.pod:444 ../src/guestfs-actions.pod:489 ../src/guestfs-actions.pod:517 ../src/guestfs-actions.pod:535 ../src/guestfs-actions.pod:602 ../src/guestfs-actions.pod:635 ../src/guestfs-actions.pod:649 ../src/guestfs-actions.pod:664 ../src/guestfs-actions.pod:763 ../src/guestfs-actions.pod:781 ../src/guestfs-actions.pod:795 ../src/guestfs-actions.pod:809 ../src/guestfs-actions.pod:970 ../src/guestfs-actions.pod:990 ../src/guestfs-actions.pod:1008 ../src/guestfs-actions.pod:1092 ../src/guestfs-actions.pod:1110 ../src/guestfs-actions.pod:1129 ../src/guestfs-actions.pod:1143 ../src/guestfs-actions.pod:1163 ../src/guestfs-actions.pod:1233 ../src/guestfs-actions.pod:1264 ../src/guestfs-actions.pod:1289 ../src/guestfs-actions.pod:1326 ../src/guestfs-actions.pod:1432 ../src/guestfs-actions.pod:1466 ../src/guestfs-actions.pod:1684 ../src/guestfs-actions.pod:1706 ../src/guestfs-actions.pod:1793 ../src/guestfs-actions.pod:2243 ../src/guestfs-actions.pod:2387 ../src/guestfs-actions.pod:2448 ../src/guestfs-actions.pod:2483 ../src/guestfs-actions.pod:3222 ../src/guestfs-actions.pod:3237 ../src/guestfs-actions.pod:3257 ../src/guestfs-actions.pod:3410 ../src/guestfs-actions.pod:3424 ../src/guestfs-actions.pod:3437 ../src/guestfs-actions.pod:3451 ../src/guestfs-actions.pod:3466 ../src/guestfs-actions.pod:3502 ../src/guestfs-actions.pod:3574 ../src/guestfs-actions.pod:3594 ../src/guestfs-actions.pod:3611 ../src/guestfs-actions.pod:3634 ../src/guestfs-actions.pod:3657 ../src/guestfs-actions.pod:3689 ../src/guestfs-actions.pod:3708 ../src/guestfs-actions.pod:3727 ../src/guestfs-actions.pod:3762 ../src/guestfs-actions.pod:3774 ../src/guestfs-actions.pod:3810 ../src/guestfs-actions.pod:3826 ../src/guestfs-actions.pod:3839 ../src/guestfs-actions.pod:3854 ../src/guestfs-actions.pod:3871 ../src/guestfs-actions.pod:3964 ../src/guestfs-actions.pod:3984 ../src/guestfs-actions.pod:3997 ../src/guestfs-actions.pod:4048 ../src/guestfs-actions.pod:4066 ../src/guestfs-actions.pod:4084 ../src/guestfs-actions.pod:4100 ../src/guestfs-actions.pod:4114 ../src/guestfs-actions.pod:4128 ../src/guestfs-actions.pod:4145 ../src/guestfs-actions.pod:4160 ../src/guestfs-actions.pod:4180 ../src/guestfs-actions.pod:4224 ../src/guestfs-actions.pod:4295 ../src/guestfs-actions.pod:4326 ../src/guestfs-actions.pod:4345 ../src/guestfs-actions.pod:4364 ../src/guestfs-actions.pod:4376 ../src/guestfs-actions.pod:4393 ../src/guestfs-actions.pod:4406 ../src/guestfs-actions.pod:4421 ../src/guestfs-actions.pod:4436 ../src/guestfs-actions.pod:4471 ../src/guestfs-actions.pod:4486 ../src/guestfs-actions.pod:4506 ../src/guestfs-actions.pod:4520 ../src/guestfs-actions.pod:4537 ../src/guestfs-actions.pod:4586 ../src/guestfs-actions.pod:4623 ../src/guestfs-actions.pod:4637 ../src/guestfs-actions.pod:4665 ../src/guestfs-actions.pod:4682 ../src/guestfs-actions.pod:4700 ../src/guestfs-actions.pod:4834 ../src/guestfs-actions.pod:4891 ../src/guestfs-actions.pod:4913 ../src/guestfs-actions.pod:4931 ../src/guestfs-actions.pod:4963 ../src/guestfs-actions.pod:5029 ../src/guestfs-actions.pod:5046 ../src/guestfs-actions.pod:5059 ../src/guestfs-actions.pod:5073 ../src/guestfs-actions.pod:5362 ../src/guestfs-actions.pod:5381 ../src/guestfs-actions.pod:5395 ../src/guestfs-actions.pod:5407 ../src/guestfs-actions.pod:5421 ../src/guestfs-actions.pod:5433 ../src/guestfs-actions.pod:5447 ../src/guestfs-actions.pod:5463 ../src/guestfs-actions.pod:5484 ../src/guestfs-actions.pod:5503 ../src/guestfs-actions.pod:5522 ../src/guestfs-actions.pod:5540 ../src/guestfs-actions.pod:5563 ../src/guestfs-actions.pod:5581 ../src/guestfs-actions.pod:5600 ../src/guestfs-actions.pod:5621 ../src/guestfs-actions.pod:5640 ../src/guestfs-actions.pod:5657 ../src/guestfs-actions.pod:5685 ../src/guestfs-actions.pod:5709 ../src/guestfs-actions.pod:5728 ../src/guestfs-actions.pod:5752 ../src/guestfs-actions.pod:5767 ../src/guestfs-actions.pod:5782 ../src/guestfs-actions.pod:5801 ../src/guestfs-actions.pod:5838 ../src/guestfs-actions.pod:5861 ../src/guestfs-actions.pod:5887 ../src/guestfs-actions.pod:5995 ../src/guestfs-actions.pod:6116 ../src/guestfs-actions.pod:6128 ../src/guestfs-actions.pod:6141 ../src/guestfs-actions.pod:6154 ../src/guestfs-actions.pod:6176 ../src/guestfs-actions.pod:6189 ../src/guestfs-actions.pod:6202 ../src/guestfs-actions.pod:6215 ../src/guestfs-actions.pod:6230 ../src/guestfs-actions.pod:6289 ../src/guestfs-actions.pod:6306 ../src/guestfs-actions.pod:6322 ../src/guestfs-actions.pod:6338 ../src/guestfs-actions.pod:6355 ../src/guestfs-actions.pod:6368 ../src/guestfs-actions.pod:6388 ../src/guestfs-actions.pod:6424 ../src/guestfs-actions.pod:6438 ../src/guestfs-actions.pod:6479 ../src/guestfs-actions.pod:6492 ../src/guestfs-actions.pod:6510 ../src/guestfs-actions.pod:6544 ../src/guestfs-actions.pod:6580 ../src/guestfs-actions.pod:6699 ../src/guestfs-actions.pod:6717 ../src/guestfs-actions.pod:6731 ../src/guestfs-actions.pod:6786 ../src/guestfs-actions.pod:6799 ../src/guestfs-actions.pod:6844 ../src/guestfs-actions.pod:6877 ../src/guestfs-actions.pod:6931 ../src/guestfs-actions.pod:6957 ../src/guestfs-actions.pod:7023 ../src/guestfs-actions.pod:7042 ../src/guestfs-actions.pod:7071
msgid "This function returns 0 on success or -1 on error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:32 ../src/guestfs-actions.pod:242 ../src/guestfs-actions.pod:263 ../fish/guestfish-actions.pod:28 ../fish/guestfish-actions.pod:153 ../fish/guestfish-actions.pod:167
msgid ""
"This function is deprecated.  In new code, use the C<add_drive_opts> call "
"instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:35 ../src/guestfs-actions.pod:245 ../src/guestfs-actions.pod:266 ../src/guestfs-actions.pod:1437 ../src/guestfs-actions.pod:1923 ../src/guestfs-actions.pod:1944 ../src/guestfs-actions.pod:4185 ../src/guestfs-actions.pod:6965 ../src/guestfs-actions.pod:7134 ../fish/guestfish-actions.pod:31 ../fish/guestfish-actions.pod:156 ../fish/guestfish-actions.pod:170 ../fish/guestfish-actions.pod:951 ../fish/guestfish-actions.pod:1308 ../fish/guestfish-actions.pod:1322 ../fish/guestfish-actions.pod:2818 ../fish/guestfish-actions.pod:4620 ../fish/guestfish-actions.pod:4717
msgid ""
"Deprecated functions will not be removed from the API, but the fact that "
"they are deprecated indicates that there are problems with correct use of "
"these functions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:39 ../src/guestfs-actions.pod:130 ../src/guestfs-actions.pod:1094 ../src/guestfs-actions.pod:1895 ../src/guestfs-actions.pod:1993 ../src/guestfs-actions.pod:2096 ../src/guestfs-actions.pod:3224 ../src/guestfs-actions.pod:3239 ../src/guestfs-actions.pod:4473 ../src/guestfs-actions.pod:5542 ../src/guestfs-actions.pod:5659 ../src/guestfs-actions.pod:5769 ../src/guestfs-actions.pod:6232 ../src/guestfs-actions.pod:6357 ../src/guestfs-actions.pod:6879
msgid "(Added in 0.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:41
msgid "guestfs_add_domain"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:43
#, no-wrap
msgid ""
" int\n"
" guestfs_add_domain (guestfs_h *g,\n"
"                     const char *dom,\n"
"                     ...);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:48 ../src/guestfs-actions.pod:139 ../src/guestfs-actions.pod:4199
msgid ""
"You may supply a list of optional arguments to this call.  Use zero or more "
"of the following pairs of parameters, and terminate the list with C<-1> on "
"its own.  See L</CALLS WITH OPTIONAL ARGUMENTS>."
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:53
#, no-wrap
msgid ""
" GUESTFS_ADD_DOMAIN_LIBVIRTURI, const char *libvirturi,\n"
" GUESTFS_ADD_DOMAIN_READONLY, int readonly,\n"
" GUESTFS_ADD_DOMAIN_IFACE, const char *iface,\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:57
msgid ""
"This function adds the disk(s) attached to the named libvirt domain C<dom>.  "
"It works by connecting to libvirt, requesting the domain and domain XML from "
"libvirt, parsing it for disks, and calling C<guestfs_add_drive_opts> on each "
"one."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:62 ../fish/guestfish-actions.pod:46
msgid ""
"The number of disks added is returned.  This operation is atomic: if an "
"error is returned, then no disks are added."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:65 ../fish/guestfish-actions.pod:49
msgid ""
"This function does some minimal checks to make sure the libvirt domain is "
"not running (unless C<readonly> is true).  In a future version we will try "
"to acquire the libvirt lock on each disk."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:69 ../fish/guestfish-actions.pod:53
msgid ""
"Disks must be accessible locally.  This often means that adding disks from a "
"remote libvirt connection (see L<http://libvirt.org/remote.html>)  will fail "
"unless those disks are accessible via the same device path locally too."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:74
msgid ""
"The optional C<libvirturi> parameter sets the libvirt URI (see "
"L<http://libvirt.org/uri.html>).  If this is not set then we connect to the "
"default libvirt URI (or one set through an environment variable, see the "
"libvirt documentation for full details).  If you are using the C API "
"directly then it is more flexible to create the libvirt connection object "
"yourself, get the domain object, and call C<guestfs_add_libvirt_dom>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:82
msgid ""
"The other optional parameters are passed directly through to "
"C<guestfs_add_drive_opts>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:85 ../src/guestfs-actions.pod:338 ../src/guestfs-actions.pod:503 ../src/guestfs-actions.pod:681 ../src/guestfs-actions.pod:712 ../src/guestfs-actions.pod:730 ../src/guestfs-actions.pod:749 ../src/guestfs-actions.pod:1309 ../src/guestfs-actions.pod:1663 ../src/guestfs-actions.pod:1866 ../src/guestfs-actions.pod:1965 ../src/guestfs-actions.pod:2005 ../src/guestfs-actions.pod:2060 ../src/guestfs-actions.pod:2083 ../src/guestfs-actions.pod:2374 ../src/guestfs-actions.pod:2662 ../src/guestfs-actions.pod:2683 ../src/guestfs-actions.pod:4609 ../src/guestfs-actions.pod:4737 ../src/guestfs-actions.pod:5143 ../src/guestfs-actions.pod:5169 ../src/guestfs-actions.pod:6465 ../src/guestfs-actions.pod:6890 ../src/guestfs-actions.pod:6903 ../src/guestfs-actions.pod:6916
msgid "On error this function returns -1."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:87
msgid "(Added in 1.7.4)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:89
msgid "guestfs_add_domain_va"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:91
#, no-wrap
msgid ""
" int\n"
" guestfs_add_domain_va (guestfs_h *g,\n"
"                        const char *dom,\n"
"                        va_list args);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:96
msgid "This is the \"va_list variant\" of L</guestfs_add_domain>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:98 ../src/guestfs-actions.pod:109 ../src/guestfs-actions.pod:202 ../src/guestfs-actions.pod:213 ../src/guestfs-actions.pod:4236 ../src/guestfs-actions.pod:4248
msgid "See L</CALLS WITH OPTIONAL ARGUMENTS>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:100
msgid "guestfs_add_domain_argv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:102
#, no-wrap
msgid ""
" int\n"
" guestfs_add_domain_argv (guestfs_h *g,\n"
"                          const char *dom,\n"
"                          const struct guestfs_add_domain_argv *optargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:107
msgid "This is the \"argv variant\" of L</guestfs_add_domain>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:111
msgid "guestfs_add_drive"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:113
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive (guestfs_h *g,\n"
"                    const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:117
msgid ""
"This function is the equivalent of calling C<guestfs_add_drive_opts> with no "
"optional parameters, so the disk is added writable, with the format being "
"detected automatically."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:121
msgid ""
"Automatic detection of the format opens you up to a potential security hole "
"when dealing with untrusted raw-format images.  See CVE-2010-3851 and "
"RHBZ#642934.  Specifying the format closes this security hole.  Therefore "
"you should think about replacing calls to this function with calls to "
"C<guestfs_add_drive_opts>, and specifying the format."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:132
msgid "guestfs_add_drive_opts"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:134
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_opts (guestfs_h *g,\n"
"                         const char *filename,\n"
"                         ...);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:144
#, no-wrap
msgid ""
" GUESTFS_ADD_DRIVE_OPTS_READONLY, int readonly,\n"
" GUESTFS_ADD_DRIVE_OPTS_FORMAT, const char *format,\n"
" GUESTFS_ADD_DRIVE_OPTS_IFACE, const char *iface,\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:148 ../fish/guestfish-actions.pod:92
msgid ""
"This function adds a virtual machine disk image C<filename> to libguestfs.  "
"The first time you call this function, the disk appears as C</dev/sda>, the "
"second time as C</dev/sdb>, and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:153 ../fish/guestfish-actions.pod:97
msgid ""
"You don't necessarily need to be root when using libguestfs.  However you "
"obviously do need sufficient permissions to access the filename for whatever "
"operations you want to perform (ie. read access if you just want to read the "
"image or write access if you want to modify the image)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:159 ../fish/guestfish-actions.pod:103
msgid "This call checks that C<filename> exists."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:161 ../src/guestfs-actions.pod:4209 ../fish/guestfish-actions.pod:105 ../fish/guestfish-actions.pod:2829
msgid "The optional arguments are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:165 ../fish/guestfish-actions.pod:109
msgid "C<readonly>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:167 ../fish/guestfish-actions.pod:111
msgid ""
"If true then the image is treated as read-only.  Writes are still allowed, "
"but they are stored in a temporary snapshot overlay which is discarded at "
"the end.  The disk that you add is not modified."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:171 ../fish/guestfish-actions.pod:115
msgid "C<format>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:173
msgid ""
"This forces the image format.  If you omit this (or use C<guestfs_add_drive> "
"or C<guestfs_add_drive_ro>) then the format is automatically detected.  "
"Possible formats include C<raw> and C<qcow2>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:177 ../fish/guestfish-actions.pod:121
msgid ""
"Automatic detection of the format opens you up to a potential security hole "
"when dealing with untrusted raw-format images.  See CVE-2010-3851 and "
"RHBZ#642934.  Specifying the format closes this security hole."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:182 ../fish/guestfish-actions.pod:126
msgid "C<iface>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:184
msgid ""
"This rarely-used option lets you emulate the behaviour of the deprecated "
"C<guestfs_add_drive_with_if> call (q.v.)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:191
msgid "(Added in 1.5.23)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:193
msgid "guestfs_add_drive_opts_va"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:195
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_opts_va (guestfs_h *g,\n"
"                            const char *filename,\n"
"                            va_list args);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:200
msgid "This is the \"va_list variant\" of L</guestfs_add_drive_opts>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:204
msgid "guestfs_add_drive_opts_argv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:206
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_opts_argv (guestfs_h *g,\n"
"                              const char *filename,\n"
"                              const struct guestfs_add_drive_opts_argv "
"*optargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:211
msgid "This is the \"argv variant\" of L</guestfs_add_drive_opts>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:215
msgid "guestfs_add_drive_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:217
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_ro (guestfs_h *g,\n"
"                       const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:221
msgid ""
"This function is the equivalent of calling C<guestfs_add_drive_opts> with "
"the optional parameter C<GUESTFS_ADD_DRIVE_OPTS_READONLY> set to 1, so the "
"disk is added read-only, with the format being detected automatically."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:228
msgid "(Added in 1.0.38)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:230
msgid "guestfs_add_drive_ro_with_if"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:232
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_ro_with_if (guestfs_h *g,\n"
"                               const char *filename,\n"
"                               const char *iface);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:237
msgid ""
"This is the same as C<guestfs_add_drive_ro> but it allows you to specify the "
"QEMU interface emulation to use at run time."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:249 ../src/guestfs-actions.pod:270 ../src/guestfs-actions.pod:2333
msgid "(Added in 1.0.84)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:251
msgid "guestfs_add_drive_with_if"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:253
#, no-wrap
msgid ""
" int\n"
" guestfs_add_drive_with_if (guestfs_h *g,\n"
"                            const char *filename,\n"
"                            const char *iface);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:258
msgid ""
"This is the same as C<guestfs_add_drive> but it allows you to specify the "
"QEMU interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:272
msgid "guestfs_aug_clear"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:274
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_clear (guestfs_h *g,\n"
"                    const char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:278 ../fish/guestfish-actions.pod:178
msgid ""
"Set the value associated with C<path> to C<NULL>.  This is the same as the "
"L<augtool(1)> C<clear> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:283 ../src/guestfs-actions.pod:2085
msgid "(Added in 1.3.4)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:285
msgid "guestfs_aug_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:287
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:290
msgid ""
"Close the current Augeas handle and free up any resources used by it.  After "
"calling this, you have to call C<guestfs_aug_init> again before you can use "
"any other Augeas functions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:297 ../src/guestfs-actions.pod:322 ../src/guestfs-actions.pod:340 ../src/guestfs-actions.pod:354 ../src/guestfs-actions.pod:412 ../src/guestfs-actions.pod:432 ../src/guestfs-actions.pod:446 ../src/guestfs-actions.pod:477 ../src/guestfs-actions.pod:491 ../src/guestfs-actions.pod:505 ../src/guestfs-actions.pod:519 ../src/guestfs-actions.pod:537 ../src/guestfs-actions.pod:5220
msgid "(Added in 0.7)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:299
msgid "guestfs_aug_defnode"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:301
#, no-wrap
msgid ""
" struct guestfs_int_bool *\n"
" guestfs_aug_defnode (guestfs_h *g,\n"
"                      const char *name,\n"
"                      const char *expr,\n"
"                      const char *val);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:307 ../fish/guestfish-actions.pod:194
msgid "Defines a variable C<name> whose value is the result of evaluating C<expr>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:310
msgid ""
"If C<expr> evaluates to an empty nodeset, a node is created, equivalent to "
"calling C<guestfs_aug_set> C<expr>, C<value>.  C<name> will be the nodeset "
"containing that single node."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:314 ../fish/guestfish-actions.pod:201
msgid ""
"On success this returns a pair containing the number of nodes in the "
"nodeset, and a boolean flag if a node was created."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:318
msgid ""
"This function returns a C<struct guestfs_int_bool *>, or NULL if there was "
"an error.  I<The caller must call C<guestfs_free_int_bool> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:324
msgid "guestfs_aug_defvar"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:326
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_defvar (guestfs_h *g,\n"
"                     const char *name,\n"
"                     const char *expr);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:331 ../fish/guestfish-actions.pod:209
msgid ""
"Defines an Augeas variable C<name> whose value is the result of evaluating "
"C<expr>.  If C<expr> is NULL, then C<name> is undefined."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:335 ../fish/guestfish-actions.pod:213
msgid ""
"On success this returns the number of nodes in C<expr>, or C<0> if C<expr> "
"evaluates to something which is not a nodeset."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:342
msgid "guestfs_aug_get"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:344
#, no-wrap
msgid ""
" char *\n"
" guestfs_aug_get (guestfs_h *g,\n"
"                  const char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:348 ../fish/guestfish-actions.pod:220
msgid ""
"Look up the value associated with C<path>.  If C<path> matches exactly one "
"node, the C<value> is returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:351 ../src/guestfs-actions.pod:851 ../src/guestfs-actions.pod:869 ../src/guestfs-actions.pod:929 ../src/guestfs-actions.pod:945 ../src/guestfs-actions.pod:1048 ../src/guestfs-actions.pod:1178 ../src/guestfs-actions.pod:1195 ../src/guestfs-actions.pod:1214 ../src/guestfs-actions.pod:1343 ../src/guestfs-actions.pod:1534 ../src/guestfs-actions.pod:1646 ../src/guestfs-actions.pod:1809 ../src/guestfs-actions.pod:1826 ../src/guestfs-actions.pod:1917 ../src/guestfs-actions.pod:1938 ../src/guestfs-actions.pod:2108 ../src/guestfs-actions.pod:2298 ../src/guestfs-actions.pod:2505 ../src/guestfs-actions.pod:2586 ../src/guestfs-actions.pod:2634 ../src/guestfs-actions.pod:2744 ../src/guestfs-actions.pod:2775 ../src/guestfs-actions.pod:2799 ../src/guestfs-actions.pod:2861 ../src/guestfs-actions.pod:2884 ../src/guestfs-actions.pod:3396 ../src/guestfs-actions.pod:3746 ../src/guestfs-actions.pod:3916 ../src/guestfs-actions.pod:4026 ../src/guestfs-actions.pod:4755 ../src/guestfs-actions.pod:4948 ../src/guestfs-actions.pod:5118 ../src/guestfs-actions.pod:5296 ../src/guestfs-actions.pod:5345 ../src/guestfs-actions.pod:5908 ../src/guestfs-actions.pod:5924 ../src/guestfs-actions.pod:5941 ../src/guestfs-actions.pod:5965 ../src/guestfs-actions.pod:6639 ../src/guestfs-actions.pod:6658 ../src/guestfs-actions.pod:6676 ../src/guestfs-actions.pod:6856 ../src/guestfs-actions.pod:7128
msgid ""
"This function returns a string, or NULL on error.  I<The caller must free "
"the returned string after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:356
msgid "guestfs_aug_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:358
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_init (guestfs_h *g,\n"
"                   const char *root,\n"
"                   int flags);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:363 ../fish/guestfish-actions.pod:227
msgid ""
"Create a new Augeas handle for editing configuration files.  If there was "
"any previous Augeas handle associated with this guestfs session, then it is "
"closed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:367
msgid "You must call this before using any other C<guestfs_aug_*> commands."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:370 ../fish/guestfish-actions.pod:234
msgid "C<root> is the filesystem root.  C<root> must not be NULL, use C</> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:373 ../fish/guestfish-actions.pod:237
msgid ""
"The flags are the same as the flags defined in E<lt>augeas.hE<gt>, the "
"logical I<or> of the following integers:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:379 ../fish/guestfish-actions.pod:243
msgid "C<AUG_SAVE_BACKUP> = 1"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:381 ../fish/guestfish-actions.pod:245
msgid "Keep the original file with a C<.augsave> extension."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:383 ../fish/guestfish-actions.pod:247
msgid "C<AUG_SAVE_NEWFILE> = 2"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:385 ../fish/guestfish-actions.pod:249
msgid ""
"Save changes into a file with extension C<.augnew>, and do not overwrite "
"original.  Overrides C<AUG_SAVE_BACKUP>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:388 ../fish/guestfish-actions.pod:252
msgid "C<AUG_TYPE_CHECK> = 4"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:390 ../fish/guestfish-actions.pod:254
msgid "Typecheck lenses (can be expensive)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:392 ../fish/guestfish-actions.pod:256
msgid "C<AUG_NO_STDINC> = 8"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:394 ../fish/guestfish-actions.pod:258
msgid "Do not use standard load path for modules."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:396 ../fish/guestfish-actions.pod:260
msgid "C<AUG_SAVE_NOOP> = 16"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:398 ../fish/guestfish-actions.pod:262
msgid "Make save a no-op, just record what would have been changed."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:400 ../fish/guestfish-actions.pod:264
msgid "C<AUG_NO_LOAD> = 32"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:402
msgid "Do not load the tree in C<guestfs_aug_init>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:406
msgid "To close the handle, you can call C<guestfs_aug_close>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:408 ../fish/guestfish-actions.pod:272
msgid "To find out more about Augeas, see L<http://augeas.net/>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:414
msgid "guestfs_aug_insert"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:416
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_insert (guestfs_h *g,\n"
"                     const char *augpath,\n"
"                     const char *label,\n"
"                     int before);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:422 ../fish/guestfish-actions.pod:278
msgid ""
"Create a new sibling C<label> for C<path>, inserting it into the tree before "
"or after C<path> (depending on the boolean flag C<before>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:426 ../fish/guestfish-actions.pod:282
msgid ""
"C<path> must match exactly one existing node in the tree, and C<label> must "
"be a label, ie. not contain C</>, C<*> or end with a bracketed index C<[N]>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:434
msgid "guestfs_aug_load"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:436
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_load (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:439 ../fish/guestfish-actions.pod:290
msgid "Load files into the tree."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:441 ../fish/guestfish-actions.pod:292
msgid "See C<aug_load> in the Augeas documentation for the full gory details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:448
msgid "guestfs_aug_ls"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:450
#, no-wrap
msgid ""
" char **\n"
" guestfs_aug_ls (guestfs_h *g,\n"
"                 const char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:454
msgid ""
"This is just a shortcut for listing C<guestfs_aug_match> C<path/*> and "
"sorting the resulting nodes into alphabetical order."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:457 ../src/guestfs-actions.pod:473 ../src/guestfs-actions.pod:619 ../src/guestfs-actions.pod:1067 ../src/guestfs-actions.pod:1358 ../src/guestfs-actions.pod:1377 ../src/guestfs-actions.pod:1480 ../src/guestfs-actions.pod:1499 ../src/guestfs-actions.pod:1748 ../src/guestfs-actions.pod:2178 ../src/guestfs-actions.pod:2194 ../src/guestfs-actions.pod:2213 ../src/guestfs-actions.pod:2256 ../src/guestfs-actions.pod:2280 ../src/guestfs-actions.pod:2351 ../src/guestfs-actions.pod:2400 ../src/guestfs-actions.pod:2611 ../src/guestfs-actions.pod:2818 ../src/guestfs-actions.pod:3033 ../src/guestfs-actions.pod:3316 ../src/guestfs-actions.pod:3378 ../src/guestfs-actions.pod:3483 ../src/guestfs-actions.pod:3888 ../src/guestfs-actions.pod:4570 ../src/guestfs-actions.pod:5090 ../src/guestfs-actions.pod:5216 ../src/guestfs-actions.pod:5330 ../src/guestfs-actions.pod:5981 ../src/guestfs-actions.pod:6042 ../src/guestfs-actions.pod:6097 ../src/guestfs-actions.pod:6243 ../src/guestfs-actions.pod:6267 ../src/guestfs-actions.pod:6749 ../src/guestfs-actions.pod:6769 ../src/guestfs-actions.pod:6816 ../src/guestfs-actions.pod:6981 ../src/guestfs-actions.pod:7000 ../src/guestfs-actions.pod:7085 ../src/guestfs-actions.pod:7104 ../src/guestfs-actions.pod:7150 ../src/guestfs-actions.pod:7169
msgid ""
"This function returns a NULL-terminated array of strings (like "
"L<environ(3)>), or NULL if there was an error.  I<The caller must free the "
"strings and the array after use>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:461 ../src/guestfs-actions.pod:992 ../src/guestfs-actions.pod:1010 ../src/guestfs-actions.pod:1415 ../src/guestfs-actions.pod:3111 ../src/guestfs-actions.pod:3142 ../src/guestfs-actions.pod:3729 ../src/guestfs-actions.pod:3779 ../src/guestfs-actions.pod:3966 ../src/guestfs-actions.pod:3999 ../src/guestfs-actions.pod:4162 ../src/guestfs-actions.pod:4574 ../src/guestfs-actions.pod:5031 ../src/guestfs-actions.pod:5409 ../src/guestfs-actions.pod:5423 ../src/guestfs-actions.pod:5435 ../src/guestfs-actions.pod:5843 ../src/guestfs-actions.pod:6481 ../src/guestfs-actions.pod:6494 ../src/guestfs-actions.pod:6733 ../src/guestfs-actions.pod:6936 ../src/guestfs-actions.pod:6969
msgid "(Added in 0.8)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:463
msgid "guestfs_aug_match"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:465
#, no-wrap
msgid ""
" char **\n"
" guestfs_aug_match (guestfs_h *g,\n"
"                    const char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:469 ../fish/guestfish-actions.pod:306
msgid ""
"Returns a list of paths which match the path expression C<path>.  The "
"returned paths are sufficiently qualified so that they match exactly one "
"node in the current tree."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:479
msgid "guestfs_aug_mv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:481
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_mv (guestfs_h *g,\n"
"                 const char *src,\n"
"                 const char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:486 ../fish/guestfish-actions.pod:314
msgid ""
"Move the node C<src> to C<dest>.  C<src> must match exactly one node.  "
"C<dest> is overwritten if it exists."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:493
msgid "guestfs_aug_rm"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:495
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_rm (guestfs_h *g,\n"
"                 const char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:499 ../fish/guestfish-actions.pod:321
msgid "Remove C<path> and all of its children."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:501 ../fish/guestfish-actions.pod:323
msgid "On success this returns the number of entries which were removed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:507
msgid "guestfs_aug_save"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:509
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_save (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:512 ../fish/guestfish-actions.pod:329
msgid "This writes all pending changes to disk."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:514
msgid ""
"The flags which were passed to C<guestfs_aug_init> affect exactly how files "
"are saved."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:521
msgid "guestfs_aug_set"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:523
#, no-wrap
msgid ""
" int\n"
" guestfs_aug_set (guestfs_h *g,\n"
"                  const char *augpath,\n"
"                  const char *val);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:528 ../fish/guestfish-actions.pod:338
msgid "Set the value associated with C<path> to C<val>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:530
msgid ""
"In the Augeas API, it is possible to clear a node by setting the value to "
"NULL.  Due to an oversight in the libguestfs API you cannot do that with "
"this call.  Instead you must use the C<guestfs_aug_clear> call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:539
msgid "guestfs_available"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:541
#, no-wrap
msgid ""
" int\n"
" guestfs_available (guestfs_h *g,\n"
"                    char *const *groups);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:545 ../fish/guestfish-actions.pod:349
msgid ""
"This command is used to check the availability of some groups of "
"functionality in the appliance, which not all builds of the libguestfs "
"appliance will be able to provide."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:549
msgid ""
"The libguestfs groups, and the functions that those groups correspond to, "
"are listed in L<guestfs(3)/AVAILABILITY>.  You can also fetch this list at "
"runtime by calling C<guestfs_available_all_groups>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:554 ../fish/guestfish-actions.pod:358
msgid ""
"The argument C<groups> is a list of group names, eg: C<[\"inotify\", "
"\"augeas\"]> would check for the availability of the Linux inotify functions "
"and Augeas (configuration file editing) functions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:559 ../fish/guestfish-actions.pod:363
msgid "The command returns no error if I<all> requested groups are available."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:561 ../fish/guestfish-actions.pod:365
msgid ""
"It fails with an error if one or more of the requested groups is unavailable "
"in the appliance."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:564 ../fish/guestfish-actions.pod:368
msgid ""
"If an unknown group name is included in the list of groups then an error is "
"always returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:567 ../fish/guestfish-actions.pod:371
msgid "I<Notes:>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:573
msgid "You must call C<guestfs_launch> before calling this function."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:575 ../fish/guestfish-actions.pod:379
msgid ""
"The reason is because we don't know what groups are supported by the "
"appliance/daemon until it is running and can be queried."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:581 ../fish/guestfish-actions.pod:385
msgid ""
"If a group of functions is available, this does not necessarily mean that "
"they will work.  You still have to check for errors when calling individual "
"API functions even if they are available."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:588 ../fish/guestfish-actions.pod:392
msgid ""
"It is usually the job of distro packagers to build complete functionality "
"into the libguestfs appliance.  Upstream libguestfs, if built from source "
"with all requirements satisfied, will support everything."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:595
msgid ""
"This call was added in version C<1.0.80>.  In previous versions of "
"libguestfs all you could do would be to speculatively execute a command to "
"find out if the daemon implemented it.  See also C<guestfs_version>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:604 ../src/guestfs-actions.pod:1165
msgid "(Added in 1.0.80)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:606
msgid "guestfs_available_all_groups"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:608
#, no-wrap
msgid ""
" char **\n"
" guestfs_available_all_groups (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:611
msgid ""
"This command returns a list of all optional groups that this daemon knows "
"about.  Note this returns both supported and unsupported groups.  To find "
"out which ones the daemon can actually support you have to call "
"C<guestfs_available> on each member of the returned list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:617
msgid "See also C<guestfs_available> and L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:623
msgid "(Added in 1.3.15)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:625
msgid "guestfs_base64_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:627
#, no-wrap
msgid ""
" int\n"
" guestfs_base64_in (guestfs_h *g,\n"
"                    const char *base64file,\n"
"                    const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:632 ../fish/guestfish-actions.pod:422
msgid "This command uploads base64-encoded data from C<base64file> to C<filename>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:637 ../src/guestfs-actions.pod:651
msgid "(Added in 1.3.5)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:639
msgid "guestfs_base64_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:641
#, no-wrap
msgid ""
" int\n"
" guestfs_base64_out (guestfs_h *g,\n"
"                     const char *filename,\n"
"                     const char *base64file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:646 ../fish/guestfish-actions.pod:431
msgid ""
"This command downloads the contents of C<filename>, writing it out to local "
"file C<base64file> encoded as base64."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:653
msgid "guestfs_blockdev_flushbufs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:655
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_flushbufs (guestfs_h *g,\n"
"                             const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:659 ../fish/guestfish-actions.pod:440
msgid "This tells the kernel to flush internal buffers associated with C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:662 ../src/guestfs-actions.pod:679 ../src/guestfs-actions.pod:694 ../src/guestfs-actions.pod:710 ../src/guestfs-actions.pod:728 ../src/guestfs-actions.pod:747 ../src/guestfs-actions.pod:761 ../src/guestfs-actions.pod:779 ../src/guestfs-actions.pod:793 ../src/guestfs-actions.pod:807 ../fish/guestfish-actions.pod:443 ../fish/guestfish-actions.pod:454 ../fish/guestfish-actions.pod:463 ../fish/guestfish-actions.pod:473 ../fish/guestfish-actions.pod:485 ../fish/guestfish-actions.pod:498 ../fish/guestfish-actions.pod:506 ../fish/guestfish-actions.pod:517 ../fish/guestfish-actions.pod:525 ../fish/guestfish-actions.pod:533
msgid "This uses the L<blockdev(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:666 ../src/guestfs-actions.pod:683 ../src/guestfs-actions.pod:698 ../src/guestfs-actions.pod:714 ../src/guestfs-actions.pod:732 ../src/guestfs-actions.pod:751 ../src/guestfs-actions.pod:765 ../src/guestfs-actions.pod:783 ../src/guestfs-actions.pod:797 ../src/guestfs-actions.pod:811
msgid "(Added in 0.9.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:668
msgid "guestfs_blockdev_getbsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:670
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_getbsz (guestfs_h *g,\n"
"                          const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:674 ../fish/guestfish-actions.pod:449
msgid "This returns the block size of a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:676 ../src/guestfs-actions.pod:776 ../fish/guestfish-actions.pod:451 ../fish/guestfish-actions.pod:514
msgid ""
"(Note this is different from both I<size in blocks> and I<filesystem block "
"size>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:685
msgid "guestfs_blockdev_getro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:687
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_getro (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:691 ../fish/guestfish-actions.pod:460
msgid ""
"Returns a boolean indicating if the block device is read-only (true if "
"read-only, false if not)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:696 ../src/guestfs-actions.pod:1398 ../src/guestfs-actions.pod:1413 ../src/guestfs-actions.pod:1893 ../src/guestfs-actions.pod:1904 ../src/guestfs-actions.pod:1976 ../src/guestfs-actions.pod:2031 ../src/guestfs-actions.pod:2046 ../src/guestfs-actions.pod:2071 ../src/guestfs-actions.pod:2094 ../src/guestfs-actions.pod:3050 ../src/guestfs-actions.pod:3064 ../src/guestfs-actions.pod:3079 ../src/guestfs-actions.pod:3093 ../src/guestfs-actions.pod:3109 ../src/guestfs-actions.pod:3124 ../src/guestfs-actions.pod:3140 ../src/guestfs-actions.pod:3154 ../src/guestfs-actions.pod:3167 ../src/guestfs-actions.pod:3181 ../src/guestfs-actions.pod:3196 ../src/guestfs-actions.pod:3211 ../src/guestfs-actions.pod:4719
msgid "This function returns a C truth value on success or -1 on error."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:700
msgid "guestfs_blockdev_getsize64"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:702
#, no-wrap
msgid ""
" int64_t\n"
" guestfs_blockdev_getsize64 (guestfs_h *g,\n"
"                             const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:706 ../fish/guestfish-actions.pod:469
msgid "This returns the size of the device in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:708
msgid "See also C<guestfs_blockdev_getsz>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:716
msgid "guestfs_blockdev_getss"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:718
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_getss (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:722 ../fish/guestfish-actions.pod:479
msgid ""
"This returns the size of sectors on a block device.  Usually 512, but can be "
"larger for modern devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:725
msgid ""
"(Note, this is not the size in sectors, use C<guestfs_blockdev_getsz> for "
"that)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:734
msgid "guestfs_blockdev_getsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:736
#, no-wrap
msgid ""
" int64_t\n"
" guestfs_blockdev_getsz (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:740 ../fish/guestfish-actions.pod:491
msgid ""
"This returns the size of the device in units of 512-byte sectors (even if "
"the sectorsize isn't 512 bytes ... weird)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:743
msgid ""
"See also C<guestfs_blockdev_getss> for the real sector size of the device, "
"and C<guestfs_blockdev_getsize64> for the more useful I<size in bytes>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:753
msgid "guestfs_blockdev_rereadpt"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:755
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_rereadpt (guestfs_h *g,\n"
"                            const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:759 ../fish/guestfish-actions.pod:504
msgid "Reread the partition table on C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:767
msgid "guestfs_blockdev_setbsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:769
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_setbsz (guestfs_h *g,\n"
"                          const char *device,\n"
"                          int blocksize);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:774 ../fish/guestfish-actions.pod:512
msgid "This sets the block size of a device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:785
msgid "guestfs_blockdev_setro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:787
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_setro (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:791 ../fish/guestfish-actions.pod:523
msgid "Sets the block device named C<device> to read-only."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:799
msgid "guestfs_blockdev_setrw"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:801
#, no-wrap
msgid ""
" int\n"
" guestfs_blockdev_setrw (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:805 ../fish/guestfish-actions.pod:531
msgid "Sets the block device named C<device> to read-write."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:813
msgid "guestfs_case_sensitive_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:815
#, no-wrap
msgid ""
" char *\n"
" guestfs_case_sensitive_path (guestfs_h *g,\n"
"                              const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:819 ../fish/guestfish-actions.pod:539
msgid ""
"This can be used to resolve case insensitive paths on a filesystem which is "
"case sensitive.  The use case is to resolve paths which you have read from "
"Windows configuration files or the Windows Registry, to the true path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:824 ../fish/guestfish-actions.pod:544
msgid ""
"The command handles a peculiarity of the Linux ntfs-3g filesystem driver "
"(and probably others), which is that although the underlying filesystem is "
"case-insensitive, the driver exports the filesystem to Linux as "
"case-sensitive."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:829 ../fish/guestfish-actions.pod:549
msgid ""
"One consequence of this is that special directories such as C<c:\\windows> "
"may appear as C</WINDOWS> or C</windows> (or other things) depending on the "
"precise details of how they were created.  In Windows itself this would not "
"be a problem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:835 ../fish/guestfish-actions.pod:555
msgid ""
"Bug or feature? You decide: "
"L<http://www.tuxera.com/community/ntfs-3g-faq/#posixfilenames1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:838 ../fish/guestfish-actions.pod:558
msgid ""
"This function resolves the true case of each element in the path and returns "
"the case-sensitive path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:841
msgid ""
"Thus C<guestfs_case_sensitive_path> (\"/Windows/System32\")  might return "
"C<\"/WINDOWS/system32\"> (the exact return value would depend on details of "
"how the directories were originally created under Windows)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:846 ../fish/guestfish-actions.pod:566
msgid "I<Note>: This function does not handle drive names, backslashes etc."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:849
msgid "See also C<guestfs_realpath>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:854 ../src/guestfs-actions.pod:6661
msgid "(Added in 1.0.75)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:856
msgid "guestfs_cat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:858
#, no-wrap
msgid ""
" char *\n"
" guestfs_cat (guestfs_h *g,\n"
"              const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:862 ../src/guestfs-actions.pod:5206 ../fish/guestfish-actions.pod:575 ../fish/guestfish-actions.pod:3464
msgid "Return the contents of the file named C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:864
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of string).  For "
"those you need to use the C<guestfs_read_file> or C<guestfs_download> "
"functions which have a more complex interface."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:872 ../src/guestfs-actions.pod:1051 ../src/guestfs-actions.pod:1071 ../src/guestfs-actions.pod:1362 ../src/guestfs-actions.pod:1381 ../src/guestfs-actions.pod:1484 ../src/guestfs-actions.pod:1503 ../src/guestfs-actions.pod:1752 ../src/guestfs-actions.pod:2198 ../src/guestfs-actions.pod:2217 ../src/guestfs-actions.pod:2260 ../src/guestfs-actions.pod:2284 ../src/guestfs-actions.pod:2301 ../src/guestfs-actions.pod:2330 ../src/guestfs-actions.pod:4988 ../src/guestfs-actions.pod:5014 ../src/guestfs-actions.pod:5145 ../src/guestfs-actions.pod:5171 ../src/guestfs-actions.pod:5195 ../src/guestfs-actions.pod:6046 ../src/guestfs-actions.pod:6101 ../src/guestfs-actions.pod:6247 ../src/guestfs-actions.pod:6271 ../src/guestfs-actions.pod:6933 ../src/guestfs-actions.pod:6959 ../src/guestfs-actions.pod:6985 ../src/guestfs-actions.pod:7004 ../src/guestfs-actions.pod:7089 ../src/guestfs-actions.pod:7108 ../src/guestfs-actions.pod:7154 ../src/guestfs-actions.pod:7173 ../fish/guestfish-actions.pod:582 ../fish/guestfish-actions.pod:717 ../fish/guestfish-actions.pod:729 ../fish/guestfish-actions.pod:905 ../fish/guestfish-actions.pod:915 ../fish/guestfish-actions.pod:982 ../fish/guestfish-actions.pod:992 ../fish/guestfish-actions.pod:1187 ../fish/guestfish-actions.pod:1482 ../fish/guestfish-actions.pod:1492 ../fish/guestfish-actions.pod:1520 ../fish/guestfish-actions.pod:1535 ../fish/guestfish-actions.pod:1545 ../fish/guestfish-actions.pod:1564 ../fish/guestfish-actions.pod:3334 ../fish/guestfish-actions.pod:3349 ../fish/guestfish-actions.pod:3425 ../fish/guestfish-actions.pod:3442 ../fish/guestfish-actions.pod:3457 ../fish/guestfish-actions.pod:4040 ../fish/guestfish-actions.pod:4086 ../fish/guestfish-actions.pod:4171 ../fish/guestfish-actions.pod:4186 ../fish/guestfish-actions.pod:4596 ../fish/guestfish-actions.pod:4614 ../fish/guestfish-actions.pod:4631 ../fish/guestfish-actions.pod:4641 ../fish/guestfish-actions.pod:4689 ../fish/guestfish-actions.pod:4699 ../fish/guestfish-actions.pod:4728 ../fish/guestfish-actions.pod:4738
msgid ""
"Because of the message protocol, there is a transfer limit of somewhere "
"between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:875 ../src/guestfs-actions.pod:3320 ../src/guestfs-actions.pod:3382 ../src/guestfs-actions.pod:3399 ../src/guestfs-actions.pod:3487 ../src/guestfs-actions.pod:3892 ../src/guestfs-actions.pod:3906 ../src/guestfs-actions.pod:5094 ../src/guestfs-actions.pod:5108 ../src/guestfs-actions.pod:6820 ../src/guestfs-actions.pod:6834
msgid "(Added in 0.4)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:877
msgid "guestfs_checksum"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:879
#, no-wrap
msgid ""
" char *\n"
" guestfs_checksum (guestfs_h *g,\n"
"                   const char *csumtype,\n"
"                   const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:884 ../fish/guestfish-actions.pod:589
msgid "This call computes the MD5, SHAx or CRC checksum of the file named C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:887 ../fish/guestfish-actions.pod:592
msgid ""
"The type of checksum to compute is given by the C<csumtype> parameter which "
"must have one of the following values:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:892 ../fish/guestfish-actions.pod:597
msgid "C<crc>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:894 ../fish/guestfish-actions.pod:599
msgid ""
"Compute the cyclic redundancy check (CRC) specified by POSIX for the "
"C<cksum> command."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:897 ../fish/guestfish-actions.pod:602
msgid "C<md5>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:899 ../fish/guestfish-actions.pod:604
msgid "Compute the MD5 hash (using the C<md5sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:901 ../fish/guestfish-actions.pod:606
msgid "C<sha1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:903 ../fish/guestfish-actions.pod:608
msgid "Compute the SHA1 hash (using the C<sha1sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:905 ../fish/guestfish-actions.pod:610
msgid "C<sha224>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:907 ../fish/guestfish-actions.pod:612
msgid "Compute the SHA224 hash (using the C<sha224sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:909 ../fish/guestfish-actions.pod:614
msgid "C<sha256>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:911 ../fish/guestfish-actions.pod:616
msgid "Compute the SHA256 hash (using the C<sha256sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:913 ../fish/guestfish-actions.pod:618
msgid "C<sha384>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:915 ../fish/guestfish-actions.pod:620
msgid "Compute the SHA384 hash (using the C<sha384sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:917 ../fish/guestfish-actions.pod:622
msgid "C<sha512>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:919 ../fish/guestfish-actions.pod:624
msgid "Compute the SHA512 hash (using the C<sha512sum> program)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:923 ../fish/guestfish-actions.pod:628
msgid "The checksum is returned as a printable string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:925
msgid "To get the checksum for a device, use C<guestfs_checksum_device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:927
msgid "To get the checksums for many files, use C<guestfs_checksums_out>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:932 ../src/guestfs-actions.pod:1240 ../src/guestfs-actions.pod:2062 ../src/guestfs-actions.pod:3066 ../src/guestfs-actions.pod:3095 ../src/guestfs-actions.pod:3156 ../src/guestfs-actions.pod:3183 ../src/guestfs-actions.pod:6517
msgid "(Added in 1.0.2)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:934
msgid "guestfs_checksum_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:936
#, no-wrap
msgid ""
" char *\n"
" guestfs_checksum_device (guestfs_h *g,\n"
"                          const char *csumtype,\n"
"                          const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:941
msgid ""
"This call computes the MD5, SHAx or CRC checksum of the contents of the "
"device named C<device>.  For the types of checksums supported see the "
"C<guestfs_checksum> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:948 ../src/guestfs-actions.pod:4625 ../src/guestfs-actions.pod:4684 ../src/guestfs-actions.pod:4721 ../src/guestfs-actions.pod:4739 ../src/guestfs-actions.pod:4915 ../src/guestfs-actions.pod:6426 ../src/guestfs-actions.pod:6440 ../src/guestfs-actions.pod:6846
msgid "(Added in 1.3.2)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:950
msgid "guestfs_checksums_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:952
#, no-wrap
msgid ""
" int\n"
" guestfs_checksums_out (guestfs_h *g,\n"
"                        const char *csumtype,\n"
"                        const char *directory,\n"
"                        const char *sumsfile);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:958 ../fish/guestfish-actions.pod:646
msgid ""
"This command computes the checksums of all regular files in C<directory> and "
"then emits a list of those checksums to the local output file C<sumsfile>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:962 ../fish/guestfish-actions.pod:650
msgid ""
"This can be used for verifying the integrity of a virtual machine.  However "
"to be properly secure you should pay attention to the output of the checksum "
"command (it uses the ones from GNU coreutils).  In particular when the "
"filename is not printable, coreutils uses a special backslash syntax.  For "
"more information, see the GNU coreutils info file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:972
msgid "(Added in 1.3.7)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:974
msgid "guestfs_chmod"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:976
#, no-wrap
msgid ""
" int\n"
" guestfs_chmod (guestfs_h *g,\n"
"                int mode,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:981 ../fish/guestfish-actions.pod:664
msgid ""
"Change the mode (permissions) of C<path> to C<mode>.  Only numeric modes are "
"supported."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:984 ../fish/guestfish-actions.pod:667
msgid ""
"I<Note>: When using this command from guestfish, C<mode> by default would be "
"decimal, unless you prefix it with C<0> to get octal, ie. use C<0700> not "
"C<700>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:988 ../src/guestfs-actions.pod:4143 ../src/guestfs-actions.pod:4324 ../src/guestfs-actions.pod:4343 ../src/guestfs-actions.pod:4362 ../fish/guestfish-actions.pod:671 ../fish/guestfish-actions.pod:2793 ../fish/guestfish-actions.pod:2909 ../fish/guestfish-actions.pod:2919 ../fish/guestfish-actions.pod:2929
msgid "The mode actually set is affected by the umask."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:994
msgid "guestfs_chown"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:996
#, no-wrap
msgid ""
" int\n"
" guestfs_chown (guestfs_h *g,\n"
"                int owner,\n"
"                int group,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1002 ../fish/guestfish-actions.pod:677
msgid "Change the file owner to C<owner> and group to C<group>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1004 ../src/guestfs-actions.pod:3253 ../fish/guestfish-actions.pod:679 ../fish/guestfish-actions.pod:2251
msgid ""
"Only numeric uid and gid are supported.  If you want to use names, you will "
"need to locate and parse the password file yourself (Augeas support makes "
"this relatively easy)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1012
msgid "guestfs_command"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1014
#, no-wrap
msgid ""
" char *\n"
" guestfs_command (guestfs_h *g,\n"
"                  char *const *arguments);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1018 ../fish/guestfish-actions.pod:687
msgid ""
"This call runs a command from the guest filesystem.  The filesystem must be "
"mounted, and must contain a compatible operating system (ie. something "
"Linux, with the same or compatible processor architecture)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1023
msgid ""
"The single parameter is an argv-style list of arguments.  The first element "
"is the name of the program to run.  Subsequent elements are parameters.  The "
"list must be non-empty (ie. must contain a program name).  Note that the "
"command runs directly, and is I<not> invoked via the shell (see "
"C<guestfs_sh>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1030 ../fish/guestfish-actions.pod:699
msgid "The return value is anything printed to I<stdout> by the command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1033 ../fish/guestfish-actions.pod:702
msgid ""
"If the command returns a non-zero exit status, then this function returns an "
"error message.  The error message string is the content of I<stderr> from "
"the command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1037 ../fish/guestfish-actions.pod:706
msgid ""
"The C<$PATH> environment variable will contain at least C</usr/bin> and "
"C</bin>.  If you require a program from another location, you should provide "
"the full path in the first parameter."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1042 ../fish/guestfish-actions.pod:711
msgid ""
"Shared libraries and data files required by the program must be available on "
"filesystems which are mounted in the correct places.  It is the caller's "
"responsibility to ensure all filesystems that are needed are mounted at the "
"right locations."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1054 ../src/guestfs-actions.pod:1074 ../src/guestfs-actions.pod:1537
msgid "(Added in 0.9.1)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1056
msgid "guestfs_command_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1058
#, no-wrap
msgid ""
" char **\n"
" guestfs_command_lines (guestfs_h *g,\n"
"                        char *const *arguments);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1062
msgid ""
"This is the same as C<guestfs_command>, but splits the result into a list of "
"lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1065
msgid "See also: C<guestfs_sh_lines>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1076
msgid "guestfs_config"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1078
#, no-wrap
msgid ""
" int\n"
" guestfs_config (guestfs_h *g,\n"
"                 const char *qemuparam,\n"
"                 const char *qemuvalue);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1083 ../fish/guestfish-actions.pod:736
msgid ""
"This can be used to add arbitrary qemu command line parameters of the form "
"C<-param value>.  Actually it's not quite arbitrary - we prevent you from "
"setting some parameters which would interfere with parameters that we use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1088 ../fish/guestfish-actions.pod:741
msgid "The first character of C<param> string must be a C<-> (dash)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1090 ../fish/guestfish-actions.pod:743
msgid "C<value> can be NULL."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1096
msgid "guestfs_copy_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1098
#, no-wrap
msgid ""
" int\n"
" guestfs_copy_size (guestfs_h *g,\n"
"                    const char *src,\n"
"                    const char *dest,\n"
"                    int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1104 ../fish/guestfish-actions.pod:749
msgid ""
"This command copies exactly C<size> bytes from one source device or file "
"C<src> to another destination device or file C<dest>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1107 ../fish/guestfish-actions.pod:752
msgid ""
"Note this will fail if the source is too short or if the destination is not "
"large enough."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1112 ../src/guestfs-actions.pod:1235 ../src/guestfs-actions.pod:1266 ../src/guestfs-actions.pod:1686 ../src/guestfs-actions.pod:1708 ../src/guestfs-actions.pod:6512 ../src/guestfs-actions.pod:6546 ../src/guestfs-actions.pod:7025 ../src/guestfs-actions.pod:7044
msgid ""
"This long-running command can generate progress notification messages so "
"that the caller can display a progress bar or indicator.  To receive these "
"messages, the caller must register a progress callback.  See "
"L<guestfs(3)/guestfs_set_progress_callback>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1117 ../src/guestfs-actions.pod:3919 ../src/guestfs-actions.pod:5121 ../src/guestfs-actions.pod:6753 ../src/guestfs-actions.pod:6773 ../src/guestfs-actions.pod:6859
msgid "(Added in 1.0.87)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1119
msgid "guestfs_cp"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1121
#, no-wrap
msgid ""
" int\n"
" guestfs_cp (guestfs_h *g,\n"
"             const char *src,\n"
"             const char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1126 ../fish/guestfish-actions.pod:759
msgid ""
"This copies a file from C<src> to C<dest> where C<dest> is either a "
"destination filename or destination directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1131 ../src/guestfs-actions.pod:1145 ../src/guestfs-actions.pod:1217 ../src/guestfs-actions.pod:1291 ../src/guestfs-actions.pod:1400 ../src/guestfs-actions.pod:4588 ../src/guestfs-actions.pod:4965
msgid "(Added in 1.0.18)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1133
msgid "guestfs_cp_a"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1135
#, no-wrap
msgid ""
" int\n"
" guestfs_cp_a (guestfs_h *g,\n"
"               const char *src,\n"
"               const char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1140 ../fish/guestfish-actions.pod:766
msgid ""
"This copies a file or directory from C<src> to C<dest> recursively using the "
"C<cp -a> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1147
msgid "guestfs_dd"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1149
#, no-wrap
msgid ""
" int\n"
" guestfs_dd (guestfs_h *g,\n"
"             const char *src,\n"
"             const char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1154 ../fish/guestfish-actions.pod:773
msgid ""
"This command copies from one source device or file C<src> to another "
"destination device or file C<dest>.  Normally you would use this to copy to "
"or from a device or partition, for example to duplicate a filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1159
msgid ""
"If the destination is a device, it must be as large or larger than the "
"source file or device, otherwise the copy will fail.  This command cannot do "
"partial copies (see C<guestfs_copy_size>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1167
msgid "guestfs_df"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1169
#, no-wrap
msgid ""
" char *\n"
" guestfs_df (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1172 ../fish/guestfish-actions.pod:786
msgid "This command runs the C<df> command to report disk space used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1174 ../src/guestfs-actions.pod:1191
msgid ""
"This command is mostly useful for interactive sessions.  It is I<not> "
"intended that you try to parse the output string.  Use C<guestfs_statvfs> "
"from programs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1181 ../src/guestfs-actions.pod:1198 ../src/guestfs-actions.pod:1311 ../src/guestfs-actions.pod:2263 ../src/guestfs-actions.pod:2287 ../src/guestfs-actions.pod:2355 ../src/guestfs-actions.pod:4029 ../src/guestfs-actions.pod:4488 ../src/guestfs-actions.pod:6250 ../src/guestfs-actions.pod:6274 ../src/guestfs-actions.pod:6892 ../src/guestfs-actions.pod:6905 ../src/guestfs-actions.pod:6918
msgid "(Added in 1.0.54)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1183
msgid "guestfs_df_h"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1185
#, no-wrap
msgid ""
" char *\n"
" guestfs_df_h (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1188 ../fish/guestfish-actions.pod:796
msgid ""
"This command runs the C<df -h> command to report disk space used in "
"human-readable format."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1200
msgid "guestfs_dmesg"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1202
#, no-wrap
msgid ""
" char *\n"
" guestfs_dmesg (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1205 ../fish/guestfish-actions.pod:807
msgid ""
"This returns the kernel messages (C<dmesg> output) from the guest kernel.  "
"This is sometimes useful for extended debugging of problems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1209
msgid ""
"Another way to get the same information is to enable verbose messages with "
"C<guestfs_set_verbose> or by setting the environment variable "
"C<LIBGUESTFS_DEBUG=1> before running the program."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1219
msgid "guestfs_download"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1221
#, no-wrap
msgid ""
" int\n"
" guestfs_download (guestfs_h *g,\n"
"                   const char *remotefilename,\n"
"                   const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1226 ../src/guestfs-actions.pod:1251 ../fish/guestfish-actions.pod:820 ../fish/guestfish-actions.pod:833
msgid ""
"Download file C<remotefilename> and save it as C<filename> on the local "
"machine."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1229 ../src/guestfs-actions.pod:6506 ../fish/guestfish-actions.pod:823 ../fish/guestfish-actions.pod:4344
msgid "C<filename> can also be a named pipe."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1231
msgid "See also C<guestfs_upload>, C<guestfs_cat>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1242
msgid "guestfs_download_offset"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1244
#, no-wrap
msgid ""
" int\n"
" guestfs_download_offset (guestfs_h *g,\n"
"                          const char *remotefilename,\n"
"                          const char *filename,\n"
"                          int64_t offset,\n"
"                          int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1254 ../fish/guestfish-actions.pod:836
msgid ""
"C<remotefilename> is read for C<size> bytes starting at C<offset> (this "
"region must be within the file or device)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1257
msgid ""
"Note that there is no limit on the amount of data that can be downloaded "
"with this call, unlike with C<guestfs_pread>, and this call always reads the "
"full amount unless an error occurs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1262
msgid "See also C<guestfs_download>, C<guestfs_pread>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1271 ../src/guestfs-actions.pod:6551
msgid "(Added in 1.5.17)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1273
msgid "guestfs_drop_caches"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1275
#, no-wrap
msgid ""
" int\n"
" guestfs_drop_caches (guestfs_h *g,\n"
"                      int whattodrop);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1279 ../fish/guestfish-actions.pod:852
msgid ""
"This instructs the guest kernel to drop its page cache, and/or dentries and "
"inode caches.  The parameter C<whattodrop> tells the kernel what precisely "
"to drop, see L<http://linux-mm.org/Drop_Caches>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1284 ../fish/guestfish-actions.pod:857
msgid "Setting C<whattodrop> to 3 should drop everything."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1286 ../fish/guestfish-actions.pod:859
msgid ""
"This automatically calls L<sync(2)> before the operation, so that the "
"maximum guest memory is freed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1293
msgid "guestfs_du"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1295
#, no-wrap
msgid ""
" int64_t\n"
" guestfs_du (guestfs_h *g,\n"
"             const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1299 ../fish/guestfish-actions.pod:866
msgid ""
"This command runs the C<du -s> command to estimate file space usage for "
"C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1302 ../fish/guestfish-actions.pod:869
msgid ""
"C<path> can be a file or a directory.  If C<path> is a directory then the "
"estimate includes the contents of the directory and all subdirectories "
"(recursively)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1306 ../fish/guestfish-actions.pod:873
msgid "The result is the estimated size in I<kilobytes> (ie. units of 1024 bytes)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1313
msgid "guestfs_e2fsck_f"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1315
#, no-wrap
msgid ""
" int\n"
" guestfs_e2fsck_f (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1319 ../fish/guestfish-actions.pod:880
msgid ""
"This runs C<e2fsck -p -f device>, ie. runs the ext2/ext3 filesystem checker "
"on C<device>, noninteractively (C<-p>), even if the filesystem appears to be "
"clean (C<-f>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1323
msgid ""
"This command is only needed because of C<guestfs_resize2fs> (q.v.).  "
"Normally you should use C<guestfs_fsck>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1328
msgid "(Added in 1.0.29)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1330
msgid "guestfs_echo_daemon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1332
#, no-wrap
msgid ""
" char *\n"
" guestfs_echo_daemon (guestfs_h *g,\n"
"                      char *const *words);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1336 ../fish/guestfish-actions.pod:891
msgid ""
"This command concatenates the list of C<words> passed with single spaces "
"between them and returns the resulting string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1339 ../fish/guestfish-actions.pod:894
msgid "You can use this command to test the connection through to the daemon."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1341
msgid "See also C<guestfs_ping_daemon>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1346 ../src/guestfs-actions.pod:2073 ../src/guestfs-actions.pod:5754
msgid "(Added in 1.0.69)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1348
msgid "guestfs_egrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1350
#, no-wrap
msgid ""
" char **\n"
" guestfs_egrep (guestfs_h *g,\n"
"                const char *regex,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1355 ../fish/guestfish-actions.pod:902
msgid "This calls the external C<egrep> program and returns the matching lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1365 ../src/guestfs-actions.pod:1384 ../src/guestfs-actions.pod:1441 ../src/guestfs-actions.pod:1487 ../src/guestfs-actions.pod:1506 ../src/guestfs-actions.pod:2201 ../src/guestfs-actions.pod:2220 ../src/guestfs-actions.pod:2376 ../src/guestfs-actions.pod:2389 ../src/guestfs-actions.pod:2404 ../src/guestfs-actions.pod:2450 ../src/guestfs-actions.pod:2472 ../src/guestfs-actions.pod:2485 ../src/guestfs-actions.pod:3412 ../src/guestfs-actions.pod:3426 ../src/guestfs-actions.pod:3439 ../src/guestfs-actions.pod:3453 ../src/guestfs-actions.pod:4423 ../src/guestfs-actions.pod:5299 ../src/guestfs-actions.pod:5348 ../src/guestfs-actions.pod:6118 ../src/guestfs-actions.pod:6130 ../src/guestfs-actions.pod:6143 ../src/guestfs-actions.pod:6156 ../src/guestfs-actions.pod:6178 ../src/guestfs-actions.pod:6191 ../src/guestfs-actions.pod:6204 ../src/guestfs-actions.pod:6217 ../src/guestfs-actions.pod:6988 ../src/guestfs-actions.pod:7007 ../src/guestfs-actions.pod:7092 ../src/guestfs-actions.pod:7111 ../src/guestfs-actions.pod:7157 ../src/guestfs-actions.pod:7176
msgid "(Added in 1.0.66)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1367
msgid "guestfs_egrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1369
#, no-wrap
msgid ""
" char **\n"
" guestfs_egrepi (guestfs_h *g,\n"
"                 const char *regex,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1374 ../fish/guestfish-actions.pod:912
msgid "This calls the external C<egrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1386
msgid "guestfs_equal"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1388
#, no-wrap
msgid ""
" int\n"
" guestfs_equal (guestfs_h *g,\n"
"                const char *file1,\n"
"                const char *file2);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1393 ../fish/guestfish-actions.pod:922
msgid ""
"This compares the two files C<file1> and C<file2> and returns true if their "
"content is exactly equal, or false otherwise."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1396 ../fish/guestfish-actions.pod:925
msgid "The external L<cmp(1)> program is used for the comparison."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1402
msgid "guestfs_exists"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1404
#, no-wrap
msgid ""
" int\n"
" guestfs_exists (guestfs_h *g,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1408 ../fish/guestfish-actions.pod:931
msgid ""
"This returns C<true> if and only if there is a file, directory (or anything) "
"with the given C<path> name."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1411
msgid "See also C<guestfs_is_file>, C<guestfs_is_dir>, C<guestfs_stat>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1417
msgid "guestfs_fallocate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1419
#, no-wrap
msgid ""
" int\n"
" guestfs_fallocate (guestfs_h *g,\n"
"                    const char *path,\n"
"                    int len);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1424 ../src/guestfs-actions.pod:1450 ../fish/guestfish-actions.pod:940 ../fish/guestfish-actions.pod:959
msgid ""
"This command preallocates a file (containing zero bytes) named C<path> of "
"size C<len> bytes.  If the file exists already, it is overwritten."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1428 ../fish/guestfish-actions.pod:944
msgid ""
"Do not confuse this with the guestfish-specific C<alloc> command which "
"allocates a file in the host and attaches it as a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1434 ../fish/guestfish-actions.pod:948
msgid ""
"This function is deprecated.  In new code, use the C<fallocate64> call "
"instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1443
msgid "guestfs_fallocate64"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1445
#, no-wrap
msgid ""
" int\n"
" guestfs_fallocate64 (guestfs_h *g,\n"
"                      const char *path,\n"
"                      int64_t len);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1454
msgid ""
"Note that this call allocates disk blocks for the file.  To create a sparse "
"file use C<guestfs_truncate_size> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1457
msgid ""
"The deprecated call C<guestfs_fallocate> does the same, but owing to an "
"oversight it only allowed 30 bit lengths to be specified, effectively "
"limiting the maximum size of files created through that call to 1GB."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1462 ../fish/guestfish-actions.pod:971
msgid ""
"Do not confuse this with the guestfish-specific C<alloc> and C<sparse> "
"commands which create a file in the host and attach it as a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1468
msgid "(Added in 1.3.17)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1470
msgid "guestfs_fgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1472
#, no-wrap
msgid ""
" char **\n"
" guestfs_fgrep (guestfs_h *g,\n"
"                const char *pattern,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1477 ../fish/guestfish-actions.pod:979
msgid "This calls the external C<fgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1489
msgid "guestfs_fgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1491
#, no-wrap
msgid ""
" char **\n"
" guestfs_fgrepi (guestfs_h *g,\n"
"                 const char *pattern,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1496 ../fish/guestfish-actions.pod:989
msgid "This calls the external C<fgrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1508
msgid "guestfs_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1510
#, no-wrap
msgid ""
" char *\n"
" guestfs_file (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1514 ../fish/guestfish-actions.pod:999
msgid ""
"This call uses the standard L<file(1)> command to determine the type or "
"contents of the file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1517 ../fish/guestfish-actions.pod:1002
msgid ""
"This call will also transparently look inside various types of compressed "
"file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1520 ../fish/guestfish-actions.pod:1005
msgid ""
"The exact command which runs is C<file -zb path>.  Note in particular that "
"the filename is not prepended to the output (the C<-b> option)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1524
msgid ""
"This command can also be used on C</dev/> devices (and partitions, LV "
"names).  You can for example use this to determine if a device contains a "
"filesystem, although it's usually better to use C<guestfs_vfs_type>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1529 ../fish/guestfish-actions.pod:1014
msgid ""
"If the C<path> does not begin with C</dev/> then this command only works for "
"the content of regular files.  For other file types (directory, symbolic "
"link etc) it will just return the string C<directory> etc."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1539
msgid "guestfs_file_architecture"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1541
#, no-wrap
msgid ""
" char *\n"
" guestfs_file_architecture (guestfs_h *g,\n"
"                            const char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1545 ../fish/guestfish-actions.pod:1023
msgid ""
"This detects the architecture of the binary C<filename>, and returns it if "
"known."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1548 ../fish/guestfish-actions.pod:1026
msgid "Currently defined architectures are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1552 ../fish/guestfish-actions.pod:1030
msgid "\"i386\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1554 ../fish/guestfish-actions.pod:1032
msgid ""
"This string is returned for all 32 bit i386, i486, i586, i686 binaries "
"irrespective of the precise processor requirements of the binary."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1557 ../fish/guestfish-actions.pod:1035
msgid "\"x86_64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1559 ../fish/guestfish-actions.pod:1037
msgid "64 bit x86-64."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1561 ../fish/guestfish-actions.pod:1039
msgid "\"sparc\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1563 ../fish/guestfish-actions.pod:1041
msgid "32 bit SPARC."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1565 ../fish/guestfish-actions.pod:1043
msgid "\"sparc64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1567 ../fish/guestfish-actions.pod:1045
msgid "64 bit SPARC V9 and above."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1569 ../fish/guestfish-actions.pod:1047
msgid "\"ia64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1571 ../fish/guestfish-actions.pod:1049
msgid "Intel Itanium."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1573 ../fish/guestfish-actions.pod:1051
msgid "\"ppc\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1575 ../fish/guestfish-actions.pod:1053
msgid "32 bit Power PC."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1577 ../fish/guestfish-actions.pod:1055
msgid "\"ppc64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1579 ../fish/guestfish-actions.pod:1057
msgid "64 bit Power PC."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1583 ../fish/guestfish-actions.pod:1061
msgid "Libguestfs may return other architecture strings in future."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1585 ../fish/guestfish-actions.pod:1063
msgid "The function works on at least the following types of files:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1591 ../fish/guestfish-actions.pod:1069
msgid "many types of Un*x and Linux binary"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1595 ../fish/guestfish-actions.pod:1073
msgid "many types of Un*x and Linux shared library"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1599 ../fish/guestfish-actions.pod:1077
msgid "Windows Win32 and Win64 binaries"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1603 ../fish/guestfish-actions.pod:1081
msgid "Windows Win32 and Win64 DLLs"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1605 ../fish/guestfish-actions.pod:1083
msgid "Win32 binaries and DLLs return C<i386>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1607 ../fish/guestfish-actions.pod:1085
msgid "Win64 binaries and DLLs return C<x86_64>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1611 ../fish/guestfish-actions.pod:1089
msgid "Linux kernel modules"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1615 ../fish/guestfish-actions.pod:1093
msgid "Linux new-style initrd images"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1619 ../fish/guestfish-actions.pod:1097
msgid "some non-x86 Linux vmlinuz kernels"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1623 ../fish/guestfish-actions.pod:1101
msgid "What it can't do currently:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1629 ../fish/guestfish-actions.pod:1107
msgid "static libraries (libfoo.a)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1633 ../fish/guestfish-actions.pod:1111
msgid "Linux old-style initrd as compressed ext2 filesystem (RHEL 3)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1637 ../fish/guestfish-actions.pod:1115
msgid "x86 Linux vmlinuz kernels"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1639 ../fish/guestfish-actions.pod:1117
msgid ""
"x86 vmlinuz images (bzImage format) consist of a mix of 16-, 32- and "
"compressed code, and are horribly hard to unpack.  If you want to find the "
"architecture of a kernel, use the architecture of the associated initrd or "
"kernel module(s) instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1649 ../src/guestfs-actions.pod:1812 ../src/guestfs-actions.pod:1829 ../src/guestfs-actions.pod:2508 ../src/guestfs-actions.pod:2589 ../src/guestfs-actions.pod:2615 ../src/guestfs-actions.pod:2664 ../src/guestfs-actions.pod:2685 ../src/guestfs-actions.pod:2718 ../src/guestfs-actions.pod:2802 ../src/guestfs-actions.pod:2864 ../src/guestfs-actions.pod:3037 ../src/guestfs-actions.pod:3169
msgid "(Added in 1.5.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1651
msgid "guestfs_filesize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1653
#, no-wrap
msgid ""
" int64_t\n"
" guestfs_filesize (guestfs_h *g,\n"
"                   const char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1657 ../fish/guestfish-actions.pod:1128
msgid "This command returns the size of C<file> in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1659
msgid ""
"To get other stats about a file, use C<guestfs_stat>, C<guestfs_lstat>, "
"C<guestfs_is_dir>, C<guestfs_is_file> etc.  To get the size of block "
"devices, use C<guestfs_blockdev_getsize64>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1665
msgid "(Added in 1.0.82)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1667
msgid "guestfs_fill"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1669
#, no-wrap
msgid ""
" int\n"
" guestfs_fill (guestfs_h *g,\n"
"               int c,\n"
"               int len,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1675 ../fish/guestfish-actions.pod:1138
msgid ""
"This command creates a new file called C<path>.  The initial content of the "
"file is C<len> octets of C<c>, where C<c> must be a number in the range "
"C<[0..255]>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1679
msgid ""
"To fill a file with zero bytes (sparsely), it is much more efficient to use "
"C<guestfs_truncate_size>.  To create a file with a pattern of repeating "
"bytes use C<guestfs_fill_pattern>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1691
msgid "(Added in 1.0.79)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1693
msgid "guestfs_fill_pattern"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1695
#, no-wrap
msgid ""
" int\n"
" guestfs_fill_pattern (guestfs_h *g,\n"
"                       const char *pattern,\n"
"                       int len,\n"
"                       const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1701
msgid ""
"This function is like C<guestfs_fill> except that it creates a new file of "
"length C<len> containing the repeating pattern of bytes in C<pattern>.  The "
"pattern is truncated if necessary to ensure the length of the file is "
"exactly C<len> bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1713
msgid "(Added in 1.3.12)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1715
msgid "guestfs_find"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1717
#, no-wrap
msgid ""
" char **\n"
" guestfs_find (guestfs_h *g,\n"
"               const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1721 ../fish/guestfish-actions.pod:1160
msgid ""
"This command lists out all files and directories, recursively, starting at "
"C<directory>.  It is essentially equivalent to running the shell command "
"C<find directory -print> but some post-processing happens on the output, "
"described below."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1726 ../fish/guestfish-actions.pod:1165
msgid ""
"This returns a list of strings I<without any prefix>.  Thus if the directory "
"structure was:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1729 ../fish/guestfish-actions.pod:1168
#, no-wrap
msgid ""
" /tmp/a\n"
" /tmp/b\n"
" /tmp/c/d\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1733
msgid "then the returned list from C<guestfs_find> C</tmp> would be 4 elements:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1736 ../fish/guestfish-actions.pod:1175
#, no-wrap
msgid ""
" a\n"
" b\n"
" c\n"
" c/d\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1741 ../fish/guestfish-actions.pod:1180
msgid "If C<directory> is not a directory, then this command returns an error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1744 ../fish/guestfish-actions.pod:1183
msgid "The returned list is sorted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1746
msgid "See also C<guestfs_find0>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1755 ../src/guestfs-actions.pod:3856 ../src/guestfs-actions.pod:5383
msgid "(Added in 1.0.27)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1757
msgid "guestfs_find0"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1759
#, no-wrap
msgid ""
" int\n"
" guestfs_find0 (guestfs_h *g,\n"
"                const char *directory,\n"
"                const char *files);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1764 ../fish/guestfish-actions.pod:1194
msgid ""
"This command lists out all files and directories, recursively, starting at "
"C<directory>, placing the resulting list in the external file called "
"C<files>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1768
msgid ""
"This command works the same way as C<guestfs_find> with the following "
"exceptions:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1775 ../fish/guestfish-actions.pod:1205
msgid "The resulting list is written to an external file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1779 ../fish/guestfish-actions.pod:1209
msgid ""
"Items (filenames) in the result are separated by C<\\0> characters.  See "
"L<find(1)> option I<-print0>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1784 ../fish/guestfish-actions.pod:1214
msgid "This command is not limited in the number of names that it can return."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1789 ../fish/guestfish-actions.pod:1219
msgid "The result list is not sorted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1795
msgid "(Added in 1.0.74)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1797
msgid "guestfs_findfs_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1799
#, no-wrap
msgid ""
" char *\n"
" guestfs_findfs_label (guestfs_h *g,\n"
"                       const char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1803 ../fish/guestfish-actions.pod:1229
msgid ""
"This command searches the filesystems and returns the one which has the "
"given label.  An error is returned if no such filesystem can be found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1807
msgid "To find the label of a filesystem, use C<guestfs_vfs_label>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1814
msgid "guestfs_findfs_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1816
#, no-wrap
msgid ""
" char *\n"
" guestfs_findfs_uuid (guestfs_h *g,\n"
"                      const char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1820 ../fish/guestfish-actions.pod:1239
msgid ""
"This command searches the filesystems and returns the one which has the "
"given UUID.  An error is returned if no such filesystem can be found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1824
msgid "To find the UUID of a filesystem, use C<guestfs_vfs_uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1831
msgid "guestfs_fsck"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1833
#, no-wrap
msgid ""
" int\n"
" guestfs_fsck (guestfs_h *g,\n"
"               const char *fstype,\n"
"               const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1838 ../fish/guestfish-actions.pod:1249
msgid ""
"This runs the filesystem checker (fsck) on C<device> which should have "
"filesystem type C<fstype>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1841 ../fish/guestfish-actions.pod:1252
msgid ""
"The returned integer is the status.  See L<fsck(8)> for the list of status "
"codes from C<fsck>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1850 ../fish/guestfish-actions.pod:1261
msgid "Multiple status codes can be summed together."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1854 ../fish/guestfish-actions.pod:1265
msgid ""
"A non-zero return code can mean \"success\", for example if errors have been "
"corrected on the filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1859 ../fish/guestfish-actions.pod:1270
msgid "Checking or repairing NTFS volumes is not supported (by linux-ntfs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1864 ../fish/guestfish-actions.pod:1275
msgid "This command is entirely equivalent to running C<fsck -a -t fstype device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1868 ../src/guestfs-actions.pod:7030
msgid "(Added in 1.0.16)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1870
msgid "guestfs_get_append"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1872
#, no-wrap
msgid ""
" const char *\n"
" guestfs_get_append (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1875 ../fish/guestfish-actions.pod:1281
msgid ""
"Return the additional kernel options which are added to the guest kernel "
"command line."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1878 ../fish/guestfish-actions.pod:1284
msgid "If C<NULL> then no options are added."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1880
msgid ""
"This function returns a string which may be NULL.  There is no way to return "
"an error from this function.  The string is owned by the guest handle and "
"must I<not> be freed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1884 ../src/guestfs-actions.pod:5061 ../src/guestfs-actions.pod:5524 ../src/guestfs-actions.pod:5892 ../src/guestfs-actions.pod:5911 ../src/guestfs-actions.pod:5927 ../src/guestfs-actions.pod:5944 ../src/guestfs-actions.pod:6701 ../src/guestfs-actions.pod:6719 ../src/guestfs-actions.pod:7073
msgid "(Added in 1.0.26)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1886
msgid "guestfs_get_autosync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1888
#, no-wrap
msgid ""
" int\n"
" guestfs_get_autosync (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1891 ../fish/guestfish-actions.pod:1290
msgid "Get the autosync flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1897
msgid "guestfs_get_direct"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1899
#, no-wrap
msgid ""
" int\n"
" guestfs_get_direct (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1902 ../fish/guestfish-actions.pod:1296
msgid "Return the direct appliance mode flag."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1906 ../src/guestfs-actions.pod:5565
msgid "(Added in 1.0.72)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1908
msgid "guestfs_get_e2label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1910
#, no-wrap
msgid ""
" char *\n"
" guestfs_get_e2label (guestfs_h *g,\n"
"                      const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1914 ../fish/guestfish-actions.pod:1302
msgid "This returns the ext2/3/4 filesystem label of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1920 ../fish/guestfish-actions.pod:1305
msgid ""
"This function is deprecated.  In new code, use the C<vfs_label> call "
"instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1927 ../src/guestfs-actions.pod:1948 ../src/guestfs-actions.pod:5583 ../src/guestfs-actions.pod:5602
msgid "(Added in 1.0.15)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1929
msgid "guestfs_get_e2uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1931
#, no-wrap
msgid ""
" char *\n"
" guestfs_get_e2uuid (guestfs_h *g,\n"
"                     const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1935 ../fish/guestfish-actions.pod:1316
msgid "This returns the ext2/3/4 filesystem UUID of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1941 ../fish/guestfish-actions.pod:1319
msgid "This function is deprecated.  In new code, use the C<vfs_uuid> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1950
msgid "guestfs_get_memsize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1952
#, no-wrap
msgid ""
" int\n"
" guestfs_get_memsize (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1955 ../fish/guestfish-actions.pod:1330
msgid "This gets the memory size in megabytes allocated to the qemu subprocess."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1958
msgid ""
"If C<guestfs_set_memsize> was not called on this handle, and if "
"C<LIBGUESTFS_MEMSIZE> was not set, then this returns the compiled-in default "
"value for memsize."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1962 ../src/guestfs-actions.pod:2043 ../src/guestfs-actions.pod:5618 ../src/guestfs-actions.pod:5725 ../fish/guestfish-actions.pod:1337 ../fish/guestfish-actions.pod:1388 ../fish/guestfish-actions.pod:3751 ../fish/guestfish-actions.pod:3838
msgid "For more information on the architecture of libguestfs, see L<guestfs(3)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1967 ../src/guestfs-actions.pod:4147 ../src/guestfs-actions.pod:4328 ../src/guestfs-actions.pod:4347 ../src/guestfs-actions.pod:4366 ../src/guestfs-actions.pod:4378 ../src/guestfs-actions.pod:4395 ../src/guestfs-actions.pod:4408 ../src/guestfs-actions.pod:5286 ../src/guestfs-actions.pod:5623 ../src/guestfs-actions.pod:5866 ../src/guestfs-actions.pod:6467
msgid "(Added in 1.0.55)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1969
msgid "guestfs_get_network"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1971
#, no-wrap
msgid ""
" int\n"
" guestfs_get_network (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1974 ../fish/guestfish-actions.pod:1344
msgid "This returns the enable network flag."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1978 ../src/guestfs-actions.pod:5642
msgid "(Added in 1.5.4)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1980
msgid "guestfs_get_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1982
#, no-wrap
msgid ""
" const char *\n"
" guestfs_get_path (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1985 ../fish/guestfish-actions.pod:1350
msgid "Return the current search path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1987 ../fish/guestfish-actions.pod:1352
msgid ""
"This is always non-NULL.  If it wasn't set already, then this will return "
"the default path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1990 ../src/guestfs-actions.pod:2019
msgid ""
"This function returns a string, or NULL on error.  The string is owned by "
"the guest handle and must I<not> be freed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1995
msgid "guestfs_get_pid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1997
#, no-wrap
msgid ""
" int\n"
" guestfs_get_pid (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2000 ../fish/guestfish-actions.pod:1361
msgid ""
"Return the process ID of the qemu subprocess.  If there is no qemu "
"subprocess, then this will return an error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2003 ../fish/guestfish-actions.pod:1364
msgid "This is an internal call used for debugging and testing."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2007
msgid "(Added in 1.0.56)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2009
msgid "guestfs_get_qemu"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2011
#, no-wrap
msgid ""
" const char *\n"
" guestfs_get_qemu (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2014 ../fish/guestfish-actions.pod:1370
msgid "Return the current qemu binary."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2016 ../fish/guestfish-actions.pod:1372
msgid ""
"This is always non-NULL.  If it wasn't set already, then this will return "
"the default qemu binary name."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2022 ../src/guestfs-actions.pod:5687
msgid "(Added in 1.0.6)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2024
msgid "guestfs_get_recovery_proc"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2026
#, no-wrap
msgid ""
" int\n"
" guestfs_get_recovery_proc (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2029 ../fish/guestfish-actions.pod:1379
msgid "Return the recovery process enabled flag."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2033 ../src/guestfs-actions.pod:3259 ../src/guestfs-actions.pod:3554 ../src/guestfs-actions.pod:3954 ../src/guestfs-actions.pod:3986 ../src/guestfs-actions.pod:4991 ../src/guestfs-actions.pod:5334 ../src/guestfs-actions.pod:5711 ../src/guestfs-actions.pod:6370 ../src/guestfs-actions.pod:6390 ../src/guestfs-actions.pod:6582
msgid "(Added in 1.0.77)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2035
msgid "guestfs_get_selinux"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2037
#, no-wrap
msgid ""
" int\n"
" guestfs_get_selinux (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2040
msgid ""
"This returns the current setting of the selinux flag which is passed to the "
"appliance at boot time.  See C<guestfs_set_selinux>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2048 ../src/guestfs-actions.pod:2111 ../src/guestfs-actions.pod:5730 ../src/guestfs-actions.pod:5784
msgid "(Added in 1.0.67)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2050
msgid "guestfs_get_state"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2052
#, no-wrap
msgid ""
" int\n"
" guestfs_get_state (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2055 ../fish/guestfish-actions.pod:1395
msgid ""
"This returns the current state as an opaque integer.  This is only useful "
"for printing debug and internal error messages."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2058 ../src/guestfs-actions.pod:3062 ../src/guestfs-actions.pod:3091 ../src/guestfs-actions.pod:3152 ../src/guestfs-actions.pod:3179 ../fish/guestfish-actions.pod:1398 ../fish/guestfish-actions.pod:2133 ../fish/guestfish-actions.pod:2151 ../fish/guestfish-actions.pod:2189 ../fish/guestfish-actions.pod:2205
msgid "For more information on states, see L<guestfs(3)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2064
msgid "guestfs_get_trace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2066
#, no-wrap
msgid ""
" int\n"
" guestfs_get_trace (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2069 ../fish/guestfish-actions.pod:1404
msgid "Return the command trace flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2075
msgid "guestfs_get_umask"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2077
#, no-wrap
msgid ""
" int\n"
" guestfs_get_umask (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2080
msgid ""
"Return the current umask.  By default the umask is C<022> unless it has been "
"set by calling C<guestfs_umask>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2087
msgid "guestfs_get_verbose"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2089
#, no-wrap
msgid ""
" int\n"
" guestfs_get_verbose (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2092 ../fish/guestfish-actions.pod:1417
msgid "This returns the verbose messages flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2098
msgid "guestfs_getcon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2100
#, no-wrap
msgid ""
" char *\n"
" guestfs_getcon (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2103 ../fish/guestfish-actions.pod:1423
msgid "This gets the SELinux security context of the daemon."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2105
msgid "See the documentation about SELINUX in L<guestfs(3)>, and C<guestfs_setcon>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2113
msgid "guestfs_getxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2115
#, no-wrap
msgid ""
" char *\n"
" guestfs_getxattr (guestfs_h *g,\n"
"                   const char *path,\n"
"                   const char *name,\n"
"                   size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2121
msgid ""
"Get a single extended attribute from file C<path> named C<name>.  This call "
"follows symlinks.  If you want to lookup an extended attribute for the "
"symlink itself, use C<guestfs_lgetxattr>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2125 ../src/guestfs-actions.pod:3273
msgid ""
"Normally it is better to get all extended attributes from a file in one go "
"by calling C<guestfs_getxattrs>.  However some Linux filesystem "
"implementations are buggy and do not provide a way to list out attributes.  "
"For these filesystems (notably ntfs-3g)  you have to know the names of the "
"extended attributes you want in advance and call this function."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2132 ../src/guestfs-actions.pod:3280 ../fish/guestfish-actions.pod:1443 ../fish/guestfish-actions.pod:2270
msgid ""
"Extended attribute values are blobs of binary data.  If there is no extended "
"attribute named C<name>, this returns an error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2135
msgid "See also: C<guestfs_getxattrs>, C<guestfs_lgetxattr>, L<attr(5)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2137 ../src/guestfs-actions.pod:2326 ../src/guestfs-actions.pod:3285 ../src/guestfs-actions.pod:4984 ../src/guestfs-actions.pod:5010 ../src/guestfs-actions.pod:5191
msgid ""
"This function returns a buffer, or NULL on error.  The size of the returned "
"buffer is written to C<*size_r>.  I<The caller must free the returned buffer "
"after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2141
msgid "guestfs_getxattrs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2143
#, no-wrap
msgid ""
" struct guestfs_xattr_list *\n"
" guestfs_getxattrs (guestfs_h *g,\n"
"                    const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2147 ../fish/guestfish-actions.pod:1452
msgid "This call lists the extended attributes of the file or directory C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2150 ../fish/guestfish-actions.pod:1455
msgid ""
"At the system call level, this is a combination of the L<listxattr(2)> and "
"L<getxattr(2)> calls."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2153
msgid "See also: C<guestfs_lgetxattrs>, L<attr(5)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2155 ../src/guestfs-actions.pod:3299 ../src/guestfs-actions.pod:3950
msgid ""
"This function returns a C<struct guestfs_xattr_list *>, or NULL if there was "
"an error.  I<The caller must call C<guestfs_free_xattr_list> after use>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2159 ../src/guestfs-actions.pod:3303 ../src/guestfs-actions.pod:3468 ../src/guestfs-actions.pod:3504 ../src/guestfs-actions.pod:5364 ../src/guestfs-actions.pod:5803 ../src/guestfs-actions.pod:7138
msgid "(Added in 1.0.59)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2161
msgid "guestfs_glob_expand"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2163
#, no-wrap
msgid ""
" char **\n"
" guestfs_glob_expand (guestfs_h *g,\n"
"                      const char *pattern);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2167 ../fish/guestfish-actions.pod:1464
msgid ""
"This command searches for all the pathnames matching C<pattern> according to "
"the wildcard expansion rules used by the shell."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2171 ../fish/guestfish-actions.pod:1468
msgid "If no paths match, then this returns an empty list (note: not an error)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2174 ../fish/guestfish-actions.pod:1471
msgid ""
"It is just a wrapper around the C L<glob(3)> function with flags "
"C<GLOB_MARK|GLOB_BRACE>.  See that manual page for more details."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2182 ../src/guestfs-actions.pod:5968 ../src/guestfs-actions.pod:5985
msgid "(Added in 1.0.50)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2184
msgid "guestfs_grep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2186
#, no-wrap
msgid ""
" char **\n"
" guestfs_grep (guestfs_h *g,\n"
"               const char *regex,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2191 ../fish/guestfish-actions.pod:1479
msgid "This calls the external C<grep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2203
msgid "guestfs_grepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2205
#, no-wrap
msgid ""
" char **\n"
" guestfs_grepi (guestfs_h *g,\n"
"                const char *regex,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2210 ../fish/guestfish-actions.pod:1489
msgid "This calls the external C<grep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2222
msgid "guestfs_grub_install"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2224
#, no-wrap
msgid ""
" int\n"
" guestfs_grub_install (guestfs_h *g,\n"
"                       const char *root,\n"
"                       const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2229 ../fish/guestfish-actions.pod:1499
msgid ""
"This command installs GRUB (the Grand Unified Bootloader) on C<device>, with "
"the root directory being C<root>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2232 ../fish/guestfish-actions.pod:1502
msgid ""
"Note: If grub-install reports the error \"No suitable drive was found in the "
"generated device map.\" it may be that you need to create a "
"C</boot/grub/device.map> file first that contains the mapping between grub "
"device names and Linux device names.  It is usually sufficient to create a "
"file containing:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2239 ../fish/guestfish-actions.pod:1509
#, no-wrap
msgid ""
" (hd0) /dev/vda\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2241 ../fish/guestfish-actions.pod:1511
msgid "replacing C</dev/vda> with the name of the installation device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2245
msgid "(Added in 1.0.17)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2247
msgid "guestfs_head"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2249
#, no-wrap
msgid ""
" char **\n"
" guestfs_head (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2253 ../fish/guestfish-actions.pod:1517
msgid ""
"This command returns up to the first 10 lines of a file as a list of "
"strings."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2265
msgid "guestfs_head_n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2267
#, no-wrap
msgid ""
" char **\n"
" guestfs_head_n (guestfs_h *g,\n"
"                 int nrlines,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2272 ../fish/guestfish-actions.pod:1527
msgid ""
"If the parameter C<nrlines> is a positive number, this returns the first "
"C<nrlines> lines of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2275 ../fish/guestfish-actions.pod:1530
msgid ""
"If the parameter C<nrlines> is a negative number, this returns lines from "
"the file C<path>, excluding the last C<nrlines> lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2278 ../src/guestfs-actions.pod:6265 ../fish/guestfish-actions.pod:1533 ../fish/guestfish-actions.pod:4184
msgid "If the parameter C<nrlines> is zero, this returns an empty list."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2289
msgid "guestfs_hexdump"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2291
#, no-wrap
msgid ""
" char *\n"
" guestfs_hexdump (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2295 ../fish/guestfish-actions.pod:1542
msgid ""
"This runs C<hexdump -C> on the given C<path>.  The result is the "
"human-readable, canonical hex dump of the file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2304 ../src/guestfs-actions.pod:6049 ../src/guestfs-actions.pod:6104
msgid "(Added in 1.0.22)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2306
msgid "guestfs_initrd_cat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2308
#, no-wrap
msgid ""
" char *\n"
" guestfs_initrd_cat (guestfs_h *g,\n"
"                     const char *initrdpath,\n"
"                     const char *filename,\n"
"                     size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2314 ../fish/guestfish-actions.pod:1552
msgid ""
"This command unpacks the file C<filename> from the initrd file called "
"C<initrdpath>.  The filename must be given I<without> the initial C</> "
"character."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2318 ../fish/guestfish-actions.pod:1556
msgid ""
"For example, in guestfish you could use the following command to examine the "
"boot script (usually called C</init>)  contained in a Linux initrd or "
"initramfs image:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2322 ../fish/guestfish-actions.pod:1560
#, no-wrap
msgid ""
" initrd-cat /boot/initrd-<version>.img init\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2324
msgid "See also C<guestfs_initrd_list>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2335
msgid "guestfs_initrd_list"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2337
#, no-wrap
msgid ""
" char **\n"
" guestfs_initrd_list (guestfs_h *g,\n"
"                      const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2341 ../fish/guestfish-actions.pod:1571
msgid "This command lists out files contained in an initrd."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2343 ../fish/guestfish-actions.pod:1573
msgid ""
"The files are listed without any initial C</> character.  The files are "
"listed in the order they appear (not necessarily alphabetical).  Directory "
"names are listed as separate items."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2347 ../fish/guestfish-actions.pod:1577
msgid ""
"Old Linux kernels (2.4 and earlier) used a compressed ext2 filesystem as "
"initrd.  We I<only> support the newer initramfs format (compressed cpio "
"files)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2357
msgid "guestfs_inotify_add_watch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2359
#, no-wrap
msgid ""
" int64_t\n"
" guestfs_inotify_add_watch (guestfs_h *g,\n"
"                            const char *path,\n"
"                            int mask);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2364 ../fish/guestfish-actions.pod:1585
msgid "Watch C<path> for the events listed in C<mask>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2366 ../fish/guestfish-actions.pod:1587
msgid ""
"Note that if C<path> is a directory then events within that directory are "
"watched, but this does I<not> happen recursively (in subdirectories)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2370 ../fish/guestfish-actions.pod:1591
msgid ""
"Note for non-C or non-Linux callers: the inotify events are defined by the "
"Linux kernel ABI and are listed in C</usr/include/sys/inotify.h>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2378
msgid "guestfs_inotify_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2380
#, no-wrap
msgid ""
" int\n"
" guestfs_inotify_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2383 ../fish/guestfish-actions.pod:1599
msgid ""
"This closes the inotify handle which was previously opened by inotify_init.  "
"It removes all watches, throws away any pending events, and deallocates all "
"resources."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2391
msgid "guestfs_inotify_files"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2393
#, no-wrap
msgid ""
" char **\n"
" guestfs_inotify_files (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2396
msgid ""
"This function is a helpful wrapper around C<guestfs_inotify_read> which just "
"returns a list of pathnames of objects that were touched.  The returned "
"pathnames are sorted and deduplicated."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2406
msgid "guestfs_inotify_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2408
#, no-wrap
msgid ""
" int\n"
" guestfs_inotify_init (guestfs_h *g,\n"
"                       int maxevents);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2412 ../fish/guestfish-actions.pod:1615
msgid ""
"This command creates a new inotify handle.  The inotify subsystem can be "
"used to notify events which happen to objects in the guest filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2416
msgid ""
"C<maxevents> is the maximum number of events which will be queued up between "
"calls to C<guestfs_inotify_read> or C<guestfs_inotify_files>.  If this is "
"passed as C<0>, then the kernel (or previously set)  default is used.  For "
"Linux 2.6.29 the default was 16384 events.  Beyond this limit, the kernel "
"throws away events, but records the fact that it threw them away by setting "
"a flag C<IN_Q_OVERFLOW> in the returned structure list (see "
"C<guestfs_inotify_read>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2426
msgid ""
"Before any events are generated, you have to add some watches to the "
"internal watch list.  See: C<guestfs_inotify_add_watch>, "
"C<guestfs_inotify_rm_watch> and C<guestfs_inotify_watch_all>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2432
msgid ""
"Queued up events should be read periodically by calling "
"C<guestfs_inotify_read> (or C<guestfs_inotify_files> which is just a helpful "
"wrapper around C<guestfs_inotify_read>).  If you don't read the events out "
"often enough then you risk the internal queue overflowing."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2439
msgid ""
"The handle should be closed after use by calling C<guestfs_inotify_close>.  "
"This also removes any watches automatically."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2443 ../fish/guestfish-actions.pod:1646
msgid ""
"See also L<inotify(7)> for an overview of the inotify interface as exposed "
"by the Linux kernel, which is roughly what we expose via libguestfs.  Note "
"that there is one global inotify handle per libguestfs instance."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2452
msgid "guestfs_inotify_read"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2454
#, no-wrap
msgid ""
" struct guestfs_inotify_event_list *\n"
" guestfs_inotify_read (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2457 ../fish/guestfish-actions.pod:1655
msgid ""
"Return the complete queue of events that have happened since the previous "
"read call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2460 ../fish/guestfish-actions.pod:1658
msgid "If no events have happened, this returns an empty list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2462 ../fish/guestfish-actions.pod:1660
msgid ""
"I<Note>: In order to make sure that all events have been read, you must call "
"this function repeatedly until it returns an empty list.  The reason is that "
"the call will read events up to the maximum appliance-to-host message size "
"and leave remaining events in the queue."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2468
msgid ""
"This function returns a C<struct guestfs_inotify_event_list *>, or NULL if "
"there was an error.  I<The caller must call "
"C<guestfs_free_inotify_event_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2474
msgid "guestfs_inotify_rm_watch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2476
#, no-wrap
msgid ""
" int\n"
" guestfs_inotify_rm_watch (guestfs_h *g,\n"
"                           int wd);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2480
msgid ""
"Remove a previously defined inotify watch.  See "
"C<guestfs_inotify_add_watch>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2487
msgid "guestfs_inspect_get_arch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2489
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_arch (guestfs_h *g,\n"
"                           const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2493 ../src/guestfs-actions.pod:2516 ../src/guestfs-actions.pod:2597 ../src/guestfs-actions.pod:2623 ../src/guestfs-actions.pod:2645 ../src/guestfs-actions.pod:2672 ../src/guestfs-actions.pod:2693 ../src/guestfs-actions.pod:2726 ../src/guestfs-actions.pod:2755 ../src/guestfs-actions.pod:2786 ../src/guestfs-actions.pod:2830 ../src/guestfs-actions.pod:2872 ../src/guestfs-actions.pod:2895
msgid ""
"This function should only be called with a root device string as returned by "
"C<guestfs_inspect_os>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2496
msgid ""
"This returns the architecture of the inspected operating system.  The "
"possible return values are listed under C<guestfs_file_architecture>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2500 ../fish/guestfish-actions.pod:1684
msgid ""
"If the architecture could not be determined, then the string C<unknown> is "
"returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2503 ../src/guestfs-actions.pod:2584 ../src/guestfs-actions.pod:2632 ../src/guestfs-actions.pod:2660 ../src/guestfs-actions.pod:2742 ../src/guestfs-actions.pod:2773 ../src/guestfs-actions.pod:2797 ../src/guestfs-actions.pod:2816 ../src/guestfs-actions.pod:2859 ../src/guestfs-actions.pod:2882 ../src/guestfs-actions.pod:2988 ../src/guestfs-actions.pod:3029 ../fish/guestfish-actions.pod:1687 ../fish/guestfish-actions.pod:1761 ../fish/guestfish-actions.pod:1794 ../fish/guestfish-actions.pod:1815 ../fish/guestfish-actions.pod:1875 ../fish/guestfish-actions.pod:1899 ../fish/guestfish-actions.pod:1916 ../fish/guestfish-actions.pod:1929 ../fish/guestfish-actions.pod:1964 ../fish/guestfish-actions.pod:1980 ../fish/guestfish-actions.pod:2079 ../fish/guestfish-actions.pod:2113
msgid "Please read L<guestfs(3)/INSPECTION> for more details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2510
msgid "guestfs_inspect_get_distro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2512
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_distro (guestfs_h *g,\n"
"                             const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2519 ../fish/guestfish-actions.pod:1696
msgid "This returns the distro (distribution) of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2522 ../fish/guestfish-actions.pod:1699
msgid "Currently defined distros are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2526 ../fish/guestfish-actions.pod:1703
msgid "\"archlinux\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2528 ../fish/guestfish-actions.pod:1705
msgid "Arch Linux."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2530 ../fish/guestfish-actions.pod:1707
msgid "\"debian\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2532 ../fish/guestfish-actions.pod:1709
msgid "Debian."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2534 ../fish/guestfish-actions.pod:1711
msgid "\"fedora\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2536 ../fish/guestfish-actions.pod:1713
msgid "Fedora."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2538 ../fish/guestfish-actions.pod:1715
msgid "\"gentoo\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2540 ../fish/guestfish-actions.pod:1717
msgid "Gentoo."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2542 ../fish/guestfish-actions.pod:1719
msgid "\"linuxmint\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2544 ../fish/guestfish-actions.pod:1721
msgid "Linux Mint."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2546 ../fish/guestfish-actions.pod:1723
msgid "\"mandriva\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2548 ../fish/guestfish-actions.pod:1725
msgid "Mandriva."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2550 ../fish/guestfish-actions.pod:1727
msgid "\"meego\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2552 ../fish/guestfish-actions.pod:1729
msgid "MeeGo."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2554 ../fish/guestfish-actions.pod:1731
msgid "\"pardus\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2556 ../fish/guestfish-actions.pod:1733
msgid "Pardus."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2558 ../fish/guestfish-actions.pod:1735
msgid "\"redhat-based\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2560 ../fish/guestfish-actions.pod:1737
msgid "Some Red Hat-derived distro."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2562 ../fish/guestfish-actions.pod:1739
msgid "\"rhel\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2564 ../fish/guestfish-actions.pod:1741
msgid "Red Hat Enterprise Linux and some derivatives."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2566 ../fish/guestfish-actions.pod:1743
msgid "\"ubuntu\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2568 ../fish/guestfish-actions.pod:1745
msgid "Ubuntu."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2570 ../src/guestfs-actions.pod:2850 ../fish/guestfish-actions.pod:1747 ../fish/guestfish-actions.pod:1955
msgid "\"unknown\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2572 ../fish/guestfish-actions.pod:1749
msgid "The distro could not be determined."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2574 ../src/guestfs-actions.pod:2842 ../fish/guestfish-actions.pod:1751 ../fish/guestfish-actions.pod:1947
msgid "\"windows\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2576 ../fish/guestfish-actions.pod:1753
msgid ""
"Windows does not have distributions.  This string is returned if the OS type "
"is Windows."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2581 ../src/guestfs-actions.pod:2856 ../fish/guestfish-actions.pod:1758 ../fish/guestfish-actions.pod:1961
msgid ""
"Future versions of libguestfs may return other strings here.  The caller "
"should be prepared to handle any string."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2591
msgid "guestfs_inspect_get_filesystems"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2593
#, no-wrap
msgid ""
" char **\n"
" guestfs_inspect_get_filesystems (guestfs_h *g,\n"
"                                  const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2600 ../fish/guestfish-actions.pod:1770
msgid ""
"This returns a list of all the filesystems that we think are associated with "
"this operating system.  This includes the root filesystem, other ordinary "
"filesystems, and non-mounted devices like swap partitions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2605 ../fish/guestfish-actions.pod:1775
msgid ""
"In the case of a multi-boot virtual machine, it is possible for a filesystem "
"to be shared between operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2608
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_mountpoints>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2617
msgid "guestfs_inspect_get_hostname"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2619
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_hostname (guestfs_h *g,\n"
"                               const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2626 ../fish/guestfish-actions.pod:1788
msgid ""
"This function returns the hostname of the operating system as found by "
"inspection of the guest's configuration files."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2629 ../fish/guestfish-actions.pod:1791
msgid ""
"If the hostname could not be determined, then the string C<unknown> is "
"returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2637
msgid "(Added in 1.7.9)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2639
msgid "guestfs_inspect_get_major_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2641
#, no-wrap
msgid ""
" int\n"
" guestfs_inspect_get_major_version (guestfs_h *g,\n"
"                                    const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2648 ../fish/guestfish-actions.pod:1803
msgid "This returns the major version number of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2651 ../fish/guestfish-actions.pod:1806
msgid ""
"Windows uses a consistent versioning scheme which is I<not> reflected in the "
"popular public names used by the operating system.  Notably the operating "
"system known as \"Windows 7\" is really version 6.1 (ie. major = 6, minor = "
"1).  You can find out the real versions corresponding to releases of Windows "
"by consulting Wikipedia or MSDN."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2658 ../src/guestfs-actions.pod:2678 ../fish/guestfish-actions.pod:1813 ../fish/guestfish-actions.pod:1827
msgid "If the version could not be determined, then C<0> is returned."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2666
msgid "guestfs_inspect_get_minor_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2668
#, no-wrap
msgid ""
" int\n"
" guestfs_inspect_get_minor_version (guestfs_h *g,\n"
"                                    const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2675 ../fish/guestfish-actions.pod:1824
msgid "This returns the minor version number of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2680
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_major_version>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2687
msgid "guestfs_inspect_get_mountpoints"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2689
#, no-wrap
msgid ""
" char **\n"
" guestfs_inspect_get_mountpoints (guestfs_h *g,\n"
"                                  const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2696 ../fish/guestfish-actions.pod:1839
msgid ""
"This returns a hash of where we think the filesystems associated with this "
"operating system should be mounted.  Callers should note that this is at "
"best an educated guess made by reading configuration files such as "
"C</etc/fstab>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2701 ../fish/guestfish-actions.pod:1844
msgid ""
"Each element in the returned hashtable has a key which is the path of the "
"mountpoint (eg. C</boot>) and a value which is the filesystem that would be "
"mounted there (eg. C</dev/sda1>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2706 ../fish/guestfish-actions.pod:1849
msgid "Non-mounted devices such as swap devices are I<not> returned in this list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2709
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_filesystems>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2712 ../src/guestfs-actions.pod:3356 ../src/guestfs-actions.pod:4550 ../src/guestfs-actions.pod:6406
msgid ""
"This function returns a NULL-terminated array of strings, or NULL if there "
"was an error.  The array of strings will always have length C<2n+1>, where "
"C<n> keys and values alternate, followed by the trailing NULL entry.  I<The "
"caller must free the strings and the array after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2720
msgid "guestfs_inspect_get_package_format"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2722
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_package_format (guestfs_h *g,\n"
"                                     const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2729
msgid ""
"This function and C<guestfs_inspect_get_package_management> return the "
"package format and package management tool used by the inspected operating "
"system.  For example for Fedora these functions would return C<rpm> (package "
"format) and C<yum> (package management)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2735 ../fish/guestfish-actions.pod:1868
msgid ""
"This returns the string C<unknown> if we could not determine the package "
"format I<or> if the operating system does not have a real packaging system "
"(eg. Windows)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2739 ../fish/guestfish-actions.pod:1872
msgid ""
"Possible strings include: C<rpm>, C<deb>, C<ebuild>, C<pisi>, C<pacman>.  "
"Future versions of libguestfs may return other strings."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2747 ../src/guestfs-actions.pod:2778
msgid "(Added in 1.7.5)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2749
msgid "guestfs_inspect_get_package_management"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2751
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_package_management (guestfs_h *g,\n"
"                                         const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2758
msgid ""
"C<guestfs_inspect_get_package_format> and this function return the package "
"format and package management tool used by the inspected operating system.  "
"For example for Fedora these functions would return C<rpm> (package format) "
"and C<yum> (package management)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2764 ../fish/guestfish-actions.pod:1890
msgid ""
"This returns the string C<unknown> if we could not determine the package "
"management tool I<or> if the operating system does not have a real packaging "
"system (eg. Windows)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2768 ../fish/guestfish-actions.pod:1894
msgid ""
"Possible strings include: C<yum>, C<up2date>, C<apt> (for all Debian "
"derivatives), C<portage>, C<pisi>, C<pacman>, C<urpmi>.  Future versions of "
"libguestfs may return other strings."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2780
msgid "guestfs_inspect_get_product_name"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2782
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_product_name (guestfs_h *g,\n"
"                                   const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2789 ../fish/guestfish-actions.pod:1908
msgid ""
"This returns the product name of the inspected operating system.  The "
"product name is generally some freeform string which can be displayed to the "
"user, but should not be parsed by programs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2794 ../fish/guestfish-actions.pod:1913
msgid ""
"If the product name could not be determined, then the string C<unknown> is "
"returned."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2804
msgid "guestfs_inspect_get_roots"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2806
#, no-wrap
msgid ""
" char **\n"
" guestfs_inspect_get_roots (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2809
msgid ""
"This function is a convenient way to get the list of root devices, as "
"returned from a previous call to C<guestfs_inspect_os>, but without redoing "
"the whole inspection process."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2813
msgid ""
"This returns an empty list if either no root devices were found or the "
"caller has not called C<guestfs_inspect_os>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2822
msgid "(Added in 1.7.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2824
msgid "guestfs_inspect_get_type"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2826
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_type (guestfs_h *g,\n"
"                           const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2833 ../fish/guestfish-actions.pod:1938
msgid ""
"This returns the type of the inspected operating system.  Currently defined "
"types are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2838 ../fish/guestfish-actions.pod:1943
msgid "\"linux\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2840 ../fish/guestfish-actions.pod:1945
msgid "Any Linux-based operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2844 ../fish/guestfish-actions.pod:1949
msgid "Any Microsoft Windows operating system."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2846 ../fish/guestfish-actions.pod:1951
msgid "\"freebsd\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2848 ../fish/guestfish-actions.pod:1953
msgid "FreeBSD."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2852 ../fish/guestfish-actions.pod:1957
msgid "The operating system type could not be determined."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2866
msgid "guestfs_inspect_get_windows_systemroot"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2868
#, no-wrap
msgid ""
" char *\n"
" guestfs_inspect_get_windows_systemroot (guestfs_h *g,\n"
"                                         const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2875 ../fish/guestfish-actions.pod:1973
msgid ""
"This returns the Windows systemroot of the inspected guest.  The systemroot "
"is a directory path such as C</WINDOWS>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2878 ../fish/guestfish-actions.pod:1976
msgid ""
"This call assumes that the guest is Windows and that the systemroot could be "
"determined by inspection.  If this is not the case then an error is "
"returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2887
msgid "(Added in 1.5.25)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2889
msgid "guestfs_inspect_list_applications"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2891
#, no-wrap
msgid ""
" struct guestfs_application_list *\n"
" guestfs_inspect_list_applications (guestfs_h *g,\n"
"                                    const char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2898 ../fish/guestfish-actions.pod:1989
msgid "Return the list of applications installed in the operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2900
msgid ""
"I<Note:> This call works differently from other parts of the inspection "
"API.  You have to call C<guestfs_inspect_os>, then "
"C<guestfs_inspect_get_mountpoints>, then mount up the disks, before calling "
"this.  Listing applications is a significantly more difficult operation "
"which requires access to the full filesystem.  Also note that unlike the "
"other C<guestfs_inspect_get_*> calls which are just returning data cached in "
"the libguestfs handle, this call actually reads parts of the mounted "
"filesystems during the call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2910 ../fish/guestfish-actions.pod:2001
msgid ""
"This returns an empty list if the inspection code was not able to determine "
"the list of applications."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2913 ../fish/guestfish-actions.pod:2004
msgid "The application structure contains the following fields:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2917 ../fish/guestfish-actions.pod:2008
msgid "C<app_name>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2919 ../fish/guestfish-actions.pod:2010
msgid ""
"The name of the application.  For Red Hat-derived and Debian-derived Linux "
"guests, this is the package name."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2922 ../fish/guestfish-actions.pod:2013
msgid "C<app_display_name>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2924 ../fish/guestfish-actions.pod:2015
msgid ""
"The display name of the application, sometimes localized to the install "
"language of the guest operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2927 ../fish/guestfish-actions.pod:2018
msgid ""
"If unavailable this is returned as an empty string C<\"\">.  Callers needing "
"to display something can use C<app_name> instead."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2930 ../fish/guestfish-actions.pod:2021
msgid "C<app_epoch>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2932 ../fish/guestfish-actions.pod:2023
msgid ""
"For package managers which use epochs, this contains the epoch of the "
"package (an integer).  If unavailable, this is returned as C<0>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2935 ../fish/guestfish-actions.pod:2026
msgid "C<app_version>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2937 ../fish/guestfish-actions.pod:2028
msgid ""
"The version string of the application or package.  If unavailable this is "
"returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2940 ../fish/guestfish-actions.pod:2031
msgid "C<app_release>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2942 ../fish/guestfish-actions.pod:2033
msgid ""
"The release string of the application or package, for package managers that "
"use this.  If unavailable this is returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2946 ../fish/guestfish-actions.pod:2037
msgid "C<app_install_path>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2948 ../fish/guestfish-actions.pod:2039
msgid ""
"The installation path of the application (on operating systems such as "
"Windows which use installation paths).  This path is in the format used by "
"the guest operating system, it is not a libguestfs path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2953 ../fish/guestfish-actions.pod:2044
msgid "If unavailable this is returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2955 ../fish/guestfish-actions.pod:2046
msgid "C<app_trans_path>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2957 ../fish/guestfish-actions.pod:2048
msgid ""
"The install path translated into a libguestfs path.  If unavailable this is "
"returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2960 ../fish/guestfish-actions.pod:2051
msgid "C<app_publisher>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2962 ../fish/guestfish-actions.pod:2053
msgid ""
"The name of the publisher of the application, for package managers that use "
"this.  If unavailable this is returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2966 ../fish/guestfish-actions.pod:2057
msgid "C<app_url>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2968 ../fish/guestfish-actions.pod:2059
msgid ""
"The URL (eg. upstream URL) of the application.  If unavailable this is "
"returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2971 ../fish/guestfish-actions.pod:2062
msgid "C<app_source_package>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2973 ../fish/guestfish-actions.pod:2064
msgid ""
"For packaging systems which support this, the name of the source package.  "
"If unavailable this is returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2976 ../fish/guestfish-actions.pod:2067
msgid "C<app_summary>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2978 ../fish/guestfish-actions.pod:2069
msgid ""
"A short (usually one line) description of the application or package.  If "
"unavailable this is returned as an empty string C<\"\">."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2981 ../fish/guestfish-actions.pod:2072
msgid "C<app_description>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2983 ../fish/guestfish-actions.pod:2074
msgid ""
"A longer description of the application or package.  If unavailable this is "
"returned as an empty string C<\"\">."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2990
msgid ""
"This function returns a C<struct guestfs_application_list *>, or NULL if "
"there was an error.  I<The caller must call C<guestfs_free_application_list> "
"after use>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2994
msgid "(Added in 1.7.8)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2996
msgid "guestfs_inspect_os"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2998
#, no-wrap
msgid ""
" char **\n"
" guestfs_inspect_os (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3001 ../fish/guestfish-actions.pod:2085
msgid ""
"This function uses other libguestfs functions and certain heuristics to "
"inspect the disk(s) (usually disks belonging to a virtual machine), looking "
"for operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3005 ../fish/guestfish-actions.pod:2089
msgid "The list returned is empty if no operating systems were found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3007 ../fish/guestfish-actions.pod:2091
msgid ""
"If one operating system was found, then this returns a list with a single "
"element, which is the name of the root filesystem of this operating system.  "
"It is also possible for this function to return a list containing more than "
"one element, indicating a dual-boot or multi-boot virtual machine, with each "
"element being the root filesystem of one of the operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3014
msgid ""
"You can pass the root string(s) returned to other C<guestfs_inspect_get_*> "
"functions in order to query further information about each operating system, "
"such as the name and version."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3019
msgid ""
"This function uses other libguestfs features such as C<guestfs_mount_ro> and "
"C<guestfs_umount_all> in order to mount and unmount filesystems and look at "
"the contents.  This should be called with no disks currently mounted.  The "
"function may also use Augeas, so any existing Augeas handle will be closed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3025 ../fish/guestfish-actions.pod:2109
msgid ""
"This function cannot decrypt encrypted disks.  The caller must do that first "
"(supplying the necessary keys) if the disk is encrypted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3031 ../src/guestfs-actions.pod:3314 ../src/guestfs-actions.pod:3376
msgid "See also C<guestfs_list_filesystems>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3039
msgid "guestfs_is_blockdev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3041
#, no-wrap
msgid ""
" int\n"
" guestfs_is_blockdev (guestfs_h *g,\n"
"                      const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3045 ../fish/guestfish-actions.pod:2121
msgid ""
"This returns C<true> if and only if there is a block device with the given "
"C<path> name."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3048 ../src/guestfs-actions.pod:3077 ../src/guestfs-actions.pod:3107 ../src/guestfs-actions.pod:3122 ../src/guestfs-actions.pod:3138 ../src/guestfs-actions.pod:3194 ../src/guestfs-actions.pod:3209
msgid "See also C<guestfs_stat>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3052 ../src/guestfs-actions.pod:3081 ../src/guestfs-actions.pod:3126 ../src/guestfs-actions.pod:3198 ../src/guestfs-actions.pod:3213
msgid "(Added in 1.5.10)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3054
msgid "guestfs_is_busy"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3056
#, no-wrap
msgid ""
" int\n"
" guestfs_is_busy (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3059 ../fish/guestfish-actions.pod:2130
msgid ""
"This returns true iff this handle is busy processing a command (in the "
"C<BUSY> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3068
msgid "guestfs_is_chardev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3070
#, no-wrap
msgid ""
" int\n"
" guestfs_is_chardev (guestfs_h *g,\n"
"                     const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3074 ../fish/guestfish-actions.pod:2139
msgid ""
"This returns C<true> if and only if there is a character device with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3083
msgid "guestfs_is_config"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3085
#, no-wrap
msgid ""
" int\n"
" guestfs_is_config (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3088 ../fish/guestfish-actions.pod:2148
msgid ""
"This returns true iff this handle is being configured (in the C<CONFIG> "
"state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3097
msgid "guestfs_is_dir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3099
#, no-wrap
msgid ""
" int\n"
" guestfs_is_dir (guestfs_h *g,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3103 ../fish/guestfish-actions.pod:2157
msgid ""
"This returns C<true> if and only if there is a directory with the given "
"C<path> name.  Note that it returns false for other objects like files."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3113
msgid "guestfs_is_fifo"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3115
#, no-wrap
msgid ""
" int\n"
" guestfs_is_fifo (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3119 ../fish/guestfish-actions.pod:2167
msgid ""
"This returns C<true> if and only if there is a FIFO (named pipe)  with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3128
msgid "guestfs_is_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3130
#, no-wrap
msgid ""
" int\n"
" guestfs_is_file (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3134 ../fish/guestfish-actions.pod:2176
msgid ""
"This returns C<true> if and only if there is a regular file with the given "
"C<path> name.  Note that it returns false for other objects like "
"directories."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3144
msgid "guestfs_is_launching"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3146
#, no-wrap
msgid ""
" int\n"
" guestfs_is_launching (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3149 ../fish/guestfish-actions.pod:2186
msgid ""
"This returns true iff this handle is launching the subprocess (in the "
"C<LAUNCHING> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3158
msgid "guestfs_is_lv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3160
#, no-wrap
msgid ""
" int\n"
" guestfs_is_lv (guestfs_h *g,\n"
"                const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3164 ../fish/guestfish-actions.pod:2195
msgid ""
"This command tests whether C<device> is a logical volume, and returns true "
"iff this is the case."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3171
msgid "guestfs_is_ready"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3173
#, no-wrap
msgid ""
" int\n"
" guestfs_is_ready (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3176 ../fish/guestfish-actions.pod:2202
msgid ""
"This returns true iff this handle is ready to accept commands (in the "
"C<READY> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3185
msgid "guestfs_is_socket"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3187
#, no-wrap
msgid ""
" int\n"
" guestfs_is_socket (guestfs_h *g,\n"
"                    const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3191 ../fish/guestfish-actions.pod:2211
msgid ""
"This returns C<true> if and only if there is a Unix domain socket with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3200
msgid "guestfs_is_symlink"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3202
#, no-wrap
msgid ""
" int\n"
" guestfs_is_symlink (guestfs_h *g,\n"
"                     const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3206 ../fish/guestfish-actions.pod:2220
msgid ""
"This returns C<true> if and only if there is a symbolic link with the given "
"C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3215
msgid "guestfs_kill_subprocess"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3217
#, no-wrap
msgid ""
" int\n"
" guestfs_kill_subprocess (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3220 ../fish/guestfish-actions.pod:2229
msgid "This kills the qemu subprocess.  You should never need to call this."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3226
msgid "guestfs_launch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3228
#, no-wrap
msgid ""
" int\n"
" guestfs_launch (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3231 ../fish/guestfish-actions.pod:2237
msgid ""
"Internally libguestfs is implemented by running a virtual machine using "
"L<qemu(1)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3234 ../fish/guestfish-actions.pod:2240
msgid ""
"You should call this after configuring the handle (eg. adding drives) but "
"before performing any actions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3241
msgid "guestfs_lchown"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3243
#, no-wrap
msgid ""
" int\n"
" guestfs_lchown (guestfs_h *g,\n"
"                 int owner,\n"
"                 int group,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3249
msgid ""
"Change the file owner to C<owner> and group to C<group>.  This is like "
"C<guestfs_chown> but if C<path> is a symlink then the link itself is "
"changed, not the target."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3261
msgid "guestfs_lgetxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3263
#, no-wrap
msgid ""
" char *\n"
" guestfs_lgetxattr (guestfs_h *g,\n"
"                    const char *path,\n"
"                    const char *name,\n"
"                    size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3269 ../fish/guestfish-actions.pod:2259
msgid ""
"Get a single extended attribute from file C<path> named C<name>.  If C<path> "
"is a symlink, then this call returns an extended attribute from the symlink."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3283
msgid "See also: C<guestfs_lgetxattrs>, C<guestfs_getxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3289
msgid "guestfs_lgetxattrs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3291
#, no-wrap
msgid ""
" struct guestfs_xattr_list *\n"
" guestfs_lgetxattrs (guestfs_h *g,\n"
"                     const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3295
msgid ""
"This is the same as C<guestfs_getxattrs>, but if C<path> is a symbolic link, "
"then it returns the extended attributes of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3305
msgid "guestfs_list_devices"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3307
#, no-wrap
msgid ""
" char **\n"
" guestfs_list_devices (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3310 ../fish/guestfish-actions.pod:2287
msgid "List all the block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3312 ../fish/guestfish-actions.pod:2289
msgid "The full block device names are returned, eg. C</dev/sda>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3322
msgid "guestfs_list_filesystems"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3324
#, no-wrap
msgid ""
" char **\n"
" guestfs_list_filesystems (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3327 ../fish/guestfish-actions.pod:2297
msgid ""
"This inspection command looks for filesystems on partitions, block devices "
"and logical volumes, returning a list of devices containing filesystems and "
"their type."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3331 ../fish/guestfish-actions.pod:2301
msgid ""
"The return value is a hash, where the keys are the devices containing "
"filesystems, and the values are the filesystem types.  For example:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3335 ../fish/guestfish-actions.pod:2305
#, no-wrap
msgid ""
" \"/dev/sda1\" => \"ntfs\"\n"
" \"/dev/sda2\" => \"ext2\"\n"
" \"/dev/vg_guest/lv_root\" => \"ext4\"\n"
" \"/dev/vg_guest/lv_swap\" => \"swap\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3340 ../fish/guestfish-actions.pod:2310
msgid ""
"The value can have the special value \"unknown\", meaning the content of the "
"device is undetermined or empty.  \"swap\" means a Linux swap partition."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3344
msgid ""
"This command runs other libguestfs commands, which might include "
"C<guestfs_mount> and C<guestfs_umount>, and therefore you should use this "
"soon after launch and only when nothing is mounted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3348
msgid ""
"Not all of the filesystems returned will be mountable.  In particular, swap "
"partitions are returned in the list.  Also this command does not check that "
"each filesystem found is valid and mountable, and some filesystems might be "
"mountable but require special options.  Filesystems may not all belong to a "
"single logical operating system (use C<guestfs_inspect_os> to look for "
"OSes)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3362 ../src/guestfs-actions.pod:4951
msgid "(Added in 1.5.15)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3364
msgid "guestfs_list_partitions"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3366
#, no-wrap
msgid ""
" char **\n"
" guestfs_list_partitions (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3369 ../fish/guestfish-actions.pod:2330
msgid "List all the partitions detected on all block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3371 ../fish/guestfish-actions.pod:2332
msgid "The full partition device names are returned, eg. C</dev/sda1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3373
msgid ""
"This does not return logical volumes.  For that you will need to call "
"C<guestfs_lvs>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3384
msgid "guestfs_ll"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3386
#, no-wrap
msgid ""
" char *\n"
" guestfs_ll (guestfs_h *g,\n"
"             const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3390 ../fish/guestfish-actions.pod:2343
msgid ""
"List the files in C<directory> (relative to the root directory, there is no "
"cwd) in the format of 'ls -la'."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3393 ../fish/guestfish-actions.pod:2346
msgid ""
"This command is mostly useful for interactive sessions.  It is I<not> "
"intended that you try to parse the output string."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3401
msgid "guestfs_ln"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3403
#, no-wrap
msgid ""
" int\n"
" guestfs_ln (guestfs_h *g,\n"
"             const char *target,\n"
"             const char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3408 ../fish/guestfish-actions.pod:2353
msgid "This command creates a hard link using the C<ln> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3414
msgid "guestfs_ln_f"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3416
#, no-wrap
msgid ""
" int\n"
" guestfs_ln_f (guestfs_h *g,\n"
"               const char *target,\n"
"               const char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3421 ../fish/guestfish-actions.pod:2359
msgid ""
"This command creates a hard link using the C<ln -f> command.  The C<-f> "
"option removes the link (C<linkname>) if it exists already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3428
msgid "guestfs_ln_s"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3430
#, no-wrap
msgid ""
" int\n"
" guestfs_ln_s (guestfs_h *g,\n"
"               const char *target,\n"
"               const char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3435 ../fish/guestfish-actions.pod:2366
msgid "This command creates a symbolic link using the C<ln -s> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3441
msgid "guestfs_ln_sf"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3443
#, no-wrap
msgid ""
" int\n"
" guestfs_ln_sf (guestfs_h *g,\n"
"                const char *target,\n"
"                const char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3448 ../fish/guestfish-actions.pod:2372
msgid ""
"This command creates a symbolic link using the C<ln -sf> command, The C<-f> "
"option removes the link (C<linkname>) if it exists already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3455
msgid "guestfs_lremovexattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3457
#, no-wrap
msgid ""
" int\n"
" guestfs_lremovexattr (guestfs_h *g,\n"
"                       const char *xattr,\n"
"                       const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3462
msgid ""
"This is the same as C<guestfs_removexattr>, but if C<path> is a symbolic "
"link, then it removes an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3470
msgid "guestfs_ls"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3472
#, no-wrap
msgid ""
" char **\n"
" guestfs_ls (guestfs_h *g,\n"
"             const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3476 ../fish/guestfish-actions.pod:2387
msgid ""
"List the files in C<directory> (relative to the root directory, there is no "
"cwd).  The '.' and '..' entries are not returned, but hidden files are "
"shown."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3480
msgid ""
"This command is mostly useful for interactive sessions.  Programs should "
"probably use C<guestfs_readdir> instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3489
msgid "guestfs_lsetxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3491
#, no-wrap
msgid ""
" int\n"
" guestfs_lsetxattr (guestfs_h *g,\n"
"                    const char *xattr,\n"
"                    const char *val,\n"
"                    int vallen,\n"
"                    const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3498
msgid ""
"This is the same as C<guestfs_setxattr>, but if C<path> is a symbolic link, "
"then it sets an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3506
msgid "guestfs_lstat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3508
#, no-wrap
msgid ""
" struct guestfs_stat *\n"
" guestfs_lstat (guestfs_h *g,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3512 ../src/guestfs-actions.pod:6005 ../fish/guestfish-actions.pod:2406 ../fish/guestfish-actions.pod:4019
msgid "Returns file information for the given C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3514
msgid ""
"This is the same as C<guestfs_stat> except that if C<path> is a symbolic "
"link, then the link is stat-ed, not the file it refers to."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3518 ../fish/guestfish-actions.pod:2412
msgid "This is the same as the C<lstat(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3520 ../src/guestfs-actions.pod:6009
msgid ""
"This function returns a C<struct guestfs_stat *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_stat> after use>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3524 ../src/guestfs-actions.pod:6013 ../src/guestfs-actions.pod:6031 ../src/guestfs-actions.pod:6412
msgid "(Added in 0.9.2)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3526
msgid "guestfs_lstatlist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3528
#, no-wrap
msgid ""
" struct guestfs_stat_list *\n"
" guestfs_lstatlist (guestfs_h *g,\n"
"                    const char *path,\n"
"                    char *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3533
msgid ""
"This call allows you to perform the C<guestfs_lstat> operation on multiple "
"files, where all files are in the directory C<path>.  C<names> is the list "
"of files from this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3537 ../fish/guestfish-actions.pod:2422
msgid ""
"On return you get a list of stat structs, with a one-to-one correspondence "
"to the C<names> list.  If any name did not exist or could not be lstat'd, "
"then the C<ino> field of that structure is set to C<-1>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3542
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also C<guestfs_lxattrlist> "
"for a similarly efficient call for getting extended attributes.  Very long "
"directory listings might cause the protocol message size to be exceeded, "
"causing this call to fail.  The caller must split up such requests into "
"smaller groups of names."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3550
msgid ""
"This function returns a C<struct guestfs_stat_list *>, or NULL if there was "
"an error.  I<The caller must call C<guestfs_free_stat_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3556
msgid "guestfs_luks_add_key"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3558
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_add_key (guestfs_h *g,\n"
"                       const char *device,\n"
"                       const char *key,\n"
"                       const char *newkey,\n"
"                       int keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3565 ../fish/guestfish-actions.pod:2439
msgid ""
"This command adds a new key on LUKS device C<device>.  C<key> is any "
"existing key, and is used to access the device.  C<newkey> is the new key to "
"add.  C<keyslot> is the key slot that will be replaced."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3570
msgid ""
"Note that if C<keyslot> already contains a key, then this command will "
"fail.  You have to use C<guestfs_luks_kill_slot> first to remove that key."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3576 ../src/guestfs-actions.pod:3616 ../src/guestfs-actions.pod:3639 ../src/guestfs-actions.pod:3659 ../src/guestfs-actions.pod:3691 ../src/guestfs-actions.pod:3710
msgid ""
"This function takes a key or passphrase parameter which could contain "
"sensitive material.  Read the section L</KEYS AND PASSPHRASES> for more "
"information."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3580 ../src/guestfs-actions.pod:3620 ../src/guestfs-actions.pod:3643 ../src/guestfs-actions.pod:3663
msgid "(Added in 1.5.2)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3582
msgid "guestfs_luks_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3584
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_close (guestfs_h *g,\n"
"                     const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3588
msgid ""
"This closes a LUKS device that was created earlier by C<guestfs_luks_open> "
"or C<guestfs_luks_open_ro>.  The C<device> parameter must be the name of the "
"LUKS mapping device (ie. C</dev/mapper/mapname>) and I<not> the name of the "
"underlying block device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3596 ../src/guestfs-actions.pod:3695 ../src/guestfs-actions.pod:3714 ../src/guestfs-actions.pod:3764 ../src/guestfs-actions.pod:3812
msgid "(Added in 1.5.1)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3598
msgid "guestfs_luks_format"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3600
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_format (guestfs_h *g,\n"
"                      const char *device,\n"
"                      const char *key,\n"
"                      int keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3606 ../fish/guestfish-actions.pod:2465
msgid ""
"This command erases existing data on C<device> and formats the device as a "
"LUKS encrypted device.  C<key> is the initial key, which is added to key "
"slot C<slot>.  (LUKS supports 8 key slots, numbered 0-7)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3613 ../src/guestfs-actions.pod:3636 ../src/guestfs-actions.pod:3776 ../src/guestfs-actions.pod:4702 ../src/guestfs-actions.pod:5465 ../src/guestfs-actions.pod:5840 ../src/guestfs-actions.pod:5863 ../src/guestfs-actions.pod:5889 ../src/guestfs-actions.pod:7049 ../fish/guestfish-actions.pod:2473 ../fish/guestfish-actions.pod:2486 ../fish/guestfish-actions.pod:2570 ../fish/guestfish-actions.pod:3131 ../fish/guestfish-actions.pod:3638 ../fish/guestfish-actions.pod:3918 ../fish/guestfish-actions.pod:3934 ../fish/guestfish-actions.pod:3949 ../fish/guestfish-actions.pod:4664
msgid ""
"B<This command is dangerous.  Without careful use you can easily destroy all "
"your data>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3622
msgid "guestfs_luks_format_cipher"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3624
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_format_cipher (guestfs_h *g,\n"
"                             const char *device,\n"
"                             const char *key,\n"
"                             int keyslot,\n"
"                             const char *cipher);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3631
msgid ""
"This command is the same as C<guestfs_luks_format> but it also allows you to "
"set the C<cipher> used."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3645
msgid "guestfs_luks_kill_slot"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3647
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_kill_slot (guestfs_h *g,\n"
"                         const char *device,\n"
"                         const char *key,\n"
"                         int keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3653 ../fish/guestfish-actions.pod:2493
msgid ""
"This command deletes the key in key slot C<keyslot> from the encrypted LUKS "
"device C<device>.  C<key> must be one of the I<other> keys."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3665
msgid "guestfs_luks_open"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3667
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_open (guestfs_h *g,\n"
"                    const char *device,\n"
"                    const char *key,\n"
"                    const char *mapname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3673 ../fish/guestfish-actions.pod:2504
msgid ""
"This command opens a block device which has been encrypted according to the "
"Linux Unified Key Setup (LUKS) standard."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3676 ../fish/guestfish-actions.pod:2507
msgid "C<device> is the encrypted block device or partition."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3678 ../fish/guestfish-actions.pod:2509
msgid ""
"The caller must supply one of the keys associated with the LUKS block "
"device, in the C<key> parameter."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3681 ../fish/guestfish-actions.pod:2512
msgid ""
"This creates a new block device called C</dev/mapper/mapname>.  Reads and "
"writes to this block device are decrypted from and encrypted to the "
"underlying C<device> respectively."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3685
msgid ""
"If this block device contains LVM volume groups, then calling "
"C<guestfs_vgscan> followed by C<guestfs_vg_activate_all> will make them "
"visible."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3697
msgid "guestfs_luks_open_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3699
#, no-wrap
msgid ""
" int\n"
" guestfs_luks_open_ro (guestfs_h *g,\n"
"                       const char *device,\n"
"                       const char *key,\n"
"                       const char *mapname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3705
msgid ""
"This is the same as C<guestfs_luks_open> except that a read-only mapping is "
"created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3716
msgid "guestfs_lvcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3718
#, no-wrap
msgid ""
" int\n"
" guestfs_lvcreate (guestfs_h *g,\n"
"                   const char *logvol,\n"
"                   const char *volgroup,\n"
"                   int mbytes);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3724 ../fish/guestfish-actions.pod:2537
msgid ""
"This creates an LVM logical volume called C<logvol> on the volume group "
"C<volgroup>, with C<size> megabytes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3731
msgid "guestfs_lvm_canonical_lv_name"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3733
#, no-wrap
msgid ""
" char *\n"
" guestfs_lvm_canonical_lv_name (guestfs_h *g,\n"
"                                const char *lvname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3737 ../fish/guestfish-actions.pod:2544
msgid ""
"This converts alternative naming schemes for LVs that you might find to the "
"canonical name.  For example, C</dev/mapper/VG-LV> is converted to "
"C</dev/VG/LV>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3741 ../fish/guestfish-actions.pod:2548
msgid ""
"This command returns an error if the C<lvname> parameter does not refer to a "
"logical volume."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3744
msgid "See also C<guestfs_is_lv>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3749
msgid "(Added in 1.5.24)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3751
msgid "guestfs_lvm_clear_filter"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3753
#, no-wrap
msgid ""
" int\n"
" guestfs_lvm_clear_filter (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3756
msgid ""
"This undoes the effect of C<guestfs_lvm_set_filter>.  LVM will be able to "
"see every block device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3759 ../src/guestfs-actions.pod:3801 ../fish/guestfish-actions.pod:2560 ../fish/guestfish-actions.pod:2591
msgid "This command also clears the LVM cache and performs a volume group scan."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3766
msgid "guestfs_lvm_remove_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3768
#, no-wrap
msgid ""
" int\n"
" guestfs_lvm_remove_all (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3771 ../fish/guestfish-actions.pod:2567
msgid ""
"This command removes all LVM logical volumes, volume groups and physical "
"volumes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3781
msgid "guestfs_lvm_set_filter"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3783
#, no-wrap
msgid ""
" int\n"
" guestfs_lvm_set_filter (guestfs_h *g,\n"
"                         char *const *devices);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3787 ../fish/guestfish-actions.pod:2577
msgid ""
"This sets the LVM device filter so that LVM will only be able to \"see\" the "
"block devices in the list C<devices>, and will ignore all other attached "
"block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3791 ../fish/guestfish-actions.pod:2581
msgid ""
"Where disk image(s) contain duplicate PVs or VGs, this command is useful to "
"get LVM to ignore the duplicates, otherwise LVM can get confused.  Note also "
"there are two types of duplication possible: either cloned PVs/VGs which "
"have identical UUIDs; or VGs that are not cloned but just happen to have the "
"same name.  In normal operation you cannot create this situation, but you "
"can do it outside LVM, eg.  by cloning disk images or by bit twiddling "
"inside the LVM metadata."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3804 ../fish/guestfish-actions.pod:2594
msgid "You can filter whole block devices or individual partitions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3806 ../fish/guestfish-actions.pod:2596
msgid ""
"You cannot use this if any VG is currently in use (eg.  contains a mounted "
"filesystem), even if you are not filtering out that VG."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3814
msgid "guestfs_lvremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3816
#, no-wrap
msgid ""
" int\n"
" guestfs_lvremove (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3820 ../fish/guestfish-actions.pod:2604
msgid ""
"Remove an LVM logical volume C<device>, where C<device> is the path to the "
"LV, such as C</dev/VG/LV>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3823 ../fish/guestfish-actions.pod:2607
msgid ""
"You can also remove all LVs in a volume group by specifying the VG name, "
"C</dev/VG>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3828 ../src/guestfs-actions.pod:5048 ../src/guestfs-actions.pod:6788
msgid "(Added in 1.0.13)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3830
msgid "guestfs_lvrename"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3832
#, no-wrap
msgid ""
" int\n"
" guestfs_lvrename (guestfs_h *g,\n"
"                   const char *logvol,\n"
"                   const char *newlogvol);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3837 ../fish/guestfish-actions.pod:2614
msgid "Rename a logical volume C<logvol> with the new name C<newlogvol>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3841 ../src/guestfs-actions.pod:6801
msgid "(Added in 1.0.83)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3843
msgid "guestfs_lvresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3845
#, no-wrap
msgid ""
" int\n"
" guestfs_lvresize (guestfs_h *g,\n"
"                   const char *device,\n"
"                   int mbytes);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3850 ../fish/guestfish-actions.pod:2620
msgid ""
"This resizes (expands or shrinks) an existing LVM logical volume to "
"C<mbytes>.  When reducing, data in the reduced part is lost."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3858
msgid "guestfs_lvresize_free"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3860
#, no-wrap
msgid ""
" int\n"
" guestfs_lvresize_free (guestfs_h *g,\n"
"                        const char *lv,\n"
"                        int percent);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3865 ../fish/guestfish-actions.pod:2628
msgid ""
"This expands an existing logical volume C<lv> so that it fills C<pc>% of the "
"remaining free space in the volume group.  Commonly you would call this with "
"pc = 100 which expands the logical volume as much as possible, using all "
"remaining free space in the volume group."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3873
msgid "(Added in 1.3.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3875
msgid "guestfs_lvs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3877
#, no-wrap
msgid ""
" char **\n"
" guestfs_lvs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3880 ../fish/guestfish-actions.pod:2638
msgid ""
"List all the logical volumes detected.  This is the equivalent of the "
"L<lvs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3883 ../fish/guestfish-actions.pod:2641
msgid ""
"This returns a list of the logical volume device names "
"(eg. C</dev/VolGroup00/LogVol00>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3886
msgid "See also C<guestfs_lvs_full>, C<guestfs_list_filesystems>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3894
msgid "guestfs_lvs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3896
#, no-wrap
msgid ""
" struct guestfs_lvm_lv_list *\n"
" guestfs_lvs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3899 ../fish/guestfish-actions.pod:2650
msgid ""
"List all the logical volumes detected.  This is the equivalent of the "
"L<lvs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3902
msgid ""
"This function returns a C<struct guestfs_lvm_lv_list *>, or NULL if there "
"was an error.  I<The caller must call C<guestfs_free_lvm_lv_list> after "
"use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3908
msgid "guestfs_lvuuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3910
#, no-wrap
msgid ""
" char *\n"
" guestfs_lvuuid (guestfs_h *g,\n"
"                 const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3914 ../fish/guestfish-actions.pod:2657
msgid "This command returns the UUID of the LVM LV C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3921
msgid "guestfs_lxattrlist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3923
#, no-wrap
msgid ""
" struct guestfs_xattr_list *\n"
" guestfs_lxattrlist (guestfs_h *g,\n"
"                     const char *path,\n"
"                     char *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3928 ../fish/guestfish-actions.pod:2663
msgid ""
"This call allows you to get the extended attributes of multiple files, where "
"all files are in the directory C<path>.  C<names> is the list of files from "
"this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3932 ../fish/guestfish-actions.pod:2667
msgid ""
"On return you get a flat list of xattr structs which must be interpreted "
"sequentially.  The first xattr struct always has a zero-length C<attrname>.  "
"C<attrval> in this struct is zero-length to indicate there was an error "
"doing C<lgetxattr> for this file, I<or> is a C string which is a decimal "
"number (the number of following attributes for this file, which could be "
"C<\"0\">).  Then after the first xattr struct are the zero or more "
"attributes for the first named file.  This repeats for the second and "
"subsequent files."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3942
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also C<guestfs_lstatlist> for "
"a similarly efficient call for getting standard stats.  Very long directory "
"listings might cause the protocol message size to be exceeded, causing this "
"call to fail.  The caller must split up such requests into smaller groups of "
"names."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3956
msgid "guestfs_mkdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3958
#, no-wrap
msgid ""
" int\n"
" guestfs_mkdir (guestfs_h *g,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3962 ../fish/guestfish-actions.pod:2689
msgid "Create a directory named C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3968
msgid "guestfs_mkdir_mode"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3970
#, no-wrap
msgid ""
" int\n"
" guestfs_mkdir_mode (guestfs_h *g,\n"
"                     const char *path,\n"
"                     int mode);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3975 ../fish/guestfish-actions.pod:2695
msgid ""
"This command creates a directory, setting the initial permissions of the "
"directory to C<mode>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3978 ../fish/guestfish-actions.pod:2698
msgid ""
"For common Linux filesystems, the actual mode which is set will be C<mode & "
"~umask & 01777>.  Non-native-Linux filesystems may interpret the mode in "
"other ways."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3982
msgid "See also C<guestfs_mkdir>, C<guestfs_umask>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3988
msgid "guestfs_mkdir_p"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3990
#, no-wrap
msgid ""
" int\n"
" guestfs_mkdir_p (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3994 ../fish/guestfish-actions.pod:2708
msgid ""
"Create a directory named C<path>, creating any parent directories as "
"necessary.  This is like the C<mkdir -p> shell command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4001
msgid "guestfs_mkdtemp"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4003
#, no-wrap
msgid ""
" char *\n"
" guestfs_mkdtemp (guestfs_h *g,\n"
"                  const char *template);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4007 ../fish/guestfish-actions.pod:2715
msgid ""
"This command creates a temporary directory.  The C<template> parameter "
"should be a full pathname for the temporary directory name with the final "
"six characters being \"XXXXXX\"."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4012 ../fish/guestfish-actions.pod:2720
msgid ""
"For example: \"/tmp/myprogXXXXXX\" or \"/Temp/myprogXXXXXX\", the second one "
"being suitable for Windows filesystems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4015 ../fish/guestfish-actions.pod:2723
msgid "The name of the temporary directory that was created is returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4018 ../fish/guestfish-actions.pod:2726
msgid "The temporary directory is created with mode 0700 and is owned by root."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4021 ../fish/guestfish-actions.pod:2729
msgid ""
"The caller is responsible for deleting the temporary directory and its "
"contents after use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4024 ../fish/guestfish-actions.pod:2732
msgid "See also: L<mkdtemp(3)>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4031
msgid "guestfs_mke2fs_J"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4033
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2fs_J (guestfs_h *g,\n"
"                   const char *fstype,\n"
"                   int blocksize,\n"
"                   const char *device,\n"
"                   const char *journal);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4040 ../fish/guestfish-actions.pod:2738
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"C<journal>.  It is equivalent to the command:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4044 ../fish/guestfish-actions.pod:2742
#, no-wrap
msgid ""
" mke2fs -t fstype -b blocksize -J device=<journal> <device>\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4046
msgid "See also C<guestfs_mke2journal>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4050 ../src/guestfs-actions.pod:4068 ../src/guestfs-actions.pod:4086 ../src/guestfs-actions.pod:4102 ../src/guestfs-actions.pod:4116 ../src/guestfs-actions.pod:4130 ../src/guestfs-actions.pod:4189 ../src/guestfs-actions.pod:4438
msgid "(Added in 1.0.68)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4052
msgid "guestfs_mke2fs_JL"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4054
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2fs_JL (guestfs_h *g,\n"
"                    const char *fstype,\n"
"                    int blocksize,\n"
"                    const char *device,\n"
"                    const char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4061 ../fish/guestfish-actions.pod:2750
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"the journal labeled C<label>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4064
msgid "See also C<guestfs_mke2journal_L>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4070
msgid "guestfs_mke2fs_JU"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4072
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2fs_JU (guestfs_h *g,\n"
"                    const char *fstype,\n"
"                    int blocksize,\n"
"                    const char *device,\n"
"                    const char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4079 ../fish/guestfish-actions.pod:2759
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"the journal with UUID C<uuid>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4082
msgid "See also C<guestfs_mke2journal_U>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4088
msgid "guestfs_mke2journal"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4090
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2journal (guestfs_h *g,\n"
"                      int blocksize,\n"
"                      const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4095 ../fish/guestfish-actions.pod:2768
msgid ""
"This creates an ext2 external journal on C<device>.  It is equivalent to the "
"command:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4098 ../fish/guestfish-actions.pod:2771
#, no-wrap
msgid ""
" mke2fs -O journal_dev -b blocksize device\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4104
msgid "guestfs_mke2journal_L"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4106
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2journal_L (guestfs_h *g,\n"
"                        int blocksize,\n"
"                        const char *label,\n"
"                        const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4112 ../fish/guestfish-actions.pod:2777
msgid "This creates an ext2 external journal on C<device> with label C<label>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4118
msgid "guestfs_mke2journal_U"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4120
#, no-wrap
msgid ""
" int\n"
" guestfs_mke2journal_U (guestfs_h *g,\n"
"                        int blocksize,\n"
"                        const char *uuid,\n"
"                        const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4126 ../fish/guestfish-actions.pod:2783
msgid "This creates an ext2 external journal on C<device> with UUID C<uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4132
msgid "guestfs_mkfifo"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4134
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfifo (guestfs_h *g,\n"
"                 int mode,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4139
msgid ""
"This call creates a FIFO (named pipe) called C<path> with mode C<mode>.  It "
"is just a convenient wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4149
msgid "guestfs_mkfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4151
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfs (guestfs_h *g,\n"
"               const char *fstype,\n"
"               const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4156 ../fish/guestfish-actions.pod:2799
msgid ""
"This creates a filesystem on C<device> (usually a partition or LVM logical "
"volume).  The filesystem type is C<fstype>, for example C<ext3>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4164
msgid "guestfs_mkfs_b"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4166
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfs_b (guestfs_h *g,\n"
"                 const char *fstype,\n"
"                 int blocksize,\n"
"                 const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4172
msgid ""
"This call is similar to C<guestfs_mkfs>, but it allows you to control the "
"block size of the resulting filesystem.  Supported block sizes depend on the "
"filesystem type, but typically they are C<1024>, C<2048> or C<4096> only."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4177 ../src/guestfs-actions.pod:4219 ../fish/guestfish-actions.pod:2812 ../fish/guestfish-actions.pod:2839
msgid ""
"For VFAT and NTFS the C<blocksize> parameter is treated as the requested "
"cluster size."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4182 ../fish/guestfish-actions.pod:2815
msgid ""
"This function is deprecated.  In new code, use the C<mkfs_opts> call "
"instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4191
msgid "guestfs_mkfs_opts"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4193
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfs_opts (guestfs_h *g,\n"
"                    const char *fstype,\n"
"                    const char *device,\n"
"                    ...);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4204
#, no-wrap
msgid ""
" GUESTFS_MKFS_OPTS_BLOCKSIZE, int blocksize,\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4206 ../fish/guestfish-actions.pod:2826
msgid ""
"This function creates a filesystem on C<device>.  The filesystem type is "
"C<fstype>, for example C<ext3>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4213 ../fish/guestfish-actions.pod:2833
msgid "C<blocksize>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4215 ../fish/guestfish-actions.pod:2835
msgid ""
"The filesystem block size.  Supported block sizes depend on the filesystem "
"type, but typically they are C<1024>, C<2048> or C<4096> for Linux ext2/3 "
"filesystems."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4226
msgid "guestfs_mkfs_opts_va"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4228
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfs_opts_va (guestfs_h *g,\n"
"                       const char *fstype,\n"
"                       const char *device,\n"
"                       va_list args);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4234
msgid "This is the \"va_list variant\" of L</guestfs_mkfs_opts>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4238
msgid "guestfs_mkfs_opts_argv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4240
#, no-wrap
msgid ""
" int\n"
" guestfs_mkfs_opts_argv (guestfs_h *g,\n"
"                         const char *fstype,\n"
"                         const char *device,\n"
"                         const struct guestfs_mkfs_opts_argv *optargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4246
msgid "This is the \"argv variant\" of L</guestfs_mkfs_opts>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4250
msgid "guestfs_mkmountpoint"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4252
#, no-wrap
msgid ""
" int\n"
" guestfs_mkmountpoint (guestfs_h *g,\n"
"                       const char *exemptpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4256
msgid ""
"C<guestfs_mkmountpoint> and C<guestfs_rmmountpoint> are specialized calls "
"that can be used to create extra mountpoints before mounting the first "
"filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4260 ../fish/guestfish-actions.pod:2854
msgid ""
"These calls are I<only> necessary in some very limited circumstances, mainly "
"the case where you want to mount a mix of unrelated and/or read-only "
"filesystems together."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4264 ../fish/guestfish-actions.pod:2858
msgid ""
"For example, live CDs often contain a \"Russian doll\" nest of filesystems, "
"an ISO outer layer, with a squashfs image inside, with an ext2/3 image "
"inside that.  You can unpack this as follows in guestfish:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4269 ../fish/guestfish-actions.pod:2863
#, no-wrap
msgid ""
" add-ro Fedora-11-i686-Live.iso\n"
" run\n"
" mkmountpoint /cd\n"
" mkmountpoint /sqsh\n"
" mkmountpoint /ext3fs\n"
" mount /dev/sda /cd\n"
" mount-loop /cd/LiveOS/squashfs.img /sqsh\n"
" mount-loop /sqsh/LiveOS/ext3fs.img /ext3fs\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4278 ../fish/guestfish-actions.pod:2872
msgid "The inner filesystem is now unpacked under the /ext3fs mountpoint."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4280
msgid ""
"C<guestfs_mkmountpoint> is not compatible with C<guestfs_umount_all>.  You "
"may get unexpected errors if you try to mix these calls.  It is safest to "
"manually unmount filesystems and remove mountpoints after use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4284
msgid ""
"C<guestfs_umount_all> unmounts filesystems by sorting the paths longest "
"first, so for this to work for manual mountpoints, you must ensure that the "
"innermost mountpoints have the longest pathnames, as in the example code "
"above."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4289 ../fish/guestfish-actions.pod:2883
msgid "For more details see L<https://bugzilla.redhat.com/show_bug.cgi?id=599503>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4291
msgid ""
"Autosync [see C<guestfs_set_autosync>, this is set by default on handles] "
"means that C<guestfs_umount_all> is called when the handle is closed which "
"can also trigger these issues."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4297 ../src/guestfs-actions.pod:4556 ../src/guestfs-actions.pod:5449
msgid "(Added in 1.0.62)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4299
msgid "guestfs_mknod"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4301
#, no-wrap
msgid ""
" int\n"
" guestfs_mknod (guestfs_h *g,\n"
"                int mode,\n"
"                int devmajor,\n"
"                int devminor,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4308 ../fish/guestfish-actions.pod:2893
msgid ""
"This call creates block or character special devices, or named pipes "
"(FIFOs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4311 ../fish/guestfish-actions.pod:2896
msgid ""
"The C<mode> parameter should be the mode, using the standard constants.  "
"C<devmajor> and C<devminor> are the device major and minor numbers, only "
"used when creating block and character special devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4316
msgid ""
"Note that, just like L<mknod(2)>, the mode must be bitwise OR'd with "
"S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a "
"regular file).  These constants are available in the standard Linux header "
"files, or you can use C<guestfs_mknod_b>, C<guestfs_mknod_c> or "
"C<guestfs_mkfifo> which are wrappers around this command which bitwise OR in "
"the appropriate constant for you."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4330
msgid "guestfs_mknod_b"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4332
#, no-wrap
msgid ""
" int\n"
" guestfs_mknod_b (guestfs_h *g,\n"
"                  int mode,\n"
"                  int devmajor,\n"
"                  int devminor,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4339
msgid ""
"This call creates a block device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4349
msgid "guestfs_mknod_c"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4351
#, no-wrap
msgid ""
" int\n"
" guestfs_mknod_c (guestfs_h *g,\n"
"                  int mode,\n"
"                  int devmajor,\n"
"                  int devminor,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4358
msgid ""
"This call creates a char device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4368
msgid "guestfs_mkswap"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4370
#, no-wrap
msgid ""
" int\n"
" guestfs_mkswap (guestfs_h *g,\n"
"                 const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4374 ../fish/guestfish-actions.pod:2935
msgid "Create a swap partition on C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4380
msgid "guestfs_mkswap_L"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4382
#, no-wrap
msgid ""
" int\n"
" guestfs_mkswap_L (guestfs_h *g,\n"
"                   const char *label,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4387 ../fish/guestfish-actions.pod:2941
msgid "Create a swap partition on C<device> with label C<label>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4389 ../fish/guestfish-actions.pod:2943
msgid ""
"Note that you cannot attach a swap label to a block device "
"(eg. C</dev/sda>), just to a partition.  This appears to be a limitation of "
"the kernel or swap tools."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4397
msgid "guestfs_mkswap_U"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4399
#, no-wrap
msgid ""
" int\n"
" guestfs_mkswap_U (guestfs_h *g,\n"
"                   const char *uuid,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4404 ../fish/guestfish-actions.pod:2951
msgid "Create a swap partition on C<device> with UUID C<uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4410
msgid "guestfs_mkswap_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4412
#, no-wrap
msgid ""
" int\n"
" guestfs_mkswap_file (guestfs_h *g,\n"
"                      const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4416 ../fish/guestfish-actions.pod:2957
msgid "Create a swap file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4418
msgid ""
"This command just writes a swap file signature to an existing file.  To "
"create the file itself, use something like C<guestfs_fallocate>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4425
msgid "guestfs_modprobe"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4427
#, no-wrap
msgid ""
" int\n"
" guestfs_modprobe (guestfs_h *g,\n"
"                   const char *modulename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4431 ../fish/guestfish-actions.pod:2966
msgid "This loads a kernel module in the appliance."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4433 ../fish/guestfish-actions.pod:2968
msgid ""
"The kernel module must have been whitelisted when libguestfs was built (see "
"C<appliance/kmod.whitelist.in> in the source)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4440
msgid "guestfs_mount"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4442
#, no-wrap
msgid ""
" int\n"
" guestfs_mount (guestfs_h *g,\n"
"                const char *device,\n"
"                const char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4447 ../fish/guestfish-actions.pod:2975
msgid ""
"Mount a guest disk at a position in the filesystem.  Block devices are named "
"C</dev/sda>, C</dev/sdb> and so on, as they were added to the guest.  If "
"those block devices contain partitions, they will have the usual names "
"(eg. C</dev/sda1>).  Also LVM C</dev/VG/LV>-style names can be used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4453 ../fish/guestfish-actions.pod:2981
msgid ""
"The rules are the same as for L<mount(2)>: A filesystem must first be "
"mounted on C</> before others can be mounted.  Other filesystems can only be "
"mounted on directories which already exist."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4458 ../fish/guestfish-actions.pod:2986
msgid ""
"The mounted filesystem is writable, if we have sufficient permissions on the "
"underlying device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4461
msgid ""
"B<Important note:> When you use this call, the filesystem options C<sync> "
"and C<noatime> are set implicitly.  This was originally done because we "
"thought it would improve reliability, but it turns out that I<-o sync> has a "
"very large negative performance impact and negligible effect on "
"reliability.  Therefore we recommend that you avoid using C<guestfs_mount> "
"in any code that needs performance, and instead use C<guestfs_mount_options> "
"(use an empty string for the first parameter if you don't want any options)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4475
msgid "guestfs_mount_loop"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4477
#, no-wrap
msgid ""
" int\n"
" guestfs_mount_loop (guestfs_h *g,\n"
"                     const char *file,\n"
"                     const char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4482 ../fish/guestfish-actions.pod:3003
msgid ""
"This command lets you mount C<file> (a filesystem image in a file) on a "
"mount point.  It is entirely equivalent to the command C<mount -o loop file "
"mountpoint>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4490
msgid "guestfs_mount_options"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4492
#, no-wrap
msgid ""
" int\n"
" guestfs_mount_options (guestfs_h *g,\n"
"                        const char *options,\n"
"                        const char *device,\n"
"                        const char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4498
msgid ""
"This is the same as the C<guestfs_mount> command, but it allows you to set "
"the mount options as for the L<mount(8)> I<-o> flag."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4502 ../fish/guestfish-actions.pod:3015
msgid ""
"If the C<options> parameter is an empty string, then no options are passed "
"(all options default to whatever the filesystem uses)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4508 ../src/guestfs-actions.pod:4522 ../src/guestfs-actions.pod:4539
msgid "(Added in 1.0.10)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4510
msgid "guestfs_mount_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4512
#, no-wrap
msgid ""
" int\n"
" guestfs_mount_ro (guestfs_h *g,\n"
"                   const char *device,\n"
"                   const char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4517
msgid ""
"This is the same as the C<guestfs_mount> command, but it mounts the "
"filesystem with the read-only (I<-o ro>) flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4524
msgid "guestfs_mount_vfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4526
#, no-wrap
msgid ""
" int\n"
" guestfs_mount_vfs (guestfs_h *g,\n"
"                    const char *options,\n"
"                    const char *vfstype,\n"
"                    const char *device,\n"
"                    const char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4533
msgid ""
"This is the same as the C<guestfs_mount> command, but it allows you to set "
"both the mount options and the vfstype as for the L<mount(8)> I<-o> and "
"I<-t> flags."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4541
msgid "guestfs_mountpoints"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4543
#, no-wrap
msgid ""
" char **\n"
" guestfs_mountpoints (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4546
msgid ""
"This call is similar to C<guestfs_mounts>.  That call returns a list of "
"devices.  This one returns a hash table (map) of device name to directory "
"where the device is mounted."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4558
msgid "guestfs_mounts"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4560
#, no-wrap
msgid ""
" char **\n"
" guestfs_mounts (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4563 ../fish/guestfish-actions.pod:3046
msgid ""
"This returns the list of currently mounted filesystems.  It returns the list "
"of devices (eg. C</dev/sda1>, C</dev/VG/LV>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4566 ../fish/guestfish-actions.pod:3049
msgid "Some internal mounts are not shown."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4568
msgid "See also: C<guestfs_mountpoints>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4576
msgid "guestfs_mv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4578
#, no-wrap
msgid ""
" int\n"
" guestfs_mv (guestfs_h *g,\n"
"             const char *src,\n"
"             const char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4583 ../fish/guestfish-actions.pod:3057
msgid ""
"This moves a file from C<src> to C<dest> where C<dest> is either a "
"destination filename or destination directory."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4590
msgid "guestfs_ntfs_3g_probe"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4592
#, no-wrap
msgid ""
" int\n"
" guestfs_ntfs_3g_probe (guestfs_h *g,\n"
"                        int rw,\n"
"                        const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4597 ../fish/guestfish-actions.pod:3064
msgid ""
"This command runs the L<ntfs-3g.probe(8)> command which probes an NTFS "
"C<device> for mountability.  (Not all NTFS volumes can be mounted "
"read-write, and some cannot be mounted at all)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4601 ../fish/guestfish-actions.pod:3068
msgid ""
"C<rw> is a boolean flag.  Set it to true if you want to test if the volume "
"can be mounted read-write.  Set it to false if you want to test if the "
"volume can be mounted read-only."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4605 ../fish/guestfish-actions.pod:3072
msgid ""
"The return value is an integer which C<0> if the operation would succeed, or "
"some non-zero value documented in the L<ntfs-3g.probe(8)> manual page."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4611
msgid "(Added in 1.0.43)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4613
msgid "guestfs_ntfsresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4615
#, no-wrap
msgid ""
" int\n"
" guestfs_ntfsresize (guestfs_h *g,\n"
"                     const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4619 ../fish/guestfish-actions.pod:3080
msgid ""
"This command resizes an NTFS filesystem, expanding or shrinking it to the "
"size of the underlying device.  See also L<ntfsresize(8)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4627
msgid "guestfs_ntfsresize_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4629
#, no-wrap
msgid ""
" int\n"
" guestfs_ntfsresize_size (guestfs_h *g,\n"
"                          const char *device,\n"
"                          int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4634
msgid ""
"This command is the same as C<guestfs_ntfsresize> except that it allows you "
"to specify the new size (in bytes) explicitly."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4639 ../src/guestfs-actions.pod:5075 ../src/guestfs-actions.pod:5148 ../src/guestfs-actions.pod:5397
msgid "(Added in 1.3.14)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4641
msgid "guestfs_part_add"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4643
#, no-wrap
msgid ""
" int\n"
" guestfs_part_add (guestfs_h *g,\n"
"                   const char *device,\n"
"                   const char *prlogex,\n"
"                   int64_t startsect,\n"
"                   int64_t endsect);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4650
msgid ""
"This command adds a partition to C<device>.  If there is no partition table "
"on the device, call C<guestfs_part_init> first."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4653 ../fish/guestfish-actions.pod:3098
msgid ""
"The C<prlogex> parameter is the type of partition.  Normally you should pass "
"C<p> or C<primary> here, but MBR partition tables also support C<l> (or "
"C<logical>) and C<e> (or C<extended>) partition types."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4658 ../fish/guestfish-actions.pod:3103
msgid ""
"C<startsect> and C<endsect> are the start and end of the partition in "
"I<sectors>.  C<endsect> may be negative, which means it counts backwards "
"from the end of the disk (C<-1> is the last sector)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4662
msgid ""
"Creating a partition which covers the whole disk is not so easy.  Use "
"C<guestfs_part_disk> to do that."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4667 ../src/guestfs-actions.pod:4705 ../src/guestfs-actions.pod:4758 ../src/guestfs-actions.pod:4836 ../src/guestfs-actions.pod:4874 ../src/guestfs-actions.pod:4893 ../src/guestfs-actions.pod:4933
msgid "(Added in 1.0.78)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4669
msgid "guestfs_part_del"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4671
#, no-wrap
msgid ""
" int\n"
" guestfs_part_del (guestfs_h *g,\n"
"                   const char *device,\n"
"                   int partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4676 ../fish/guestfish-actions.pod:3114
msgid "This command deletes the partition numbered C<partnum> on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4678 ../fish/guestfish-actions.pod:3116
msgid ""
"Note that in the case of MBR partitioning, deleting an extended partition "
"also deletes any logical partitions it contains."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4686
msgid "guestfs_part_disk"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4688
#, no-wrap
msgid ""
" int\n"
" guestfs_part_disk (guestfs_h *g,\n"
"                    const char *device,\n"
"                    const char *parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4693
msgid ""
"This command is simply a combination of C<guestfs_part_init> followed by "
"C<guestfs_part_add> to create a single primary partition covering the whole "
"disk."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4697
msgid ""
"C<parttype> is the partition table type, usually C<mbr> or C<gpt>, but other "
"possible values are described in C<guestfs_part_init>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4707
msgid "guestfs_part_get_bootable"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4709
#, no-wrap
msgid ""
" int\n"
" guestfs_part_get_bootable (guestfs_h *g,\n"
"                            const char *device,\n"
"                            int partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4714 ../fish/guestfish-actions.pod:3138
msgid ""
"This command returns true if the partition C<partnum> on C<device> has the "
"bootable flag set."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4717
msgid "See also C<guestfs_part_set_bootable>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4723
msgid "guestfs_part_get_mbr_id"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4725
#, no-wrap
msgid ""
" int\n"
" guestfs_part_get_mbr_id (guestfs_h *g,\n"
"                          const char *device,\n"
"                          int partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4730 ../fish/guestfish-actions.pod:3147
msgid ""
"Returns the MBR type byte (also known as the ID byte) from the numbered "
"partition C<partnum>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4733 ../src/guestfs-actions.pod:4909
msgid ""
"Note that only MBR (old DOS-style) partitions have type bytes.  You will get "
"undefined results for other partition table types (see "
"C<guestfs_part_get_parttype>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4741
msgid "guestfs_part_get_parttype"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4743
#, no-wrap
msgid ""
" char *\n"
" guestfs_part_get_parttype (guestfs_h *g,\n"
"                            const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4747 ../fish/guestfish-actions.pod:3158
msgid ""
"This command examines the partition table on C<device> and returns the "
"partition table type (format) being used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4750
msgid ""
"Common return values include: C<msdos> (a DOS/Windows style MBR partition "
"table), C<gpt> (a GPT/EFI-style partition table).  Other values are "
"possible, although unusual.  See C<guestfs_part_init> for a full list."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4760
msgid "guestfs_part_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4762
#, no-wrap
msgid ""
" int\n"
" guestfs_part_init (guestfs_h *g,\n"
"                    const char *device,\n"
"                    const char *parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4767 ../fish/guestfish-actions.pod:3170
msgid ""
"This creates an empty partition table on C<device> of one of the partition "
"types listed below.  Usually C<parttype> should be either C<msdos> or C<gpt> "
"(for large disks)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4771
msgid ""
"Initially there are no partitions.  Following this, you should call "
"C<guestfs_part_add> for each partition required."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4774 ../fish/guestfish-actions.pod:3177
msgid "Possible values for C<parttype> are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4778 ../fish/guestfish-actions.pod:3181
msgid "B<efi> | B<gpt>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4780 ../fish/guestfish-actions.pod:3183
msgid "Intel EFI / GPT partition table."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4782 ../fish/guestfish-actions.pod:3185
msgid ""
"This is recommended for >= 2 TB partitions that will be accessed from Linux "
"and Intel-based Mac OS X.  It also has limited backwards compatibility with "
"the C<mbr> format."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4786 ../fish/guestfish-actions.pod:3189
msgid "B<mbr> | B<msdos>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4788 ../fish/guestfish-actions.pod:3191
msgid ""
"The standard PC \"Master Boot Record\" (MBR) format used by MS-DOS and "
"Windows.  This partition type will B<only> work for device sizes up to 2 "
"TB.  For large disks we recommend using C<gpt>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4795 ../fish/guestfish-actions.pod:3198
msgid "Other partition table types that may work but are not supported include:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4800 ../fish/guestfish-actions.pod:3203
msgid "B<aix>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4802 ../fish/guestfish-actions.pod:3205
msgid "AIX disk labels."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4804 ../fish/guestfish-actions.pod:3207
msgid "B<amiga> | B<rdb>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4806 ../fish/guestfish-actions.pod:3209
msgid "Amiga \"Rigid Disk Block\" format."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4808 ../fish/guestfish-actions.pod:3211
msgid "B<bsd>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4810 ../fish/guestfish-actions.pod:3213
msgid "BSD disk labels."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4812 ../fish/guestfish-actions.pod:3215
msgid "B<dasd>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4814 ../fish/guestfish-actions.pod:3217
msgid "DASD, used on IBM mainframes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4816 ../fish/guestfish-actions.pod:3219
msgid "B<dvh>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4818 ../fish/guestfish-actions.pod:3221
msgid "MIPS/SGI volumes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4820 ../fish/guestfish-actions.pod:3223
msgid "B<mac>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4822 ../fish/guestfish-actions.pod:3225
msgid "Old Mac partition format.  Modern Macs use C<gpt>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4824 ../fish/guestfish-actions.pod:3227
msgid "B<pc98>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4826 ../fish/guestfish-actions.pod:3229
msgid "NEC PC-98 format, common in Japan apparently."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4828 ../fish/guestfish-actions.pod:3231
msgid "B<sun>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4830 ../fish/guestfish-actions.pod:3233
msgid "Sun disk labels."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4838
msgid "guestfs_part_list"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4840
#, no-wrap
msgid ""
" struct guestfs_partition_list *\n"
" guestfs_part_list (guestfs_h *g,\n"
"                    const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4844 ../fish/guestfish-actions.pod:3241
msgid ""
"This command parses the partition table on C<device> and returns the list of "
"partitions found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4847 ../fish/guestfish-actions.pod:3244
msgid "The fields in the returned structure are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4851 ../fish/guestfish-actions.pod:3248
msgid "B<part_num>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4853 ../fish/guestfish-actions.pod:3250
msgid "Partition number, counting from 1."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4855 ../fish/guestfish-actions.pod:3252
msgid "B<part_start>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4857
msgid ""
"Start of the partition I<in bytes>.  To get sectors you have to divide by "
"the device's sector size, see C<guestfs_blockdev_getss>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4860 ../fish/guestfish-actions.pod:3257
msgid "B<part_end>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4862 ../fish/guestfish-actions.pod:3259
msgid "End of the partition in bytes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4864 ../fish/guestfish-actions.pod:3261
msgid "B<part_size>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4866 ../fish/guestfish-actions.pod:3263
msgid "Size of the partition in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4870
msgid ""
"This function returns a C<struct guestfs_partition_list *>, or NULL if there "
"was an error.  I<The caller must call C<guestfs_free_partition_list> after "
"use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4876
msgid "guestfs_part_set_bootable"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4878
#, no-wrap
msgid ""
" int\n"
" guestfs_part_set_bootable (guestfs_h *g,\n"
"                            const char *device,\n"
"                            int partnum,\n"
"                            int bootable);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4884 ../fish/guestfish-actions.pod:3271
msgid ""
"This sets the bootable flag on partition numbered C<partnum> on device "
"C<device>.  Note that partitions are numbered from 1."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4887 ../fish/guestfish-actions.pod:3274
msgid ""
"The bootable flag is used by some operating systems (notably Windows) to "
"determine which partition to boot from.  It is by no means universally "
"recognized."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4895
msgid "guestfs_part_set_mbr_id"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4897
#, no-wrap
msgid ""
" int\n"
" guestfs_part_set_mbr_id (guestfs_h *g,\n"
"                          const char *device,\n"
"                          int partnum,\n"
"                          int idbyte);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4903 ../fish/guestfish-actions.pod:3282
msgid ""
"Sets the MBR type byte (also known as the ID byte) of the numbered partition "
"C<partnum> to C<idbyte>.  Note that the type bytes quoted in most "
"documentation are in fact hexadecimal numbers, but usually documented "
"without any leading \"0x\" which might be confusing."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4917
msgid "guestfs_part_set_name"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4919
#, no-wrap
msgid ""
" int\n"
" guestfs_part_set_name (guestfs_h *g,\n"
"                        const char *device,\n"
"                        int partnum,\n"
"                        const char *name);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4925 ../fish/guestfish-actions.pod:3296
msgid ""
"This sets the partition name on partition numbered C<partnum> on device "
"C<device>.  Note that partitions are numbered from 1."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4928 ../fish/guestfish-actions.pod:3299
msgid ""
"The partition name can only be set on certain types of partition table.  "
"This works on C<gpt> but not on C<mbr> partitions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4935
msgid "guestfs_part_to_dev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4937
#, no-wrap
msgid ""
" char *\n"
" guestfs_part_to_dev (guestfs_h *g,\n"
"                      const char *partition);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4941 ../fish/guestfish-actions.pod:3306
msgid ""
"This function takes a partition name (eg. \"/dev/sdb1\") and removes the "
"partition number, returning the device name (eg. \"/dev/sdb\")."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4945
msgid ""
"The named partition must exist, for example as a string returned from "
"C<guestfs_list_partitions>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4953
msgid "guestfs_ping_daemon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4955
#, no-wrap
msgid ""
" int\n"
" guestfs_ping_daemon (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4958 ../fish/guestfish-actions.pod:3317
msgid ""
"This is a test probe into the guestfs daemon running inside the qemu "
"subprocess.  Calling this function checks that the daemon responds to the "
"ping message, without affecting the daemon or attached block device(s) in "
"any other way."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4967
msgid "guestfs_pread"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4969
#, no-wrap
msgid ""
" char *\n"
" guestfs_pread (guestfs_h *g,\n"
"                const char *path,\n"
"                int count,\n"
"                int64_t offset,\n"
"                size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4976 ../fish/guestfish-actions.pod:3326
msgid ""
"This command lets you read part of a file.  It reads C<count> bytes of the "
"file, starting at C<offset>, from file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4979 ../src/guestfs-actions.pod:5005 ../fish/guestfish-actions.pod:3329 ../fish/guestfish-actions.pod:3344
msgid ""
"This may read fewer bytes than requested.  For further details see the "
"L<pread(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4982
msgid "See also C<guestfs_pwrite>, C<guestfs_pread_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4993
msgid "guestfs_pread_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4995
#, no-wrap
msgid ""
" char *\n"
" guestfs_pread_device (guestfs_h *g,\n"
"                       const char *device,\n"
"                       int count,\n"
"                       int64_t offset,\n"
"                       size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5002 ../fish/guestfish-actions.pod:3341
msgid ""
"This command lets you read part of a file.  It reads C<count> bytes of "
"C<device>, starting at C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5008
msgid "See also C<guestfs_pread>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5017
msgid "(Added in 1.5.21)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5019
msgid "guestfs_pvcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5021
#, no-wrap
msgid ""
" int\n"
" guestfs_pvcreate (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5025 ../fish/guestfish-actions.pod:3356
msgid ""
"This creates an LVM physical volume on the named C<device>, where C<device> "
"should usually be a partition name such as C</dev/sda1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5033
msgid "guestfs_pvremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5035
#, no-wrap
msgid ""
" int\n"
" guestfs_pvremove (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5039 ../fish/guestfish-actions.pod:3364
msgid ""
"This wipes a physical volume C<device> so that LVM will no longer recognise "
"it."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5042 ../fish/guestfish-actions.pod:3367
msgid ""
"The implementation uses the C<pvremove> command which refuses to wipe "
"physical volumes that contain any volume groups, so you have to remove those "
"first."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5050
msgid "guestfs_pvresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5052
#, no-wrap
msgid ""
" int\n"
" guestfs_pvresize (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5056 ../fish/guestfish-actions.pod:3375
msgid ""
"This resizes (expands or shrinks) an existing LVM physical volume to match "
"the new size of the underlying device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5063
msgid "guestfs_pvresize_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5065
#, no-wrap
msgid ""
" int\n"
" guestfs_pvresize_size (guestfs_h *g,\n"
"                        const char *device,\n"
"                        int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5070
msgid ""
"This command is the same as C<guestfs_pvresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5077
msgid "guestfs_pvs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5079
#, no-wrap
msgid ""
" char **\n"
" guestfs_pvs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5082 ../fish/guestfish-actions.pod:3389
msgid ""
"List all the physical volumes detected.  This is the equivalent of the "
"L<pvs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5085 ../fish/guestfish-actions.pod:3392
msgid ""
"This returns a list of just the device names that contain PVs "
"(eg. C</dev/sda2>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5088
msgid "See also C<guestfs_pvs_full>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5096
msgid "guestfs_pvs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5098
#, no-wrap
msgid ""
" struct guestfs_lvm_pv_list *\n"
" guestfs_pvs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5101 ../fish/guestfish-actions.pod:3401
msgid ""
"List all the physical volumes detected.  This is the equivalent of the "
"L<pvs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5104
msgid ""
"This function returns a C<struct guestfs_lvm_pv_list *>, or NULL if there "
"was an error.  I<The caller must call C<guestfs_free_lvm_pv_list> after "
"use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5110
msgid "guestfs_pvuuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5112
#, no-wrap
msgid ""
" char *\n"
" guestfs_pvuuid (guestfs_h *g,\n"
"                 const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5116 ../fish/guestfish-actions.pod:3408
msgid "This command returns the UUID of the LVM PV C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5123
msgid "guestfs_pwrite"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5125
#, no-wrap
msgid ""
" int\n"
" guestfs_pwrite (guestfs_h *g,\n"
"                 const char *path,\n"
"                 const char *content,\n"
"                 size_t content_size,\n"
"                 int64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5132 ../fish/guestfish-actions.pod:3414
msgid ""
"This command writes to part of a file.  It writes the data buffer C<content> "
"to the file C<path> starting at offset C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5135 ../fish/guestfish-actions.pod:3417
msgid ""
"This command implements the L<pwrite(2)> system call, and like that system "
"call it may not write the full data requested.  The return value is the "
"number of bytes that were actually written to the file.  This could even be "
"0, although short writes are unlikely for regular files in ordinary "
"circumstances."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5141
msgid "See also C<guestfs_pread>, C<guestfs_pwrite_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5150
msgid "guestfs_pwrite_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5152
#, no-wrap
msgid ""
" int\n"
" guestfs_pwrite_device (guestfs_h *g,\n"
"                        const char *device,\n"
"                        const char *content,\n"
"                        size_t content_size,\n"
"                        int64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5159 ../fish/guestfish-actions.pod:3432
msgid ""
"This command writes to part of a device.  It writes the data buffer "
"C<content> to C<device> starting at offset C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5162 ../fish/guestfish-actions.pod:3435
msgid ""
"This command implements the L<pwrite(2)> system call, and like that system "
"call it may not write the full data requested (although short writes to disk "
"devices and partitions are probably impossible with standard Linux kernels)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5167
msgid "See also C<guestfs_pwrite>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5174
msgid "(Added in 1.5.20)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5176
msgid "guestfs_read_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5178
#, no-wrap
msgid ""
" char *\n"
" guestfs_read_file (guestfs_h *g,\n"
"                    const char *path,\n"
"                    size_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5183 ../fish/guestfish-actions.pod:3449
msgid "This calls returns the contents of the file C<path> as a buffer."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5186
msgid ""
"Unlike C<guestfs_cat>, this function can correctly handle files that contain "
"embedded ASCII NUL characters.  However unlike C<guestfs_download>, this "
"function is limited in the total size of file that can be handled."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5198
msgid "(Added in 1.0.63)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5200
msgid "guestfs_read_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5202
#, no-wrap
msgid ""
" char **\n"
" guestfs_read_lines (guestfs_h *g,\n"
"                     const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5208 ../fish/guestfish-actions.pod:3466
msgid ""
"The file contents are returned as a list of lines.  Trailing C<LF> and "
"C<CRLF> character sequences are I<not> returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5211
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of line).  For "
"those you need to use the C<guestfs_read_file> function which has a more "
"complex interface."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5222
msgid "guestfs_readdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5224
#, no-wrap
msgid ""
" struct guestfs_dirent_list *\n"
" guestfs_readdir (guestfs_h *g,\n"
"                  const char *dir);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5228 ../fish/guestfish-actions.pod:3478
msgid "This returns the list of directory entries in directory C<dir>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5230 ../fish/guestfish-actions.pod:3480
msgid ""
"All entries in the directory are returned, including C<.> and C<..>.  The "
"entries are I<not> sorted, but returned in the same order as the underlying "
"filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5234 ../fish/guestfish-actions.pod:3484
msgid ""
"Also this call returns basic file type information about each file.  The "
"C<ftyp> field will contain one of the following characters:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5239 ../fish/guestfish-actions.pod:3489
msgid "'b'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5241 ../fish/guestfish-actions.pod:3491
msgid "Block special"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5243 ../fish/guestfish-actions.pod:3493
msgid "'c'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5245 ../fish/guestfish-actions.pod:3495
msgid "Char special"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5247 ../fish/guestfish-actions.pod:3497
msgid "'d'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5249 ../fish/guestfish-actions.pod:3499
msgid "Directory"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5251 ../fish/guestfish-actions.pod:3501
msgid "'f'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5253 ../fish/guestfish-actions.pod:3503
msgid "FIFO (named pipe)"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5255 ../fish/guestfish-actions.pod:3505
msgid "'l'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5257 ../fish/guestfish-actions.pod:3507
msgid "Symbolic link"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5259 ../fish/guestfish-actions.pod:3509
msgid "'r'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5261 ../fish/guestfish-actions.pod:3511
msgid "Regular file"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5263 ../fish/guestfish-actions.pod:3513
msgid "'s'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5265 ../fish/guestfish-actions.pod:3515
msgid "Socket"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5267 ../fish/guestfish-actions.pod:3517
msgid "'u'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5269 ../fish/guestfish-actions.pod:3519
msgid "Unknown file type"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:5271 ../fish/guestfish-actions.pod:3521
msgid "'?'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5273 ../fish/guestfish-actions.pod:3523
msgid "The L<readdir(3)> call returned a C<d_type> field with an unexpected value"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5278
msgid ""
"This function is primarily intended for use by programs.  To get a simple "
"list of names, use C<guestfs_ls>.  To get a printable directory for human "
"consumption, use C<guestfs_ll>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5282
msgid ""
"This function returns a C<struct guestfs_dirent_list *>, or NULL if there "
"was an error.  I<The caller must call C<guestfs_free_dirent_list> after "
"use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5288
msgid "guestfs_readlink"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5290
#, no-wrap
msgid ""
" char *\n"
" guestfs_readlink (guestfs_h *g,\n"
"                   const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5294 ../fish/guestfish-actions.pod:3536
msgid "This command reads the target of a symbolic link."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5301
msgid "guestfs_readlinklist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5303
#, no-wrap
msgid ""
" char **\n"
" guestfs_readlinklist (guestfs_h *g,\n"
"                       const char *path,\n"
"                       char *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5308 ../fish/guestfish-actions.pod:3542
msgid ""
"This call allows you to do a C<readlink> operation on multiple files, where "
"all files are in the directory C<path>.  C<names> is the list of files from "
"this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5312 ../fish/guestfish-actions.pod:3546
msgid ""
"On return you get a list of strings, with a one-to-one correspondence to the "
"C<names> list.  Each string is the value of the symbolic link."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5316 ../fish/guestfish-actions.pod:3550
msgid ""
"If the C<readlink(2)> operation fails on any name, then the corresponding "
"result string is the empty string C<\"\">.  However the whole operation is "
"completed even if there were C<readlink(2)> errors, and so you can call this "
"function with names where you don't know if they are symbolic links already "
"(albeit slightly less efficient)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5323 ../fish/guestfish-actions.pod:3557
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  Very long directory listings "
"might cause the protocol message size to be exceeded, causing this call to "
"fail.  The caller must split up such requests into smaller groups of names."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5336
msgid "guestfs_realpath"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5338
#, no-wrap
msgid ""
" char *\n"
" guestfs_realpath (guestfs_h *g,\n"
"                   const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5342 ../fish/guestfish-actions.pod:3568
msgid ""
"Return the canonicalized absolute pathname of C<path>.  The returned path "
"has no C<.>, C<..> or symbolic link path elements."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5350
msgid "guestfs_removexattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5352
#, no-wrap
msgid ""
" int\n"
" guestfs_removexattr (guestfs_h *g,\n"
"                      const char *xattr,\n"
"                      const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5357 ../fish/guestfish-actions.pod:3575
msgid "This call removes the extended attribute named C<xattr> of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5360
msgid "See also: C<guestfs_lremovexattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5366
msgid "guestfs_resize2fs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5368
#, no-wrap
msgid ""
" int\n"
" guestfs_resize2fs (guestfs_h *g,\n"
"                    const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5372 ../fish/guestfish-actions.pod:3584
msgid ""
"This resizes an ext2, ext3 or ext4 filesystem to match the size of the "
"underlying device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5375
msgid ""
"I<Note:> It is sometimes required that you run C<guestfs_e2fsck_f> on the "
"C<device> before calling this command.  For unknown reasons C<resize2fs> "
"sometimes gives an error about this and sometimes not.  In any case, it is "
"always safe to call C<guestfs_e2fsck_f> before calling this function."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5385
msgid "guestfs_resize2fs_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5387
#, no-wrap
msgid ""
" int\n"
" guestfs_resize2fs_size (guestfs_h *g,\n"
"                         const char *device,\n"
"                         int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5392
msgid ""
"This command is the same as C<guestfs_resize2fs> except that it allows you "
"to specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5399
msgid "guestfs_rm"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5401
#, no-wrap
msgid ""
" int\n"
" guestfs_rm (guestfs_h *g,\n"
"             const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5405 ../fish/guestfish-actions.pod:3604
msgid "Remove the single file C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5411
msgid "guestfs_rm_rf"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5413
#, no-wrap
msgid ""
" int\n"
" guestfs_rm_rf (guestfs_h *g,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5417 ../fish/guestfish-actions.pod:3610
msgid ""
"Remove the file or directory C<path>, recursively removing the contents if "
"its a directory.  This is like the C<rm -rf> shell command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5425
msgid "guestfs_rmdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5427
#, no-wrap
msgid ""
" int\n"
" guestfs_rmdir (guestfs_h *g,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5431 ../fish/guestfish-actions.pod:3618
msgid "Remove the single directory C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5437
msgid "guestfs_rmmountpoint"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5439
#, no-wrap
msgid ""
" int\n"
" guestfs_rmmountpoint (guestfs_h *g,\n"
"                       const char *exemptpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5443
msgid ""
"This calls removes a mountpoint that was previously created with "
"C<guestfs_mkmountpoint>.  See C<guestfs_mkmountpoint> for full details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5451
msgid "guestfs_scrub_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5453
#, no-wrap
msgid ""
" int\n"
" guestfs_scrub_device (guestfs_h *g,\n"
"                       const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5457 ../fish/guestfish-actions.pod:3632
msgid ""
"This command writes patterns over C<device> to make data retrieval more "
"difficult."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5460 ../src/guestfs-actions.pod:5481 ../src/guestfs-actions.pod:5500 ../fish/guestfish-actions.pod:3635 ../fish/guestfish-actions.pod:3650 ../fish/guestfish-actions.pod:3663
msgid ""
"It is an interface to the L<scrub(1)> program.  See that manual page for "
"more details."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5468 ../src/guestfs-actions.pod:5486 ../src/guestfs-actions.pod:5505
msgid "(Added in 1.0.52)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5470
msgid "guestfs_scrub_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5472
#, no-wrap
msgid ""
" int\n"
" guestfs_scrub_file (guestfs_h *g,\n"
"                     const char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5476 ../fish/guestfish-actions.pod:3645
msgid ""
"This command writes patterns over a file to make data retrieval more "
"difficult."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5479 ../fish/guestfish-actions.pod:3648
msgid "The file is I<removed> after scrubbing."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5488
msgid "guestfs_scrub_freespace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5490
#, no-wrap
msgid ""
" int\n"
" guestfs_scrub_freespace (guestfs_h *g,\n"
"                          const char *dir);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5494
msgid ""
"This command creates the directory C<dir> and then fills it with files until "
"the filesystem is full, and scrubs the files as for C<guestfs_scrub_file>, "
"and deletes them.  The intention is to scrub any free space on the partition "
"containing C<dir>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5507
msgid "guestfs_set_append"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5509
#, no-wrap
msgid ""
" int\n"
" guestfs_set_append (guestfs_h *g,\n"
"                     const char *append);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5513 ../fish/guestfish-actions.pod:3672
msgid ""
"This function is used to add additional options to the guest kernel command "
"line."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5516 ../fish/guestfish-actions.pod:3675
msgid ""
"The default is C<NULL> unless overridden by setting C<LIBGUESTFS_APPEND> "
"environment variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5519 ../fish/guestfish-actions.pod:3678
msgid ""
"Setting C<append> to C<NULL> means I<no> additional options are passed "
"(libguestfs always adds a few of its own)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5526
msgid "guestfs_set_autosync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5528
#, no-wrap
msgid ""
" int\n"
" guestfs_set_autosync (guestfs_h *g,\n"
"                       int autosync);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5532
msgid ""
"If C<autosync> is true, this enables autosync.  Libguestfs will make a best "
"effort attempt to run C<guestfs_umount_all> followed by C<guestfs_sync> when "
"the handle is closed (also if the program exits without closing handles)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5537 ../fish/guestfish-actions.pod:3692
msgid ""
"This is enabled by default (since libguestfs 1.5.24, previously it was "
"disabled by default)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5544
msgid "guestfs_set_direct"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5546
#, no-wrap
msgid ""
" int\n"
" guestfs_set_direct (guestfs_h *g,\n"
"                     int direct);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5550 ../fish/guestfish-actions.pod:3701
msgid ""
"If the direct appliance mode flag is enabled, then stdin and stdout are "
"passed directly through to the appliance once it is launched."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5554
msgid ""
"One consequence of this is that log messages aren't caught by the library "
"and handled by C<guestfs_set_log_message_callback>, but go straight to "
"stdout."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5558 ../fish/guestfish-actions.pod:3709
msgid "You probably don't want to use this unless you know what you are doing."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5561 ../fish/guestfish-actions.pod:3712
msgid "The default is disabled."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5567
msgid "guestfs_set_e2label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5569
#, no-wrap
msgid ""
" int\n"
" guestfs_set_e2label (guestfs_h *g,\n"
"                      const char *device,\n"
"                      const char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5574 ../fish/guestfish-actions.pod:3718
msgid ""
"This sets the ext2/3/4 filesystem label of the filesystem on C<device> to "
"C<label>.  Filesystem labels are limited to 16 characters."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5578
msgid ""
"You can use either C<guestfs_tune2fs_l> or C<guestfs_get_e2label> to return "
"the existing label on a filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5585
msgid "guestfs_set_e2uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5587
#, no-wrap
msgid ""
" int\n"
" guestfs_set_e2uuid (guestfs_h *g,\n"
"                     const char *device,\n"
"                     const char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5592 ../fish/guestfish-actions.pod:3729
msgid ""
"This sets the ext2/3/4 filesystem UUID of the filesystem on C<device> to "
"C<uuid>.  The format of the UUID and alternatives such as C<clear>, "
"C<random> and C<time> are described in the L<tune2fs(8)> manpage."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5597
msgid ""
"You can use either C<guestfs_tune2fs_l> or C<guestfs_get_e2uuid> to return "
"the existing UUID of a filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5604
msgid "guestfs_set_memsize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5606
#, no-wrap
msgid ""
" int\n"
" guestfs_set_memsize (guestfs_h *g,\n"
"                      int memsize);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5610
msgid ""
"This sets the memory size in megabytes allocated to the qemu subprocess.  "
"This only has any effect if called before C<guestfs_launch>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5614 ../fish/guestfish-actions.pod:3747
msgid ""
"You can also change this by setting the environment variable "
"C<LIBGUESTFS_MEMSIZE> before the handle is created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5625
msgid "guestfs_set_network"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5627
#, no-wrap
msgid ""
" int\n"
" guestfs_set_network (guestfs_h *g,\n"
"                      int network);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5631 ../fish/guestfish-actions.pod:3760
msgid ""
"If C<network> is true, then the network is enabled in the libguestfs "
"appliance.  The default is false."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5634 ../fish/guestfish-actions.pod:3763
msgid ""
"This affects whether commands are able to access the network (see "
"L<guestfs(3)/RUNNING COMMANDS>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5637
msgid ""
"You must call this before calling C<guestfs_launch>, otherwise it has no "
"effect."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5644
msgid "guestfs_set_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5646
#, no-wrap
msgid ""
" int\n"
" guestfs_set_path (guestfs_h *g,\n"
"                   const char *searchpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5650 ../fish/guestfish-actions.pod:3775
msgid "Set the path that libguestfs searches for kernel and initrd.img."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5652 ../fish/guestfish-actions.pod:3777
msgid ""
"The default is C<$libdir/guestfs> unless overridden by setting "
"C<LIBGUESTFS_PATH> environment variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5655 ../fish/guestfish-actions.pod:3780
msgid "Setting C<path> to C<NULL> restores the default path."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5661
msgid "guestfs_set_qemu"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5663
#, no-wrap
msgid ""
" int\n"
" guestfs_set_qemu (guestfs_h *g,\n"
"                   const char *qemu);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5667 ../fish/guestfish-actions.pod:3788
msgid "Set the qemu binary that we will use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5669 ../fish/guestfish-actions.pod:3790
msgid "The default is chosen when the library was compiled by the configure script."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5672 ../fish/guestfish-actions.pod:3793
msgid ""
"You can also override this by setting the C<LIBGUESTFS_QEMU> environment "
"variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5675 ../fish/guestfish-actions.pod:3796
msgid "Setting C<qemu> to C<NULL> restores the default qemu binary."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5677 ../fish/guestfish-actions.pod:3798
msgid ""
"Note that you should call this function as early as possible after creating "
"the handle.  This is because some pre-launch operations depend on testing "
"qemu features (by running C<qemu -help>).  If the qemu binary changes, we "
"don't retest features, and so you might see inconsistent results.  Using the "
"environment variable C<LIBGUESTFS_QEMU> is safest of all since that picks "
"the qemu binary at the same time as the handle is created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5689
msgid "guestfs_set_recovery_proc"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5691
#, no-wrap
msgid ""
" int\n"
" guestfs_set_recovery_proc (guestfs_h *g,\n"
"                            int recoveryproc);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5695
msgid ""
"If this is called with the parameter C<false> then C<guestfs_launch> does "
"not create a recovery process.  The purpose of the recovery process is to "
"stop runaway qemu processes in the case where the main program aborts "
"abruptly."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5700
msgid ""
"This only has any effect if called before C<guestfs_launch>, and the default "
"is true."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5703 ../fish/guestfish-actions.pod:3820
msgid ""
"About the only time when you would want to disable this is if the main "
"process will fork itself into the background (\"daemonize\" itself).  In "
"this case the recovery process thinks that the main program has disappeared "
"and so kills qemu, which is not very helpful."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5713
msgid "guestfs_set_selinux"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5715
#, no-wrap
msgid ""
" int\n"
" guestfs_set_selinux (guestfs_h *g,\n"
"                      int selinux);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5719 ../fish/guestfish-actions.pod:3832
msgid ""
"This sets the selinux flag that is passed to the appliance at boot time.  "
"The default is C<selinux=0> (disabled)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5722 ../fish/guestfish-actions.pod:3835
msgid ""
"Note that if SELinux is enabled, it is always in Permissive mode "
"(C<enforcing=0>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5732
msgid "guestfs_set_trace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5734
#, no-wrap
msgid ""
" int\n"
" guestfs_set_trace (guestfs_h *g,\n"
"                    int trace);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5738 ../fish/guestfish-actions.pod:3847
msgid ""
"If the command trace flag is set to 1, then commands are printed on stderr "
"before they are executed in a format which is very similar to the one used "
"by guestfish.  In other words, you can run a program with this enabled, and "
"you will get out a script which you can feed to guestfish to perform the "
"same set of actions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5745 ../fish/guestfish-actions.pod:3854
msgid ""
"If you want to trace C API calls into libguestfs (and other libraries) then "
"possibly a better way is to use the external ltrace(1) command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5749 ../fish/guestfish-actions.pod:3858
msgid ""
"Command traces are disabled unless the environment variable "
"C<LIBGUESTFS_TRACE> is defined and set to C<1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5756
msgid "guestfs_set_verbose"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5758
#, no-wrap
msgid ""
" int\n"
" guestfs_set_verbose (guestfs_h *g,\n"
"                      int verbose);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5762 ../fish/guestfish-actions.pod:3867
msgid "If C<verbose> is true, this turns on verbose messages (to C<stderr>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5764 ../fish/guestfish-actions.pod:3869
msgid ""
"Verbose messages are disabled unless the environment variable "
"C<LIBGUESTFS_DEBUG> is defined and set to C<1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5771
msgid "guestfs_setcon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5773
#, no-wrap
msgid ""
" int\n"
" guestfs_setcon (guestfs_h *g,\n"
"                 const char *context);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5777 ../fish/guestfish-actions.pod:3876
msgid ""
"This sets the SELinux security context of the daemon to the string "
"C<context>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5780 ../fish/guestfish-actions.pod:3879
msgid "See the documentation about SELINUX in L<guestfs(3)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5786
msgid "guestfs_setxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5788
#, no-wrap
msgid ""
" int\n"
" guestfs_setxattr (guestfs_h *g,\n"
"                   const char *xattr,\n"
"                   const char *val,\n"
"                   int vallen,\n"
"                   const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5795 ../fish/guestfish-actions.pod:3885
msgid ""
"This call sets the extended attribute named C<xattr> of the file C<path> to "
"the value C<val> (of length C<vallen>).  The value is arbitrary 8 bit data."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5799
msgid "See also: C<guestfs_lsetxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5805
msgid "guestfs_sfdisk"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5807
#, no-wrap
msgid ""
" int\n"
" guestfs_sfdisk (guestfs_h *g,\n"
"                 const char *device,\n"
"                 int cyls,\n"
"                 int heads,\n"
"                 int sectors,\n"
"                 char *const *lines);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5815 ../fish/guestfish-actions.pod:3895
msgid ""
"This is a direct interface to the L<sfdisk(8)> program for creating "
"partitions on block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5818 ../fish/guestfish-actions.pod:3898
msgid "C<device> should be a block device, for example C</dev/sda>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5820 ../fish/guestfish-actions.pod:3900
msgid ""
"C<cyls>, C<heads> and C<sectors> are the number of cylinders, heads and "
"sectors on the device, which are passed directly to sfdisk as the I<-C>, "
"I<-H> and I<-S> parameters.  If you pass C<0> for any of these, then the "
"corresponding parameter is omitted.  Usually for 'large' disks, you can just "
"pass C<0> for these, but for small (floppy-sized) disks, sfdisk (or rather, "
"the kernel) cannot work out the right geometry and you will need to tell it."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5828 ../fish/guestfish-actions.pod:3908
msgid ""
"C<lines> is a list of lines that we feed to C<sfdisk>.  For more information "
"refer to the L<sfdisk(8)> manpage."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5831 ../fish/guestfish-actions.pod:3911
msgid ""
"To create a single partition occupying the whole disk, you would pass "
"C<lines> as a single element list, when the single element being the string "
"C<,> (comma)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5835
msgid "See also: C<guestfs_sfdisk_l>, C<guestfs_sfdisk_N>, C<guestfs_part_init>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5845
msgid "guestfs_sfdiskM"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5847
#, no-wrap
msgid ""
" int\n"
" guestfs_sfdiskM (guestfs_h *g,\n"
"                  const char *device,\n"
"                  char *const *lines);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5852
msgid ""
"This is a simplified interface to the C<guestfs_sfdisk> command, where "
"partition sizes are specified in megabytes only (rounded to the nearest "
"cylinder) and you don't need to specify the cyls, heads and sectors "
"parameters which were rarely if ever used anyway."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5858
msgid ""
"See also: C<guestfs_sfdisk>, the L<sfdisk(8)> manpage and "
"C<guestfs_part_disk>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5868
msgid "guestfs_sfdisk_N"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5870
#, no-wrap
msgid ""
" int\n"
" guestfs_sfdisk_N (guestfs_h *g,\n"
"                   const char *device,\n"
"                   int partnum,\n"
"                   int cyls,\n"
"                   int heads,\n"
"                   int sectors,\n"
"                   const char *line);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5879 ../fish/guestfish-actions.pod:3941
msgid ""
"This runs L<sfdisk(8)> option to modify just the single partition C<n> "
"(note: C<n> counts from 1)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5882
msgid ""
"For other parameters, see C<guestfs_sfdisk>.  You should usually pass C<0> "
"for the cyls/heads/sectors parameters."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5885
msgid "See also: C<guestfs_part_add>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5894
msgid "guestfs_sfdisk_disk_geometry"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5896
#, no-wrap
msgid ""
" char *\n"
" guestfs_sfdisk_disk_geometry (guestfs_h *g,\n"
"                               const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5900
msgid ""
"This displays the disk geometry of C<device> read from the partition table.  "
"Especially in the case where the underlying block device has been resized, "
"this can be different from the kernel's idea of the geometry (see "
"C<guestfs_sfdisk_kernel_geometry>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5905 ../src/guestfs-actions.pod:5921 ../fish/guestfish-actions.pod:3961 ../fish/guestfish-actions.pod:3970
msgid "The result is in human-readable format, and not designed to be parsed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5913
msgid "guestfs_sfdisk_kernel_geometry"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5915
#, no-wrap
msgid ""
" char *\n"
" guestfs_sfdisk_kernel_geometry (guestfs_h *g,\n"
"                                 const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5919 ../fish/guestfish-actions.pod:3968
msgid "This displays the kernel's idea of the geometry of C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5929
msgid "guestfs_sfdisk_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5931
#, no-wrap
msgid ""
" char *\n"
" guestfs_sfdisk_l (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5935 ../fish/guestfish-actions.pod:3977
msgid ""
"This displays the partition table on C<device>, in the human-readable output "
"of the L<sfdisk(8)> command.  It is not intended to be parsed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5939
msgid "See also: C<guestfs_part_list>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5946
msgid "guestfs_sh"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5948
#, no-wrap
msgid ""
" char *\n"
" guestfs_sh (guestfs_h *g,\n"
"             const char *command);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5952 ../fish/guestfish-actions.pod:3987
msgid ""
"This call runs a command from the guest filesystem via the guest's "
"C</bin/sh>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5955
msgid "This is like C<guestfs_command>, but passes the command to:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5957 ../fish/guestfish-actions.pod:3992
#, no-wrap
msgid ""
" /bin/sh -c \"command\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5959 ../fish/guestfish-actions.pod:3994
msgid ""
"Depending on the guest's shell, this usually results in wildcards being "
"expanded, shell expressions being interpolated and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5963
msgid "All the provisos about C<guestfs_command> apply to this call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5970
msgid "guestfs_sh_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5972
#, no-wrap
msgid ""
" char **\n"
" guestfs_sh_lines (guestfs_h *g,\n"
"                   const char *command);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5976
msgid ""
"This is the same as C<guestfs_sh>, but splits the result into a list of "
"lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5979
msgid "See also: C<guestfs_command_lines>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5987
msgid "guestfs_sleep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5989
#, no-wrap
msgid ""
" int\n"
" guestfs_sleep (guestfs_h *g,\n"
"                int secs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5993 ../fish/guestfish-actions.pod:4013
msgid "Sleep for C<secs> seconds."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5997
msgid "(Added in 1.0.41)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5999 ../src/guestfs-structs.pod:109
msgid "guestfs_stat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6001
#, no-wrap
msgid ""
" struct guestfs_stat *\n"
" guestfs_stat (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6007 ../fish/guestfish-actions.pod:4021
msgid "This is the same as the C<stat(2)> system call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6015 ../src/guestfs-structs.pod:135
msgid "guestfs_statvfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6017
#, no-wrap
msgid ""
" struct guestfs_statvfs *\n"
" guestfs_statvfs (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6021 ../fish/guestfish-actions.pod:4027
msgid ""
"Returns file system statistics for any mounted file system.  C<path> should "
"be a file or directory in the mounted file system (typically it is the mount "
"point itself, but it doesn't need to be)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6025 ../fish/guestfish-actions.pod:4031
msgid "This is the same as the C<statvfs(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6027
msgid ""
"This function returns a C<struct guestfs_statvfs *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_statvfs> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6033
msgid "guestfs_strings"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6035
#, no-wrap
msgid ""
" char **\n"
" guestfs_strings (guestfs_h *g,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6039 ../fish/guestfish-actions.pod:4037
msgid ""
"This runs the L<strings(1)> command on a file and returns the list of "
"printable strings found."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6051
msgid "guestfs_strings_e"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6053
#, no-wrap
msgid ""
" char **\n"
" guestfs_strings_e (guestfs_h *g,\n"
"                    const char *encoding,\n"
"                    const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6058
msgid ""
"This is like the C<guestfs_strings> command, but allows you to specify the "
"encoding of strings that are looked for in the source file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6062 ../fish/guestfish-actions.pod:4051
msgid "Allowed encodings are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6066 ../fish/guestfish-actions.pod:4055
msgid "s"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6068
msgid ""
"Single 7-bit-byte characters like ASCII and the ASCII-compatible parts of "
"ISO-8859-X (this is what C<guestfs_strings> uses)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6071 ../fish/guestfish-actions.pod:4060
msgid "S"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6073 ../fish/guestfish-actions.pod:4062
msgid "Single 8-bit-byte characters."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6075 ../fish/guestfish-actions.pod:4064
msgid "b"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6077 ../fish/guestfish-actions.pod:4066
msgid "16-bit big endian strings such as those encoded in UTF-16BE or UCS-2BE."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6080 ../fish/guestfish-actions.pod:4069
msgid "l (lower case letter L)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6082 ../fish/guestfish-actions.pod:4071
msgid ""
"16-bit little endian such as UTF-16LE and UCS-2LE.  This is useful for "
"examining binaries in Windows guests."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6085 ../fish/guestfish-actions.pod:4074
msgid "B"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6087 ../fish/guestfish-actions.pod:4076
msgid "32-bit big endian such as UCS-4BE."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:6089 ../fish/guestfish-actions.pod:4078
msgid "L"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6091 ../fish/guestfish-actions.pod:4080
msgid "32-bit little endian such as UCS-4LE."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6095 ../fish/guestfish-actions.pod:4084
msgid "The returned strings are transcoded to UTF-8."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6106
msgid "guestfs_swapoff_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6108
#, no-wrap
msgid ""
" int\n"
" guestfs_swapoff_device (guestfs_h *g,\n"
"                         const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6112
msgid ""
"This command disables the libguestfs appliance swap device or partition "
"named C<device>.  See C<guestfs_swapon_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6120
msgid "guestfs_swapoff_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6122
#, no-wrap
msgid ""
" int\n"
" guestfs_swapoff_file (guestfs_h *g,\n"
"                       const char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6126 ../fish/guestfish-actions.pod:4101
msgid "This command disables the libguestfs appliance swap on file."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6132
msgid "guestfs_swapoff_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6134
#, no-wrap
msgid ""
" int\n"
" guestfs_swapoff_label (guestfs_h *g,\n"
"                        const char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6138 ../fish/guestfish-actions.pod:4107
msgid ""
"This command disables the libguestfs appliance swap on labeled swap "
"partition."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6145
msgid "guestfs_swapoff_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6147
#, no-wrap
msgid ""
" int\n"
" guestfs_swapoff_uuid (guestfs_h *g,\n"
"                       const char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6151 ../fish/guestfish-actions.pod:4114
msgid ""
"This command disables the libguestfs appliance swap partition with the given "
"UUID."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6158
msgid "guestfs_swapon_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6160
#, no-wrap
msgid ""
" int\n"
" guestfs_swapon_device (guestfs_h *g,\n"
"                        const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6164
msgid ""
"This command enables the libguestfs appliance to use the swap device or "
"partition named C<device>.  The increased memory is made available for all "
"commands, for example those run using C<guestfs_command> or C<guestfs_sh>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6169 ../fish/guestfish-actions.pod:4126
msgid ""
"Note that you should not swap to existing guest swap partitions unless you "
"know what you are doing.  They may contain hibernation information, or other "
"information that the guest doesn't want you to trash.  You also risk leaking "
"information about the host to the guest this way.  Instead, attach a new "
"host device to the guest and swap on that."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6180
msgid "guestfs_swapon_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6182
#, no-wrap
msgid ""
" int\n"
" guestfs_swapon_file (guestfs_h *g,\n"
"                      const char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6186
msgid ""
"This command enables swap to a file.  See C<guestfs_swapon_device> for other "
"notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6193
msgid "guestfs_swapon_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6195
#, no-wrap
msgid ""
" int\n"
" guestfs_swapon_label (guestfs_h *g,\n"
"                       const char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6199
msgid ""
"This command enables swap to a labeled swap partition.  See "
"C<guestfs_swapon_device> for other notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6206
msgid "guestfs_swapon_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6208
#, no-wrap
msgid ""
" int\n"
" guestfs_swapon_uuid (guestfs_h *g,\n"
"                      const char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6212
msgid ""
"This command enables swap to a swap partition with the given UUID.  See "
"C<guestfs_swapon_device> for other notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6219
msgid "guestfs_sync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6221
#, no-wrap
msgid ""
" int\n"
" guestfs_sync (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6224 ../fish/guestfish-actions.pod:4158
msgid ""
"This syncs the disk, so that any writes are flushed through to the "
"underlying disk image."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6227 ../fish/guestfish-actions.pod:4161
msgid ""
"You should always call this if you have modified a disk image, before "
"closing the handle."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6234
msgid "guestfs_tail"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6236
#, no-wrap
msgid ""
" char **\n"
" guestfs_tail (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6240 ../fish/guestfish-actions.pod:4168
msgid "This command returns up to the last 10 lines of a file as a list of strings."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6252
msgid "guestfs_tail_n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6254
#, no-wrap
msgid ""
" char **\n"
" guestfs_tail_n (guestfs_h *g,\n"
"                 int nrlines,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6259 ../fish/guestfish-actions.pod:4178
msgid ""
"If the parameter C<nrlines> is a positive number, this returns the last "
"C<nrlines> lines of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6262 ../fish/guestfish-actions.pod:4181
msgid ""
"If the parameter C<nrlines> is a negative number, this returns lines from "
"the file C<path>, starting with the C<-nrlines>th line."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6276
msgid "guestfs_tar_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6278
#, no-wrap
msgid ""
" int\n"
" guestfs_tar_in (guestfs_h *g,\n"
"                 const char *tarfile,\n"
"                 const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6283 ../fish/guestfish-actions.pod:4193
msgid ""
"This command uploads and unpacks local file C<tarfile> (an I<uncompressed> "
"tar file) into C<directory>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6286
msgid "To upload a compressed tarball, use C<guestfs_tgz_in> or C<guestfs_txz_in>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6291 ../src/guestfs-actions.pod:6308 ../src/guestfs-actions.pod:6324 ../src/guestfs-actions.pod:6340
msgid "(Added in 1.0.3)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6293
msgid "guestfs_tar_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6295
#, no-wrap
msgid ""
" int\n"
" guestfs_tar_out (guestfs_h *g,\n"
"                  const char *directory,\n"
"                  const char *tarfile);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6300 ../fish/guestfish-actions.pod:4205
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarfile>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6303
msgid ""
"To download a compressed tarball, use C<guestfs_tgz_out> or "
"C<guestfs_txz_out>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6310
msgid "guestfs_tgz_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6312
#, no-wrap
msgid ""
" int\n"
" guestfs_tgz_in (guestfs_h *g,\n"
"                 const char *tarball,\n"
"                 const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6317 ../fish/guestfish-actions.pod:4217
msgid ""
"This command uploads and unpacks local file C<tarball> (a I<gzip compressed> "
"tar file) into C<directory>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6320
msgid "To upload an uncompressed tarball, use C<guestfs_tar_in>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6326
msgid "guestfs_tgz_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6328
#, no-wrap
msgid ""
" int\n"
" guestfs_tgz_out (guestfs_h *g,\n"
"                  const char *directory,\n"
"                  const char *tarball);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6333 ../fish/guestfish-actions.pod:4228
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarball>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6336
msgid "To download an uncompressed tarball, use C<guestfs_tar_out>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6342
msgid "guestfs_touch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6344
#, no-wrap
msgid ""
" int\n"
" guestfs_touch (guestfs_h *g,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6348 ../fish/guestfish-actions.pod:4239
msgid ""
"Touch acts like the L<touch(1)> command.  It can be used to update the "
"timestamps on a file, or, if the file does not exist, to create a new "
"zero-length file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6352 ../fish/guestfish-actions.pod:4243
msgid ""
"This command only works on regular files, and will fail on other file types "
"such as directories, symbolic links, block special etc."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6359
msgid "guestfs_truncate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6361
#, no-wrap
msgid ""
" int\n"
" guestfs_truncate (guestfs_h *g,\n"
"                   const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6365 ../fish/guestfish-actions.pod:4250
msgid ""
"This command truncates C<path> to a zero-length file.  The file must exist "
"already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6372
msgid "guestfs_truncate_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6374
#, no-wrap
msgid ""
" int\n"
" guestfs_truncate_size (guestfs_h *g,\n"
"                        const char *path,\n"
"                        int64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6379 ../fish/guestfish-actions.pod:4257
msgid ""
"This command truncates C<path> to size C<size> bytes.  The file must exist "
"already."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6382
msgid ""
"If the current file size is less than C<size> then the file is extended to "
"the required size with zero bytes.  This creates a sparse file (ie. disk "
"blocks are not allocated for the file until you write to it).  To create a "
"non-sparse file of zeroes, use C<guestfs_fallocate64> instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6392
msgid "guestfs_tune2fs_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6394
#, no-wrap
msgid ""
" char **\n"
" guestfs_tune2fs_l (guestfs_h *g,\n"
"                    const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6398 ../fish/guestfish-actions.pod:4270
msgid ""
"This returns the contents of the ext2, ext3 or ext4 filesystem superblock on "
"C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6401 ../fish/guestfish-actions.pod:4273
msgid ""
"It is the same as running C<tune2fs -l device>.  See L<tune2fs(8)> manpage "
"for more details.  The list of fields returned isn't clearly defined, and "
"depends on both the version of C<tune2fs> that libguestfs was built against, "
"and the filesystem itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6414
msgid "guestfs_txz_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6416
#, no-wrap
msgid ""
" int\n"
" guestfs_txz_in (guestfs_h *g,\n"
"                 const char *tarball,\n"
"                 const char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6421 ../fish/guestfish-actions.pod:4282
msgid ""
"This command uploads and unpacks local file C<tarball> (an I<xz compressed> "
"tar file) into C<directory>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6428
msgid "guestfs_txz_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6430
#, no-wrap
msgid ""
" int\n"
" guestfs_txz_out (guestfs_h *g,\n"
"                  const char *directory,\n"
"                  const char *tarball);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6435 ../fish/guestfish-actions.pod:4291
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarball> (as an xz compressed tar archive)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6442
msgid "guestfs_umask"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6444
#, no-wrap
msgid ""
" int\n"
" guestfs_umask (guestfs_h *g,\n"
"                int mask);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6448 ../fish/guestfish-actions.pod:4300
msgid ""
"This function sets the mask used for creating new files and device nodes to "
"C<mask & 0777>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6451 ../fish/guestfish-actions.pod:4303
msgid ""
"Typical umask values would be C<022> which creates new files with "
"permissions like \"-rw-r--r--\" or \"-rwxr-xr-x\", and C<002> which creates "
"new files with permissions like \"-rw-rw-r--\" or \"-rwxrwxr-x\"."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6456 ../fish/guestfish-actions.pod:4308
msgid ""
"The default umask is C<022>.  This is important because it means that "
"directories and device nodes will be created with C<0644> or C<0755> mode "
"even if you specify C<0777>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6460
msgid ""
"See also C<guestfs_get_umask>, L<umask(2)>, C<guestfs_mknod>, "
"C<guestfs_mkdir>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6463 ../fish/guestfish-actions.pod:4315
msgid "This call returns the previous umask."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6469
msgid "guestfs_umount"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6471
#, no-wrap
msgid ""
" int\n"
" guestfs_umount (guestfs_h *g,\n"
"                 const char *pathordevice);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6475 ../fish/guestfish-actions.pod:4323
msgid ""
"This unmounts the given filesystem.  The filesystem may be specified either "
"by its mountpoint (path) or the device which contains the filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6483
msgid "guestfs_umount_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6485
#, no-wrap
msgid ""
" int\n"
" guestfs_umount_all (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6488 ../fish/guestfish-actions.pod:4333
msgid "This unmounts all mounted filesystems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6490 ../fish/guestfish-actions.pod:4335
msgid "Some internal mounts are not unmounted by this call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6496
msgid "guestfs_upload"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6498
#, no-wrap
msgid ""
" int\n"
" guestfs_upload (guestfs_h *g,\n"
"                 const char *filename,\n"
"                 const char *remotefilename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6503 ../src/guestfs-actions.pod:6527 ../fish/guestfish-actions.pod:4341 ../fish/guestfish-actions.pod:4354
msgid "Upload local file C<filename> to C<remotefilename> on the filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6508
msgid "See also C<guestfs_download>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6519
msgid "guestfs_upload_offset"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6521
#, no-wrap
msgid ""
" int\n"
" guestfs_upload_offset (guestfs_h *g,\n"
"                        const char *filename,\n"
"                        const char *remotefilename,\n"
"                        int64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6530 ../fish/guestfish-actions.pod:4357
msgid ""
"C<remotefilename> is overwritten starting at the byte C<offset> specified.  "
"The intention is to overwrite parts of existing files or devices, although "
"if a non-existant file is specified then it is created with a \"hole\" "
"before C<offset>.  The size of the data written is implicit in the size of "
"the source C<filename>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6537
msgid ""
"Note that there is no limit on the amount of data that can be uploaded with "
"this call, unlike with C<guestfs_pwrite>, and this call always writes the "
"full amount unless an error occurs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6542
msgid "See also C<guestfs_upload>, C<guestfs_pwrite>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6553
msgid "guestfs_utimens"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6555
#, no-wrap
msgid ""
" int\n"
" guestfs_utimens (guestfs_h *g,\n"
"                  const char *path,\n"
"                  int64_t atsecs,\n"
"                  int64_t atnsecs,\n"
"                  int64_t mtsecs,\n"
"                  int64_t mtnsecs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6563 ../fish/guestfish-actions.pod:4377
msgid "This command sets the timestamps of a file with nanosecond precision."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6566 ../fish/guestfish-actions.pod:4380
msgid ""
"C<atsecs, atnsecs> are the last access time (atime) in secs and nanoseconds "
"from the epoch."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6569 ../fish/guestfish-actions.pod:4383
msgid ""
"C<mtsecs, mtnsecs> are the last modification time (mtime) in secs and "
"nanoseconds from the epoch."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6572 ../fish/guestfish-actions.pod:4386
msgid ""
"If the C<*nsecs> field contains the special value C<-1> then the "
"corresponding timestamp is set to the current time.  (The C<*secs> field is "
"ignored in this case)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6576 ../fish/guestfish-actions.pod:4390
msgid ""
"If the C<*nsecs> field contains the special value C<-2> then the "
"corresponding timestamp is left unchanged.  (The C<*secs> field is ignored "
"in this case)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6584 ../src/guestfs-structs.pod:175
msgid "guestfs_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6586
#, no-wrap
msgid ""
" struct guestfs_version *\n"
" guestfs_version (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6589 ../fish/guestfish-actions.pod:4398
msgid "Return the libguestfs version number that the program is linked against."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6592 ../fish/guestfish-actions.pod:4401
msgid ""
"Note that because of dynamic linking this is not necessarily the version of "
"libguestfs that you compiled against.  You can compile the program, and then "
"at runtime dynamically link against a completely different C<libguestfs.so> "
"library."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6597 ../fish/guestfish-actions.pod:4406
msgid ""
"This call was added in version C<1.0.58>.  In previous versions of "
"libguestfs there was no way to get the version number.  From C code you can "
"use dynamic linker functions to find out if this symbol exists (if it "
"doesn't, then it's an earlier version)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6603 ../fish/guestfish-actions.pod:4412
msgid ""
"The call returns a structure with four elements.  The first three (C<major>, "
"C<minor> and C<release>) are numbers and correspond to the usual version "
"triplet.  The fourth element (C<extra>) is a string and is normally empty, "
"but may be used for distro-specific information."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6609 ../fish/guestfish-actions.pod:4418
msgid "To construct the original version string: C<$major.$minor.$release$extra>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6612 ../fish/guestfish-actions.pod:4421
msgid "See also: L<guestfs(3)/LIBGUESTFS VERSION NUMBERS>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6614
msgid ""
"I<Note:> Don't use this call to test for availability of features.  In "
"enterprise distributions we backport features from later versions into "
"earlier versions, making this an unreliable way to test for features.  Use "
"C<guestfs_available> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6620
msgid ""
"This function returns a C<struct guestfs_version *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_version> after use>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6624
msgid "(Added in 1.0.58)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6626
msgid "guestfs_vfs_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6628
#, no-wrap
msgid ""
" char *\n"
" guestfs_vfs_label (guestfs_h *g,\n"
"                    const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6632 ../fish/guestfish-actions.pod:4433
msgid "This returns the filesystem label of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6635 ../fish/guestfish-actions.pod:4436
msgid "If the filesystem is unlabeled, this returns the empty string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6637
msgid "To find a filesystem from the label, use C<guestfs_findfs_label>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6642 ../src/guestfs-actions.pod:6679
msgid "(Added in 1.3.18)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6644
msgid "guestfs_vfs_type"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6646
#, no-wrap
msgid ""
" char *\n"
" guestfs_vfs_type (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6650 ../fish/guestfish-actions.pod:4444
msgid ""
"This command gets the filesystem type corresponding to the filesystem on "
"C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6653 ../fish/guestfish-actions.pod:4447
msgid ""
"For most filesystems, the result is the name of the Linux VFS module which "
"would be used to mount this filesystem if you mounted it without specifying "
"the filesystem type.  For example a string such as C<ext3> or C<ntfs>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6663
msgid "guestfs_vfs_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6665
#, no-wrap
msgid ""
" char *\n"
" guestfs_vfs_uuid (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6669 ../fish/guestfish-actions.pod:4456
msgid "This returns the filesystem UUID of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6672 ../fish/guestfish-actions.pod:4459
msgid "If the filesystem does not have a UUID, this returns the empty string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6674
msgid "To find a filesystem from the UUID, use C<guestfs_findfs_uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6681
msgid "guestfs_vg_activate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6683
#, no-wrap
msgid ""
" int\n"
" guestfs_vg_activate (guestfs_h *g,\n"
"                      int activate,\n"
"                      char *const *volgroups);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6688 ../fish/guestfish-actions.pod:4467
msgid ""
"This command activates or (if C<activate> is false) deactivates all logical "
"volumes in the listed volume groups C<volgroups>.  If activated, then they "
"are made known to the kernel, ie. they appear as C</dev/mapper> devices.  If "
"deactivated, then those devices disappear."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6694 ../fish/guestfish-actions.pod:4473
msgid "This command is the same as running C<vgchange -a y|n volgroups...>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6696 ../fish/guestfish-actions.pod:4475
msgid ""
"Note that if C<volgroups> is an empty list then B<all> volume groups are "
"activated or deactivated."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6703
msgid "guestfs_vg_activate_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6705
#, no-wrap
msgid ""
" int\n"
" guestfs_vg_activate_all (guestfs_h *g,\n"
"                          int activate);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6709 ../fish/guestfish-actions.pod:4482
msgid ""
"This command activates or (if C<activate> is false) deactivates all logical "
"volumes in all volume groups.  If activated, then they are made known to the "
"kernel, ie. they appear as C</dev/mapper> devices.  If deactivated, then "
"those devices disappear."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6715 ../fish/guestfish-actions.pod:4488
msgid "This command is the same as running C<vgchange -a y|n>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6721
msgid "guestfs_vgcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6723
#, no-wrap
msgid ""
" int\n"
" guestfs_vgcreate (guestfs_h *g,\n"
"                   const char *volgroup,\n"
"                   char *const *physvols);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6728 ../fish/guestfish-actions.pod:4494
msgid ""
"This creates an LVM volume group called C<volgroup> from the non-empty list "
"of physical volumes C<physvols>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6735
msgid "guestfs_vglvuuids"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6737
#, no-wrap
msgid ""
" char **\n"
" guestfs_vglvuuids (guestfs_h *g,\n"
"                    const char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6741 ../fish/guestfish-actions.pod:4501
msgid ""
"Given a VG called C<vgname>, this returns the UUIDs of all the logical "
"volumes created in this volume group."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6744
msgid ""
"You can use this along with C<guestfs_lvs> and C<guestfs_lvuuid> calls to "
"associate logical volumes and volume groups."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6747
msgid "See also C<guestfs_vgpvuuids>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6755
msgid "guestfs_vgpvuuids"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6757
#, no-wrap
msgid ""
" char **\n"
" guestfs_vgpvuuids (guestfs_h *g,\n"
"                    const char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6761 ../fish/guestfish-actions.pod:4513
msgid ""
"Given a VG called C<vgname>, this returns the UUIDs of all the physical "
"volumes that this volume group resides on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6764
msgid ""
"You can use this along with C<guestfs_pvs> and C<guestfs_pvuuid> calls to "
"associate physical volumes and volume groups."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6767
msgid "See also C<guestfs_vglvuuids>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6775
msgid "guestfs_vgremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6777
#, no-wrap
msgid ""
" int\n"
" guestfs_vgremove (guestfs_h *g,\n"
"                   const char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6781 ../fish/guestfish-actions.pod:4525
msgid "Remove an LVM volume group C<vgname>, (for example C<VG>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6783 ../fish/guestfish-actions.pod:4527
msgid "This also forcibly removes all logical volumes in the volume group (if any)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6790
msgid "guestfs_vgrename"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6792
#, no-wrap
msgid ""
" int\n"
" guestfs_vgrename (guestfs_h *g,\n"
"                   const char *volgroup,\n"
"                   const char *newvolgroup);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6797 ../fish/guestfish-actions.pod:4534
msgid "Rename a volume group C<volgroup> with the new name C<newvolgroup>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6803
msgid "guestfs_vgs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6805
#, no-wrap
msgid ""
" char **\n"
" guestfs_vgs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6808 ../fish/guestfish-actions.pod:4540
msgid ""
"List all the volumes groups detected.  This is the equivalent of the "
"L<vgs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6811 ../fish/guestfish-actions.pod:4543
msgid ""
"This returns a list of just the volume group names that were detected "
"(eg. C<VolGroup00>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6814
msgid "See also C<guestfs_vgs_full>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6822
msgid "guestfs_vgs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6824
#, no-wrap
msgid ""
" struct guestfs_lvm_vg_list *\n"
" guestfs_vgs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6827 ../fish/guestfish-actions.pod:4552
msgid ""
"List all the volumes groups detected.  This is the equivalent of the "
"L<vgs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6830
msgid ""
"This function returns a C<struct guestfs_lvm_vg_list *>, or NULL if there "
"was an error.  I<The caller must call C<guestfs_free_lvm_vg_list> after "
"use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6836
msgid "guestfs_vgscan"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6838
#, no-wrap
msgid ""
" int\n"
" guestfs_vgscan (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6841 ../fish/guestfish-actions.pod:4559
msgid ""
"This rescans all block devices and rebuilds the list of LVM physical "
"volumes, volume groups and logical volumes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6848
msgid "guestfs_vguuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6850
#, no-wrap
msgid ""
" char *\n"
" guestfs_vguuid (guestfs_h *g,\n"
"                 const char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6854 ../fish/guestfish-actions.pod:4566
msgid "This command returns the UUID of the LVM VG named C<vgname>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6861
msgid "guestfs_wait_ready"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6863
#, no-wrap
msgid ""
" int\n"
" guestfs_wait_ready (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6866
msgid "This function is a no op."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6868
msgid ""
"In versions of the API E<lt> 1.0.71 you had to call this function just after "
"calling C<guestfs_launch> to wait for the launch to complete.  However this "
"is no longer necessary because C<guestfs_launch> now does the waiting."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6873
msgid ""
"If you see any calls to this function in code then you can just remove them, "
"unless you want to retain compatibility with older versions of the API."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6881
msgid "guestfs_wc_c"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6883
#, no-wrap
msgid ""
" int\n"
" guestfs_wc_c (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6887 ../fish/guestfish-actions.pod:4572
msgid ""
"This command counts the characters in a file, using the C<wc -c> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6894
msgid "guestfs_wc_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6896
#, no-wrap
msgid ""
" int\n"
" guestfs_wc_l (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6900 ../fish/guestfish-actions.pod:4579
msgid ""
"This command counts the lines in a file, using the C<wc -l> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6907
msgid "guestfs_wc_w"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6909
#, no-wrap
msgid ""
" int\n"
" guestfs_wc_w (guestfs_h *g,\n"
"               const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6913 ../fish/guestfish-actions.pod:4586
msgid ""
"This command counts the words in a file, using the C<wc -w> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6920
msgid "guestfs_write"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6922
#, no-wrap
msgid ""
" int\n"
" guestfs_write (guestfs_h *g,\n"
"                const char *path,\n"
"                const char *content,\n"
"                size_t content_size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6928 ../fish/guestfish-actions.pod:4593
msgid ""
"This call creates a file called C<path>.  The content of the file is the "
"string C<content> (which can contain any 8 bit data)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6938
msgid "guestfs_write_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6940
#, no-wrap
msgid ""
" int\n"
" guestfs_write_file (guestfs_h *g,\n"
"                     const char *path,\n"
"                     const char *content,\n"
"                     int size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6946 ../fish/guestfish-actions.pod:4603
msgid ""
"This call creates a file called C<path>.  The contents of the file is the "
"string C<content> (which can contain any 8 bit data), with length C<size>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6950 ../fish/guestfish-actions.pod:4607
msgid ""
"As a special case, if C<size> is C<0> then the length is calculated using "
"C<strlen> (so in this case the content cannot contain embedded ASCII NULs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6954 ../fish/guestfish-actions.pod:4611
msgid ""
"I<NB.> Owing to a bug, writing content containing ASCII NUL characters does "
"I<not> work, even if the length is specified."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6962 ../fish/guestfish-actions.pod:4617
msgid "This function is deprecated.  In new code, use the C<write> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6971
msgid "guestfs_zegrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6973
#, no-wrap
msgid ""
" char **\n"
" guestfs_zegrep (guestfs_h *g,\n"
"                 const char *regex,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6978 ../fish/guestfish-actions.pod:4628
msgid "This calls the external C<zegrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:6990
msgid "guestfs_zegrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:6992
#, no-wrap
msgid ""
" char **\n"
" guestfs_zegrepi (guestfs_h *g,\n"
"                  const char *regex,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6997 ../fish/guestfish-actions.pod:4638
msgid "This calls the external C<zegrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7009
msgid "guestfs_zero"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7011
#, no-wrap
msgid ""
" int\n"
" guestfs_zero (guestfs_h *g,\n"
"               const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7015 ../fish/guestfish-actions.pod:4648
msgid "This command writes zeroes over the first few blocks of C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7017 ../fish/guestfish-actions.pod:4650
msgid ""
"How many blocks are zeroed isn't specified (but it's I<not> enough to "
"securely wipe the device).  It should be sufficient to remove any partition "
"tables, filesystem superblocks and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7021
msgid "See also: C<guestfs_zero_device>, C<guestfs_scrub_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7032
msgid "guestfs_zero_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7034
#, no-wrap
msgid ""
" int\n"
" guestfs_zero_device (guestfs_h *g,\n"
"                      const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7038
msgid ""
"This command writes zeroes over the entire C<device>.  Compare with "
"C<guestfs_zero> which just zeroes the first few blocks of a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7052
msgid "(Added in 1.3.1)"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7054
msgid "guestfs_zerofree"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7056
#, no-wrap
msgid ""
" int\n"
" guestfs_zerofree (guestfs_h *g,\n"
"                   const char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7060 ../fish/guestfish-actions.pod:4671
msgid ""
"This runs the I<zerofree> program on C<device>.  This program claims to zero "
"unused inodes and disk blocks on an ext2/3 filesystem, thus making it "
"possible to compress the filesystem more effectively."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7065 ../fish/guestfish-actions.pod:4676
msgid "You should B<not> run this program if the filesystem is mounted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7068 ../fish/guestfish-actions.pod:4679
msgid ""
"It is possible that using this program can damage the filesystem or data on "
"the filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7075
msgid "guestfs_zfgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7077
#, no-wrap
msgid ""
" char **\n"
" guestfs_zfgrep (guestfs_h *g,\n"
"                 const char *pattern,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7082 ../fish/guestfish-actions.pod:4686
msgid "This calls the external C<zfgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7094
msgid "guestfs_zfgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7096
#, no-wrap
msgid ""
" char **\n"
" guestfs_zfgrepi (guestfs_h *g,\n"
"                  const char *pattern,\n"
"                  const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7101 ../fish/guestfish-actions.pod:4696
msgid "This calls the external C<zfgrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7113
msgid "guestfs_zfile"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7115
#, no-wrap
msgid ""
" char *\n"
" guestfs_zfile (guestfs_h *g,\n"
"                const char *meth,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7120 ../fish/guestfish-actions.pod:4706
msgid "This command runs C<file> after first decompressing C<path> using C<method>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7123 ../fish/guestfish-actions.pod:4709
msgid "C<method> must be one of C<gzip>, C<compress> or C<bzip2>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7125
msgid ""
"Since 1.0.63, use C<guestfs_file> instead which can now process compressed "
"files."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7131 ../fish/guestfish-actions.pod:4714
msgid "This function is deprecated.  In new code, use the C<file> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7140
msgid "guestfs_zgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7142
#, no-wrap
msgid ""
" char **\n"
" guestfs_zgrep (guestfs_h *g,\n"
"                const char *regex,\n"
"                const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7147 ../fish/guestfish-actions.pod:4725
msgid "This calls the external C<zgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:7159
msgid "guestfs_zgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:7161
#, no-wrap
msgid ""
" char **\n"
" guestfs_zgrepi (guestfs_h *g,\n"
"                 const char *regex,\n"
"                 const char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:7166 ../fish/guestfish-actions.pod:4735
msgid "This calls the external C<zgrep -i> program and returns the matching lines."
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:3
msgid "B<augeas>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:5
msgid ""
"The following functions: L</guestfs_aug_clear> L</guestfs_aug_close> "
"L</guestfs_aug_defnode> L</guestfs_aug_defvar> L</guestfs_aug_get> "
"L</guestfs_aug_init> L</guestfs_aug_insert> L</guestfs_aug_load> "
"L</guestfs_aug_ls> L</guestfs_aug_match> L</guestfs_aug_mv> "
"L</guestfs_aug_rm> L</guestfs_aug_save> L</guestfs_aug_set>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:21
msgid "B<inotify>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:23
msgid ""
"The following functions: L</guestfs_inotify_add_watch> "
"L</guestfs_inotify_close> L</guestfs_inotify_files> L</guestfs_inotify_init> "
"L</guestfs_inotify_read> L</guestfs_inotify_rm_watch>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:31
msgid "B<linuxfsuuid>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:33
msgid ""
"The following functions: L</guestfs_mke2fs_JU> L</guestfs_mke2journal_U> "
"L</guestfs_mkswap_U> L</guestfs_swapoff_uuid> L</guestfs_swapon_uuid>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:40
msgid "B<linuxmodules>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:42
msgid "The following functions: L</guestfs_modprobe>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:45
msgid "B<linuxxattrs>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:47
msgid ""
"The following functions: L</guestfs_getxattr> L</guestfs_getxattrs> "
"L</guestfs_lgetxattr> L</guestfs_lgetxattrs> L</guestfs_lremovexattr> "
"L</guestfs_lsetxattr> L</guestfs_lxattrlist> L</guestfs_removexattr> "
"L</guestfs_setxattr>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:58
msgid "B<luks>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:60
msgid ""
"The following functions: L</guestfs_luks_add_key> L</guestfs_luks_close> "
"L</guestfs_luks_format> L</guestfs_luks_format_cipher> "
"L</guestfs_luks_kill_slot> L</guestfs_luks_open> L</guestfs_luks_open_ro>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:69
msgid "B<lvm2>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:71
msgid ""
"The following functions: L</guestfs_is_lv> L</guestfs_lvcreate> "
"L</guestfs_lvm_remove_all> L</guestfs_lvm_set_filter> L</guestfs_lvremove> "
"L</guestfs_lvresize> L</guestfs_lvresize_free> L</guestfs_lvs> "
"L</guestfs_lvs_full> L</guestfs_pvcreate> L</guestfs_pvremove> "
"L</guestfs_pvresize> L</guestfs_pvresize_size> L</guestfs_pvs> "
"L</guestfs_pvs_full> L</guestfs_vg_activate> L</guestfs_vg_activate_all> "
"L</guestfs_vgcreate> L</guestfs_vgremove> L</guestfs_vgs> "
"L</guestfs_vgs_full>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:94
msgid "B<mknod>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:96
msgid ""
"The following functions: L</guestfs_mkfifo> L</guestfs_mknod> "
"L</guestfs_mknod_b> L</guestfs_mknod_c>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:102
msgid "B<ntfs3g>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:104
msgid "The following functions: L</guestfs_ntfs_3g_probe>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:107
msgid "B<ntfsprogs>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:109
msgid "The following functions: L</guestfs_ntfsresize> L</guestfs_ntfsresize_size>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:113
msgid "B<realpath>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:115
msgid "The following functions: L</guestfs_realpath>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:118
msgid "B<scrub>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:120
msgid ""
"The following functions: L</guestfs_scrub_device> L</guestfs_scrub_file> "
"L</guestfs_scrub_freespace>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:125
msgid "B<selinux>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:127
msgid "The following functions: L</guestfs_getcon> L</guestfs_setcon>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:131
msgid "B<xz>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:133
msgid "The following functions: L</guestfs_txz_in> L</guestfs_txz_out>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:137
msgid "B<zerofree>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:139
msgid "The following functions: L</guestfs_zerofree>"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:1
msgid "guestfs_int_bool"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:3
#, no-wrap
msgid ""
" struct guestfs_int_bool {\n"
"   int32_t i;\n"
"   int32_t b;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:8
#, no-wrap
msgid ""
" struct guestfs_int_bool_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_int_bool *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:13
#, no-wrap
msgid ""
" void guestfs_free_int_bool (struct guestfs_free_int_bool *);\n"
" void guestfs_free_int_bool_list (struct guestfs_free_int_bool_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:16
msgid "guestfs_lvm_pv"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:18
#, no-wrap
msgid ""
" struct guestfs_lvm_pv {\n"
"   char *pv_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char pv_uuid[32];\n"
"   char *pv_fmt;\n"
"   uint64_t pv_size;\n"
"   uint64_t dev_size;\n"
"   uint64_t pv_free;\n"
"   uint64_t pv_used;\n"
"   char *pv_attr;\n"
"   int64_t pv_pe_count;\n"
"   int64_t pv_pe_alloc_count;\n"
"   char *pv_tags;\n"
"   uint64_t pe_start;\n"
"   int64_t pv_mda_count;\n"
"   uint64_t pv_mda_free;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:36
#, no-wrap
msgid ""
" struct guestfs_lvm_pv_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_pv *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:41
#, no-wrap
msgid ""
" void guestfs_free_lvm_pv (struct guestfs_free_lvm_pv *);\n"
" void guestfs_free_lvm_pv_list (struct guestfs_free_lvm_pv_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:44
msgid "guestfs_lvm_vg"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:46
#, no-wrap
msgid ""
" struct guestfs_lvm_vg {\n"
"   char *vg_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char vg_uuid[32];\n"
"   char *vg_fmt;\n"
"   char *vg_attr;\n"
"   uint64_t vg_size;\n"
"   uint64_t vg_free;\n"
"   char *vg_sysid;\n"
"   uint64_t vg_extent_size;\n"
"   int64_t vg_extent_count;\n"
"   int64_t vg_free_count;\n"
"   int64_t max_lv;\n"
"   int64_t max_pv;\n"
"   int64_t pv_count;\n"
"   int64_t lv_count;\n"
"   int64_t snap_count;\n"
"   int64_t vg_seqno;\n"
"   char *vg_tags;\n"
"   int64_t vg_mda_count;\n"
"   uint64_t vg_mda_free;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:69
#, no-wrap
msgid ""
" struct guestfs_lvm_vg_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_vg *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:74
#, no-wrap
msgid ""
" void guestfs_free_lvm_vg (struct guestfs_free_lvm_vg *);\n"
" void guestfs_free_lvm_vg_list (struct guestfs_free_lvm_vg_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:77
msgid "guestfs_lvm_lv"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:79
#, no-wrap
msgid ""
" struct guestfs_lvm_lv {\n"
"   char *lv_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char lv_uuid[32];\n"
"   char *lv_attr;\n"
"   int64_t lv_major;\n"
"   int64_t lv_minor;\n"
"   int64_t lv_kernel_major;\n"
"   int64_t lv_kernel_minor;\n"
"   uint64_t lv_size;\n"
"   int64_t seg_count;\n"
"   char *origin;\n"
"   /* The next field is [0..100] or -1 meaning 'not present': */\n"
"   float snap_percent;\n"
"   /* The next field is [0..100] or -1 meaning 'not present': */\n"
"   float copy_percent;\n"
"   char *move_pv;\n"
"   char *lv_tags;\n"
"   char *mirror_log;\n"
"   char *modules;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:101
#, no-wrap
msgid ""
" struct guestfs_lvm_lv_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_lv *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:106
#, no-wrap
msgid ""
" void guestfs_free_lvm_lv (struct guestfs_free_lvm_lv *);\n"
" void guestfs_free_lvm_lv_list (struct guestfs_free_lvm_lv_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:111
#, no-wrap
msgid ""
" struct guestfs_stat {\n"
"   int64_t dev;\n"
"   int64_t ino;\n"
"   int64_t mode;\n"
"   int64_t nlink;\n"
"   int64_t uid;\n"
"   int64_t gid;\n"
"   int64_t rdev;\n"
"   int64_t size;\n"
"   int64_t blksize;\n"
"   int64_t blocks;\n"
"   int64_t atime;\n"
"   int64_t mtime;\n"
"   int64_t ctime;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:127
#, no-wrap
msgid ""
" struct guestfs_stat_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_stat *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:132
#, no-wrap
msgid ""
" void guestfs_free_stat (struct guestfs_free_stat *);\n"
" void guestfs_free_stat_list (struct guestfs_free_stat_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:137
#, no-wrap
msgid ""
" struct guestfs_statvfs {\n"
"   int64_t bsize;\n"
"   int64_t frsize;\n"
"   int64_t blocks;\n"
"   int64_t bfree;\n"
"   int64_t bavail;\n"
"   int64_t files;\n"
"   int64_t ffree;\n"
"   int64_t favail;\n"
"   int64_t fsid;\n"
"   int64_t flag;\n"
"   int64_t namemax;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:151
#, no-wrap
msgid ""
" struct guestfs_statvfs_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_statvfs *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:156
#, no-wrap
msgid ""
" void guestfs_free_statvfs (struct guestfs_free_statvfs *);\n"
" void guestfs_free_statvfs_list (struct guestfs_free_statvfs_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:159
msgid "guestfs_dirent"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:161
#, no-wrap
msgid ""
" struct guestfs_dirent {\n"
"   int64_t ino;\n"
"   char ftyp;\n"
"   char *name;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:167
#, no-wrap
msgid ""
" struct guestfs_dirent_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_dirent *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:172
#, no-wrap
msgid ""
" void guestfs_free_dirent (struct guestfs_free_dirent *);\n"
" void guestfs_free_dirent_list (struct guestfs_free_dirent_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:177
#, no-wrap
msgid ""
" struct guestfs_version {\n"
"   int64_t major;\n"
"   int64_t minor;\n"
"   int64_t release;\n"
"   char *extra;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:184
#, no-wrap
msgid ""
" struct guestfs_version_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_version *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:189
#, no-wrap
msgid ""
" void guestfs_free_version (struct guestfs_free_version *);\n"
" void guestfs_free_version_list (struct guestfs_free_version_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:192
msgid "guestfs_xattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:194
#, no-wrap
msgid ""
" struct guestfs_xattr {\n"
"   char *attrname;\n"
"   /* The next two fields describe a byte array. */\n"
"   uint32_t attrval_len;\n"
"   char *attrval;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:201
#, no-wrap
msgid ""
" struct guestfs_xattr_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_xattr *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:206
#, no-wrap
msgid ""
" void guestfs_free_xattr (struct guestfs_free_xattr *);\n"
" void guestfs_free_xattr_list (struct guestfs_free_xattr_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:209
msgid "guestfs_inotify_event"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:211
#, no-wrap
msgid ""
" struct guestfs_inotify_event {\n"
"   int64_t in_wd;\n"
"   uint32_t in_mask;\n"
"   uint32_t in_cookie;\n"
"   char *in_name;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:218
#, no-wrap
msgid ""
" struct guestfs_inotify_event_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_inotify_event *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:223
#, no-wrap
msgid ""
" void guestfs_free_inotify_event (struct guestfs_free_inotify_event *);\n"
" void guestfs_free_inotify_event_list (struct "
"guestfs_free_inotify_event_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:226
msgid "guestfs_partition"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:228
#, no-wrap
msgid ""
" struct guestfs_partition {\n"
"   int32_t part_num;\n"
"   uint64_t part_start;\n"
"   uint64_t part_end;\n"
"   uint64_t part_size;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:235
#, no-wrap
msgid ""
" struct guestfs_partition_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_partition *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:240
#, no-wrap
msgid ""
" void guestfs_free_partition (struct guestfs_free_partition *);\n"
" void guestfs_free_partition_list (struct guestfs_free_partition_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:243
msgid "guestfs_application"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:245
#, no-wrap
msgid ""
" struct guestfs_application {\n"
"   char *app_name;\n"
"   char *app_display_name;\n"
"   int32_t app_epoch;\n"
"   char *app_version;\n"
"   char *app_release;\n"
"   char *app_install_path;\n"
"   char *app_trans_path;\n"
"   char *app_publisher;\n"
"   char *app_url;\n"
"   char *app_source_package;\n"
"   char *app_summary;\n"
"   char *app_description;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:260
#, no-wrap
msgid ""
" struct guestfs_application_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_application *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:265
#, no-wrap
msgid ""
" void guestfs_free_application (struct guestfs_free_application *);\n"
" void guestfs_free_application_list (struct guestfs_free_application_list "
"*);\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:5
msgid "guestfish - the libguestfs Filesystem Interactive SHell"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:9
#, no-wrap
msgid ""
" guestfish [--options] [commands]\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:11
#, no-wrap
msgid ""
" guestfish\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:13
#, no-wrap
msgid ""
" guestfish [--ro|--rw] -a disk.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:15
#, no-wrap
msgid ""
" guestfish [--ro|--rw] -a disk.img -m dev[:mountpoint]\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:17
#, no-wrap
msgid ""
" guestfish -d libvirt-domain\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:19
#, no-wrap
msgid ""
" guestfish [--ro|--rw] -a disk.img -i\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:21
#, no-wrap
msgid ""
" guestfish -d libvirt-domain -i\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:23 ../fuse/guestmount.pod:15
msgid "WARNING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:25
msgid ""
"Using guestfish in read/write mode on live virtual machines can be "
"dangerous, potentially causing disk corruption.  Use the I<--ro> (read-only) "
"option to use guestfish safely if the disk image or virtual machine might be "
"live."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:32
msgid ""
"Guestfish is a shell and command-line tool for examining and modifying "
"virtual machine filesystems.  It uses libguestfs and exposes all of the "
"functionality of the guestfs API, see L<guestfs(3)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:36
msgid ""
"Guestfish gives you structured access to the libguestfs API, from shell "
"scripts or the command line or interactively.  If you want to rescue a "
"broken virtual machine image, you should look at the L<virt-rescue(1)> "
"command."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:41 ../fish/guestfish.pod:897 ../fuse/guestmount.pod:39
msgid "EXAMPLES"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:43
msgid "As an interactive shell"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:45
#, no-wrap
msgid ""
" $ guestfish\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:47
#, no-wrap
msgid ""
" Welcome to guestfish, the libguestfs filesystem interactive shell for\n"
" editing virtual machine filesystems.\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:50
#, no-wrap
msgid ""
" Type: 'help' for a list of commands\n"
"       'man' to read the manual\n"
"       'quit' to quit the shell\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:54
#, no-wrap
msgid ""
" ><fs> add-ro disk.img\n"
" ><fs> run\n"
" ><fs> list-filesystems\n"
" /dev/sda1: ext4\n"
" /dev/vg_guest/lv_root: ext4\n"
" /dev/vg_guest/lv_swap: swap\n"
" ><fs> mount /dev/vg_guest/lv_root /\n"
" ><fs> cat /etc/fstab\n"
" # /etc/fstab\n"
" # Created by anaconda\n"
" [...]\n"
" ><fs> exit\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:67
msgid "From shell scripts"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:69
msgid "Create a new C</etc/motd> file in a guest or disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:71
#, no-wrap
msgid ""
" guestfish <<_EOF_\n"
" add disk.img\n"
" run\n"
" mount /dev/vg_guest/lv_root /\n"
" write /etc/motd \"Welcome, new users\"\n"
" _EOF_\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:78
msgid "List the LVM logical volumes in a disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:80
#, no-wrap
msgid ""
" guestfish -a disk.img --ro <<_EOF_\n"
" run\n"
" lvs\n"
" _EOF_\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:85
msgid "List all the filesystems in a disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:87
#, no-wrap
msgid ""
" guestfish -a disk.img --ro <<_EOF_\n"
" run\n"
" list-filesystems\n"
" _EOF_\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:92
msgid "On one command line"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:94
msgid "Update C</etc/resolv.conf> in a guest:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:96
#, no-wrap
msgid ""
" guestfish \\\n"
"   add disk.img : run : mount /dev/vg_guest/lv_root / : \\\n"
"   write /etc/resolv.conf \"nameserver 1.2.3.4\"\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:100
msgid "Edit C</boot/grub/grub.conf> interactively:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:102
#, no-wrap
msgid ""
" guestfish --rw --add disk.img \\\n"
"   --mount /dev/vg_guest/lv_root \\\n"
"   --mount /dev/sda1:/boot \\\n"
"   edit /boot/grub/grub.conf\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:107
msgid "Mount disks automatically"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:109
msgid ""
"Use the I<-i> option to automatically mount the disks from a virtual "
"machine:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:112
#, no-wrap
msgid ""
" guestfish --ro -a disk.img -i cat /etc/group\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:114
#, no-wrap
msgid ""
" guestfish --ro -d libvirt-domain -i cat /etc/group\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:116
msgid "Another way to edit C</boot/grub/grub.conf> interactively is:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:118
#, no-wrap
msgid ""
" guestfish --rw -a disk.img -i edit /boot/grub/grub.conf\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:120
msgid "As a script interpreter"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:122
msgid "Create a 100MB disk containing an ext2-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:124
#, no-wrap
msgid ""
" #!/usr/bin/guestfish -f\n"
" sparse test1.img 100M\n"
" run\n"
" part-disk /dev/sda mbr\n"
" mkfs ext2 /dev/sda1\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:130
msgid "Start with a prepared disk"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:132
msgid ""
"An alternate way to create a 100MB disk called C<test1.img> containing a "
"single ext2-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:135
#, no-wrap
msgid ""
" guestfish -N fs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:137
msgid "To list what is available do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:139 ../fish/guestfish.pod:888
#, no-wrap
msgid ""
" guestfish -N help | less\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:141
msgid "Remote control"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:143
#, no-wrap
msgid ""
" eval \"`guestfish --listen`\"\n"
" guestfish --remote add-ro disk.img\n"
" guestfish --remote run\n"
" guestfish --remote lvs\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:148 ../test-tool/libguestfs-test-tool.pod:37 ../fuse/guestmount.pod:73
msgid "OPTIONS"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:152 ../fuse/guestmount.pod:131
msgid "B<--help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:154
msgid "Displays general help on options."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:156
msgid "B<-h>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:158
msgid "B<--cmd-help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:160
msgid "Lists all available guestfish commands."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:162
msgid "B<-h cmd>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:164
msgid "B<--cmd-help cmd>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:166
msgid "Displays detailed help on a single command C<cmd>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:168
msgid "B<-a image>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:170
msgid "B<--add image>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:172
msgid "Add a block device or virtual machine image to the shell."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:174 ../fuse/guestmount.pod:81
msgid ""
"The format of the disk image is auto-detected.  To override this and force a "
"particular format use the I<--format=..> option."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:177
msgid ""
"Using this flag is mostly equivalent to using the C<add> command, with "
"C<readonly:true> if the I<--ro> flag was given, and with C<format:...> if "
"the I<--format:...> flag was given."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:181
msgid "B<-c URI>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:183
msgid "B<--connect URI>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:185 ../fuse/guestmount.pod:86
msgid ""
"When used in conjunction with the I<-d> option, this specifies the libvirt "
"URI to use.  The default is to use the default libvirt connection."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:189
msgid "B<--csh>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:191
msgid ""
"If using the I<--listen> option and a csh-like shell, use this option.  See "
"section L</REMOTE CONTROL AND CSH> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:194
msgid "B<-d libvirt-domain>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:196
msgid "B<--domain libvirt-domain>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:198 ../fuse/guestmount.pod:92
msgid ""
"Add disks from the named libvirt domain.  If the I<--ro> option is also "
"used, then any libvirt domain can be used.  However in write mode, only "
"libvirt domains which are shut down can be named here."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:202
msgid ""
"Using this flag is mostly equivalent to using the C<add-domain> command, "
"with C<readonly:true> if the I<--ro> flag was given, and with C<format:...> "
"if the I<--format:...> flag was given."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:206
msgid "B<-D>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:208
msgid "B<--no-dest-paths>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:210
msgid ""
"Don't tab-complete paths on the guest filesystem.  It is useful to be able "
"to hit the tab key to complete paths on the guest filesystem, but this "
"causes extra \"hidden\" guestfs calls to be made, so this option is here to "
"allow this feature to be disabled."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:215 ../fuse/guestmount.pod:108
msgid "B<--echo-keys>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:217 ../fuse/guestmount.pod:110
msgid ""
"When prompting for keys and passphrases, guestfish normally turns echoing "
"off so you cannot see what you are typing.  If you are not worried about "
"Tempest attacks and there is no one else in the room you can specify this "
"flag to see what you are typing."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:222
msgid "B<-f file>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:224
msgid "B<--file file>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:226
msgid "Read commands from C<file>.  To write pure guestfish scripts, use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:229
#, no-wrap
msgid ""
" #!/usr/bin/guestfish -f\n"
"\n"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:231
msgid "B<--format=raw|qcow2|..>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:233
msgid "B<--format>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:235 ../fuse/guestmount.pod:117
msgid ""
"The default for the I<-a> option is to auto-detect the format of the disk "
"image.  Using this forces the disk format for I<-a> options which follow on "
"the command line.  Using I<--format> with no argument switches back to "
"auto-detection for subsequent I<-a> options."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:240 ../fish/guestfish.pod:594
msgid "For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:242
#, no-wrap
msgid ""
" guestfish --format=raw -a disk.img\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:244
msgid "forces raw format (no auto-detection) for C<disk.img>."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:246
#, no-wrap
msgid ""
" guestfish --format=raw -a disk.img --format -a another.img\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:248
msgid ""
"forces raw format (no auto-detection) for C<disk.img> and reverts to "
"auto-detection for C<another.img>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:251
msgid ""
"If you have untrusted raw-format guest disk images, you should use this "
"option to specify the disk format.  This avoids a possible security problem "
"with malicious guests (CVE-2010-3851).  See also L</add-drive-opts>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:256
msgid "B<-i>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:258
msgid "B<--inspector>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:260 ../fuse/guestmount.pod:137
msgid ""
"Using L<virt-inspector(1)> code, inspect the disks looking for an operating "
"system and mount filesystems as they would be mounted on the real virtual "
"machine."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:264
msgid "Typical usage is either:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:266
#, no-wrap
msgid ""
" guestfish -d myguest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:268
msgid "(for an inactive libvirt domain called I<myguest>), or:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:270
#, no-wrap
msgid ""
" guestfish --ro -d myguest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:272
msgid "(for active domains, readonly), or specify the block device directly:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:274
#, no-wrap
msgid ""
" guestfish --rw -a /dev/Guests/MyGuest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:276
msgid ""
"Note that the command line syntax changed slightly over older versions of "
"guestfish.  You can still use the old syntax:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:279
#, no-wrap
msgid ""
" guestfish [--ro] -i disk.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:281
#, no-wrap
msgid ""
" guestfish [--ro] -i libvirt-domain\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:283
msgid ""
"Using this flag is mostly equivalent to using the C<inspect-os> command and "
"then using other commands to mount the filesystems that were found."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:287 ../fuse/guestmount.pod:141
msgid "B<--keys-from-stdin>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:289 ../fuse/guestmount.pod:143
msgid ""
"Read key or passphrase parameters from stdin.  The default is to try to read "
"passphrases from the user by opening C</dev/tty>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:292
msgid "B<--listen>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:294
msgid ""
"Fork into the background and listen for remote commands.  See section "
"L</REMOTE CONTROL GUESTFISH OVER A SOCKET> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:297
msgid "B<-m dev[:mountpoint]>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:299
msgid "B<--mount dev[:mountpoint]>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:301
msgid "Mount the named partition or logical volume on the given mountpoint."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:303
msgid "If the mountpoint is omitted, it defaults to C</>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:305
msgid "You have to mount something on C</> before most commands will work."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:307
msgid ""
"If any I<-m> or I<--mount> options are given, the guest is automatically "
"launched."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:310
msgid ""
"If you don't know what filesystems a disk image contains, you can either run "
"guestfish without this option, then list the partitions, filesystems and LVs "
"available (see L</list-partitions>, L</list-filesystems> and L</lvs> "
"commands), or you can use the L<virt-filesystems(1)> program."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:316
msgid ""
"Using this flag is mostly equivalent to using the C<mount-options> command "
"or the C<mount-ro> command if the I<--ro> flag was given."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:319
msgid "B<-n>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:321
msgid "B<--no-sync>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:323
msgid ""
"Disable autosync.  This is enabled by default.  See the discussion of "
"autosync in the L<guestfs(3)> manpage."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:326
msgid "B<-N type>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:328
msgid "B<--new type>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:330
msgid "B<-N help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:332
msgid ""
"Prepare a fresh disk image formatted as \"type\".  This is an alternative to "
"the I<-a> option: whereas I<-a> adds an existing disk, I<-N> creates a "
"preformatted disk with a filesystem and adds it.  See L</PREPARED DISK "
"IMAGES> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:337
msgid "B<--progress-bars>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:339
msgid "Enable progress bars, even when guestfish is used non-interactively."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:341
msgid ""
"Progress bars are enabled by default when guestfish is used as an "
"interactive shell."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:344
msgid "B<--no-progress-bars>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:346
msgid "Disable progress bars."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:348
msgid "B<--remote[=pid]>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:350
msgid ""
"Send remote commands to C<$GUESTFISH_PID> or C<pid>.  See section L</REMOTE "
"CONTROL GUESTFISH OVER A SOCKET> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:353
msgid "B<-r>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:355
msgid "B<--ro>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:357
msgid ""
"This changes the I<-a>, I<-d> and I<-m> options so that disks are added and "
"mounts are done read-only."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:360
msgid ""
"The option must always be used if the disk image or virtual machine might be "
"running, and is generally recommended in cases where you don't need write "
"access to the disk."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:364
msgid ""
"Note that prepared disk images created with I<-N> are not affected by this "
"option.  Also commands like C<add> are not affected - you have to specify "
"the C<readonly:true> option explicitly if you need it."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:368
msgid "See also L</OPENING DISKS FOR READ AND WRITE> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:370 ../fuse/guestmount.pod:208
msgid "B<--selinux>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:372
msgid "Enable SELinux support for the guest.  See L<guestfs(3)/SELINUX>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:374
msgid "B<-v>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:376
msgid "B<--verbose>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:378
msgid ""
"Enable very verbose messages.  This is particularly useful if you find a "
"bug."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:381
msgid "B<-V>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:383
msgid "B<--version>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:385
msgid "Display the guestfish / libguestfs version number and exit."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:387
msgid "B<-w>"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:389
msgid "B<--rw>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:391
msgid ""
"This option does nothing at the moment.  See L</OPENING DISKS FOR READ AND "
"WRITE> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:394
msgid "B<-x>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:396
msgid "Echo each command before executing it."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:400
msgid "COMMANDS ON COMMAND LINE"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:402
msgid "Any additional (non-option) arguments are treated as commands to execute."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:405
msgid ""
"Commands to execute should be separated by a colon (C<:>), where the colon "
"is a separate parameter.  Thus:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:408
#, no-wrap
msgid ""
" guestfish cmd [args...] : cmd [args...] : cmd [args...] ...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:410
msgid ""
"If there are no additional arguments, then we enter a shell, either an "
"interactive shell with a prompt (if the input is a terminal) or a "
"non-interactive shell."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:414
msgid ""
"In either command line mode or non-interactive shell, the first command that "
"gives an error causes the whole shell to exit.  In interactive mode (with a "
"prompt) if a command fails, you can continue to enter commands."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:419
msgid "USING launch (OR run)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:421
msgid ""
"As with L<guestfs(3)>, you must first configure your guest by adding disks, "
"then launch it, then mount any disks you need, and finally issue "
"actions/commands.  So the general order of the day is:"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:429
msgid "add or -a/--add"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:433
msgid "launch (aka run)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:437
msgid "mount or -m/--mount"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:441
msgid "any other commands"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:445
msgid ""
"C<run> is a synonym for C<launch>.  You must C<launch> (or C<run>)  your "
"guest before mounting or performing any other commands."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:448
msgid ""
"The only exception is that if any of the I<-i>, I<-m>, I<--mount>, I<-N> or "
"I<--new> options were given then C<run> is done automatically, simply "
"because guestfish can't perform the action you asked for without doing this."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:453
msgid "OPENING DISKS FOR READ AND WRITE"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:455
msgid ""
"The guestfish (and L<guestmount(1)>) options I<--ro> and I<--rw> affect "
"whether the other command line options I<-a>, I<-c>, I<-d>, I<-i> and I<-m> "
"open disk images read-only or for writing."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:459
msgid ""
"In libguestfs E<lt> 1.6.2, guestfish and guestmount defaulted to opening "
"disk images supplied on the command line for write.  To open a disk image "
"read-only you have to do I<-a image --ro>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:463
msgid ""
"This matters: If you accidentally open a live VM disk image writable then "
"you will cause irreversible disk corruption."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:466
msgid ""
"By libguestfs 1.8 we intend to change the default the other way.  Disk "
"images will be opened read-only.  You will have to either specify "
"I<guestfish --rw> or change a configuration file in order to get write "
"access for disk images specified by those other command line options."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:471
msgid ""
"This version of guestfish has a I<--rw> option which does nothing (it is "
"already the default).  However it is highly recommended that you use this "
"option to indicate that guestfish needs write access, and to prepare your "
"scripts for the day when this option will be required for write access."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:477
msgid ""
"B<Note:> This does I<not> affect commands like L</add> and L</mount>, or any "
"other libguestfs program apart from guestfish and guestmount."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:480
msgid "QUOTING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:482
msgid ""
"You can quote ordinary parameters using either single or double quotes.  For "
"example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:485
#, no-wrap
msgid ""
" add \"file with a space.img\"\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:487
#, no-wrap
msgid ""
" rm '/file name'\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:489
#, no-wrap
msgid ""
" rm '/\"'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:491
msgid ""
"A few commands require a list of strings to be passed.  For these, use a "
"whitespace-separated list, enclosed in quotes.  Strings containing "
"whitespace to be passed through must be enclosed in single quotes.  A "
"literal single quote must be escaped with a backslash."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:496
#, no-wrap
msgid ""
" vgcreate VG \"/dev/sda1 /dev/sdb1\"\n"
" command \"/bin/echo 'foo      bar'\"\n"
" command \"/bin/echo \\'foo\\'\"\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:500
msgid "OPTIONAL ARGUMENTS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:502
msgid ""
"Some commands take optional arguments.  These arguments appear in this "
"documentation as C<[argname:..]>.  You can use them as in these examples:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:506
#, no-wrap
msgid ""
" add-drive-opts filename\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:508
#, no-wrap
msgid ""
" add-drive-opts filename readonly:true\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:510
#, no-wrap
msgid ""
" add-drive-opts filename format:qcow2 readonly:false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:512
msgid ""
"Each optional argument can appear at most once.  All optional arguments must "
"appear after the required ones."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:515
msgid "NUMBERS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:517
msgid "This section applies to all commands which can take integers as parameters."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:520
msgid "SIZE SUFFIX"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:522
msgid ""
"When the command takes a parameter measured in bytes, you can use one of the "
"following suffixes to specify kilobytes, megabytes and larger sizes:"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:528
msgid "B<k> or B<K> or B<KiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:530
msgid "The size in kilobytes (multiplied by 1024)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:532
msgid "B<KB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:534
msgid "The size in SI 1000 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:536
msgid "B<M> or B<MiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:538
msgid "The size in megabytes (multiplied by 1048576)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:540
msgid "B<MB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:542
msgid "The size in SI 1000000 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:544
msgid "B<G> or B<GiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:546
msgid "The size in gigabytes (multiplied by 2**30)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:548
msgid "B<GB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:550
msgid "The size in SI 10**9 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:552
msgid "B<T> or B<TiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:554
msgid "The size in terabytes (multiplied by 2**40)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:556
msgid "B<TB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:558
msgid "The size in SI 10**12 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:560
msgid "B<P> or B<PiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:562
msgid "The size in petabytes (multiplied by 2**50)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:564
msgid "B<PB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:566
msgid "The size in SI 10**15 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:568
msgid "B<E> or B<EiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:570
msgid "The size in exabytes (multiplied by 2**60)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:572
msgid "B<EB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:574
msgid "The size in SI 10**18 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:576
msgid "B<Z> or B<ZiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:578
msgid "The size in zettabytes (multiplied by 2**70)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:580
msgid "B<ZB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:582
msgid "The size in SI 10**21 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:584
msgid "B<Y> or B<YiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:586
msgid "The size in yottabytes (multiplied by 2**80)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:588
msgid "B<YB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:590
msgid "The size in SI 10**24 byte units."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:596
#, no-wrap
msgid ""
" truncate-size /file 1G\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:598
msgid "would truncate the file to 1 gigabyte."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:600
msgid ""
"Be careful because a few commands take sizes in kilobytes or megabytes "
"(eg. the parameter to L</memsize> is specified in megabytes already).  "
"Adding a suffix will probably not do what you expect."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:604
msgid "OCTAL AND HEXADECIMAL NUMBERS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:606
msgid ""
"For specifying the radix (base) use the C convention: C<0> to prefix an "
"octal number or C<0x> to prefix a hexadecimal number.  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:609
#, no-wrap
msgid ""
" 1234      decimal number 1234\n"
" 02322     octal number, equivalent to decimal 1234\n"
" 0x4d2     hexadecimal number, equivalent to decimal 1234\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:613
msgid ""
"When using the C<chmod> command, you almost always want to specify an octal "
"number for the mode, and you must prefix it with C<0> (unlike the Unix "
"L<chmod(1)> program):"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:617
#, no-wrap
msgid ""
" chmod 0777 /public  # OK\n"
" chmod 777 /public   # WRONG! This is mode 777 decimal = 01411 octal.\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:620
msgid ""
"Commands that return numbers usually print them in decimal, but some "
"commands print numbers in other radices (eg. C<umask> prints the mode in "
"octal, preceeded by C<0>)."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:624
msgid "WILDCARDS AND GLOBBING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:626
msgid ""
"Neither guestfish nor the underlying guestfs API performs wildcard expansion "
"(globbing) by default.  So for example the following will not do what you "
"expect:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:630
#, no-wrap
msgid ""
" rm-rf /home/*\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:632
msgid ""
"Assuming you don't have a directory called literally C</home/*> then the "
"above command will return an error."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:635
msgid "To perform wildcard expansion, use the C<glob> command."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:637
#, no-wrap
msgid ""
" glob rm-rf /home/*\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:639
msgid ""
"runs C<rm-rf> on each path that matches (ie. potentially running the command "
"many times), equivalent to:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:642
#, no-wrap
msgid ""
" rm-rf /home/jim\n"
" rm-rf /home/joe\n"
" rm-rf /home/mary\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:646
msgid "C<glob> only works on simple guest paths and not on device names."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:648
msgid ""
"If you have several parameters, each containing a wildcard, then glob will "
"perform a Cartesian product."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:651
msgid "COMMENTS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:653
msgid ""
"Any line which starts with a I<#> character is treated as a comment and "
"ignored.  The I<#> can optionally be preceeded by whitespace, but B<not> by "
"a command.  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:657
#, no-wrap
msgid ""
" # this is a comment\n"
"         # this is a comment\n"
" foo # NOT a comment\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:661
msgid "Blank lines are also ignored."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:663
msgid "RUNNING COMMANDS LOCALLY"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:665
msgid ""
"Any line which starts with a I<!> character is treated as a command sent to "
"the local shell (C</bin/sh> or whatever L<system(3)> uses).  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:669
#, no-wrap
msgid ""
" !mkdir local\n"
" tgz-out /remote local/remote-data.tar.gz\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:672
msgid ""
"will create a directory C<local> on the host, and then export the contents "
"of C</remote> on the mounted filesystem to C<local/remote-data.tar.gz>.  "
"(See C<tgz-out>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:676
msgid ""
"To change the local directory, use the C<lcd> command.  C<!cd> will have no "
"effect, due to the way that subprocesses work in Unix."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:679
msgid "PIPES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:681
msgid ""
"Use C<command E<lt>spaceE<gt> | command> to pipe the output of the first "
"command (a guestfish command) to the second command (any host command).  For "
"example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:685
#, no-wrap
msgid ""
" cat /etc/passwd | awk -F: '$3 == 0 { print }'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:687
msgid ""
"(where C<cat> is the guestfish cat command, but C<awk> is the host awk "
"program).  The above command would list all accounts in the guest filesystem "
"which have UID 0, ie. root accounts including backdoors.  Other examples:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:692
#, no-wrap
msgid ""
" hexdump /bin/ls | head\n"
" list-devices | tail -1\n"
" tgz-out / - | tar ztf -\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:696
msgid ""
"The space before the pipe symbol is required, any space after the pipe "
"symbol is optional.  Everything after the pipe symbol is just passed "
"straight to the host shell, so it can contain redirections, globs and "
"anything else that makes sense on the host side."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:701
msgid ""
"To use a literal argument which begins with a pipe symbol, you have to quote "
"it, eg:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:704
#, no-wrap
msgid ""
" echo \"|\"\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:706
msgid "HOME DIRECTORIES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:708
msgid ""
"If a parameter starts with the character C<~> then the tilde may be expanded "
"as a home directory path (either C<~> for the current user's home directory, "
"or C<~user> for another user)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:712
msgid ""
"Note that home directory expansion happens for users known I<on the host>, "
"not in the guest filesystem."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:715
msgid ""
"To use a literal argument which begins with a tilde, you have to quote it, "
"eg:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:718
#, no-wrap
msgid ""
" echo \"~\"\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:722
msgid ""
"Libguestfs has some support for Linux guests encrypted according to the "
"Linux Unified Key Setup (LUKS) standard, which includes nearly all whole "
"disk encryption systems used by modern Linux guests.  Currently only "
"LVM-on-LUKS is supported."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:727
msgid "Identify encrypted block devices and partitions using L</vfs-type>:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:729
#, no-wrap
msgid ""
" ><fs> vfs-type /dev/sda2\n"
" crypto_LUKS\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:732
msgid ""
"Then open those devices using L</luks-open>.  This creates a device-mapper "
"device called C</dev/mapper/luksdev>."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:735
#, no-wrap
msgid ""
" ><fs> luks-open /dev/sda2 luksdev\n"
" Enter key or passphrase (\"key\"): <enter the passphrase>\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:738
msgid ""
"Finally you have to tell LVM to scan for volume groups on the newly created "
"mapper device:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:741
#, no-wrap
msgid ""
" vgscan\n"
" vg-activate-all true\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:744
msgid "The logical volume(s) can now be mounted in the usual way."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:746
msgid ""
"Before closing a LUKS device you must unmount any logical volumes on it and "
"deactivate the volume groups by calling C<vg-activate false VG> on each "
"one.  Then you can close the mapper device:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:750
#, no-wrap
msgid ""
" vg-activate false /dev/VG\n"
" luks-close /dev/mapper/luksdev\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:753
msgid "WINDOWS PATHS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:755
msgid ""
"If a path is prefixed with C<win:> then you can use Windows-style paths "
"(with some limitations).  The following commands are equivalent:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:758
#, no-wrap
msgid ""
" file /WINDOWS/system32/config/system.LOG\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:760
#, no-wrap
msgid ""
" file win:/windows/system32/config/system.log\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:762
#, no-wrap
msgid ""
" file win:\\windows\\system32\\config\\system.log\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:764
#, no-wrap
msgid ""
" file WIN:C:\\Windows\\SYSTEM32\\conFIG\\SYSTEM.LOG\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:766
msgid ""
"This syntax implicitly calls C<case-sensitive-path> (q.v.) so it also "
"handles case insensitivity like Windows would.  This only works in argument "
"positions that expect a path."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:770
msgid "UPLOADING AND DOWNLOADING FILES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:772
msgid ""
"For commands such as C<upload>, C<download>, C<tar-in>, C<tar-out> and "
"others which upload from or download to a local file, you can use the "
"special filename C<-> to mean \"from stdin\" or \"to stdout\".  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:776
#, no-wrap
msgid ""
" upload - /foo\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:778
msgid "reads stdin and creates from that a file C</foo> in the disk image, and:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:781
#, no-wrap
msgid ""
" tar-out /etc - | tar tf -\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:783
msgid ""
"writes the tarball to stdout and then pipes that into the external \"tar\" "
"command (see L</PIPES>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:786
msgid ""
"When using C<-> to read from stdin, the input is read up to the end of "
"stdin.  You can also use a special \"heredoc\"-like syntax to read up to "
"some arbitrary end marker:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:790
#, no-wrap
msgid ""
" upload -<<END /foo\n"
" input line 1\n"
" input line 2\n"
" input line 3\n"
" END\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:796
msgid ""
"Any string of characters can be used instead of C<END>.  The end marker must "
"appear on a line of its own, without any preceeding or following characters "
"(not even spaces)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:800
msgid ""
"Note that the C<-E<lt>E<lt>> syntax only applies to parameters used to "
"upload local files (so-called \"FileIn\" parameters in the generator)."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:803
msgid "EXIT ON ERROR BEHAVIOUR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:805
msgid ""
"By default, guestfish will ignore any errors when in interactive mode "
"(ie. taking commands from a human over a tty), and will exit on the first "
"error in non-interactive mode (scripts, commands given on the command line)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:810
msgid ""
"If you prefix a command with a I<-> character, then that command will not "
"cause guestfish to exit, even if that (one) command returns an error."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:814
msgid "REMOTE CONTROL GUESTFISH OVER A SOCKET"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:816
msgid ""
"Guestfish can be remote-controlled over a socket.  This is useful "
"particularly in shell scripts where you want to make several different "
"changes to a filesystem, but you don't want the overhead of starting up a "
"guestfish process each time."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:821
msgid "Start a guestfish server process using:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:823
#, no-wrap
msgid ""
" eval \"`guestfish --listen`\"\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:825
msgid "and then send it commands by doing:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:827
#, no-wrap
msgid ""
" guestfish --remote cmd [...]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:829
msgid "To cause the server to exit, send it the exit command:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:831
#, no-wrap
msgid ""
" guestfish --remote exit\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:833
msgid ""
"Note that the server will normally exit if there is an error in a command.  "
"You can change this in the usual way.  See section L</EXIT ON ERROR "
"BEHAVIOUR>."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:837
msgid "CONTROLLING MULTIPLE GUESTFISH PROCESSES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:839
msgid ""
"The C<eval> statement sets the environment variable C<$GUESTFISH_PID>, which "
"is how the I<--remote> option knows where to send the commands.  You can "
"have several guestfish listener processes running using:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:843
#, no-wrap
msgid ""
" eval \"`guestfish --listen`\"\n"
" pid1=$GUESTFISH_PID\n"
" eval \"`guestfish --listen`\"\n"
" pid2=$GUESTFISH_PID\n"
" ...\n"
" guestfish --remote=$pid1 cmd\n"
" guestfish --remote=$pid2 cmd\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:851
msgid "REMOTE CONTROL AND CSH"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:853
msgid ""
"When using csh-like shells (csh, tcsh etc) you have to add the I<--csh> "
"option:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:856
#, no-wrap
msgid ""
" eval \"`guestfish --listen --csh`\"\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:858
msgid "REMOTE CONTROL DETAILS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:860
msgid ""
"Remote control happens over a Unix domain socket called "
"C</tmp/.guestfish-$UID/socket-$PID>, where C<$UID> is the effective user ID "
"of the process, and C<$PID> is the process ID of the server."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:864
msgid "Guestfish client and server versions must match exactly."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:866
msgid "PREPARED DISK IMAGES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:868
msgid ""
"Use the I<-N type> or I<--new type> parameter to select one of a set of "
"preformatted disk images that guestfish can make for you to save typing.  "
"This is particularly useful for testing purposes.  This option is used "
"instead of the I<-a> option, and like I<-a> can appear multiple times (and "
"can be mixed with I<-a>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:874
msgid ""
"The new disk is called C<test1.img> for the first I<-N>, C<test2.img> for "
"the second and so on.  Existing files in the current directory are "
"I<overwritten>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:878
msgid ""
"The type briefly describes how the disk should be sized, partitioned, how "
"filesystem(s) should be created, and how content should be added.  "
"Optionally the type can be followed by extra parameters, separated by C<:> "
"(colon) characters.  For example, I<-N fs> creates a default 100MB, "
"sparsely-allocated disk, containing a single partition, with the partition "
"formatted as ext2.  I<-N fs:ext4:1G> is the same, but for an ext4 filesystem "
"on a 1GB disk instead."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:886
msgid "To list the available types and any extra parameters they take, run:"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:890
msgid ""
"Note that the prepared filesystem is not mounted.  You would usually have to "
"use the C<mount /dev/sda1 /> command or add the I<-m /dev/sda1> option."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:894
msgid ""
"If any I<-N> or I<--new> options are given, the guest is automatically "
"launched."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:899
msgid "Create a 100MB disk with an ext4-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:901
#, no-wrap
msgid ""
" guestfish -N fs:ext4\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:903
msgid "Create a 32MB disk with a VFAT-formatted partition, and mount it:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:905
#, no-wrap
msgid ""
" guestfish -N fs:vfat:32M -m /dev/sda1\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:907
msgid "Create a blank 200MB disk:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:909
#, no-wrap
msgid ""
" guestfish -N disk:200M\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:911
msgid "PROGRESS BARS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:913
msgid ""
"Some (not all) long-running commands send progress notification messages as "
"they are running.  Guestfish turns these messages into progress bars."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:917
msgid ""
"When a command that supports progress bars takes longer than two seconds to "
"run, and if progress bars are enabled, then you will see one appearing below "
"the command:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:921
#, no-wrap
msgid ""
" ><fs> copy-size /large-file /another-file 2048M\n"
" / 10% [#####-----------------------------------------] 00:30\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:924
msgid ""
"The spinner on the left hand side moves round once for every progress "
"notification received from the backend.  This is a (reasonably) golden "
"assurance that the command is \"doing something\" even if the progress bar "
"is not moving, because the command is able to send the progress "
"notifications.  When the bar reaches 100% and the command finishes, the "
"spinner disappears."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:931
msgid ""
"Progress bars are enabled by default when guestfish is used interactively.  "
"You can enable them even for non-interactive modes using I<--progress-bars>, "
"and you can disable them completely using I<--no-progress-bars>."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:936
msgid "GUESTFISH COMMANDS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:938
msgid ""
"The commands in this section are guestfish convenience commands, in other "
"words, they are not part of the L<guestfs(3)> API."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:941
msgid "help"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:943
#, no-wrap
msgid ""
" help\n"
" help cmd\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:946
msgid "Without any parameter, this provides general help."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:948
msgid "With a C<cmd> parameter, this displays detailed help for that command."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:950
msgid "quit | exit"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:952
msgid "This exits guestfish.  You can also use C<^D> key."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:954
msgid "@FISH_COMMANDS@"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:956
msgid "COMMANDS"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:960 ../test-tool/libguestfs-test-tool.pod:83
msgid "EXIT CODE"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:962
msgid ""
"guestfish returns 0 if the commands completed without error, or 1 if there "
"was an error."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:969
msgid "EDITOR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:971
msgid ""
"The C<edit> command uses C<$EDITOR> as the editor.  If not set, it uses "
"C<vi>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:974
msgid "GUESTFISH_PID"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:976
msgid ""
"Used with the I<--remote> option to specify the remote guestfish process to "
"control.  See section L</REMOTE CONTROL GUESTFISH OVER A SOCKET>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:980
msgid "HEXEDITOR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:982
msgid ""
"The L</hexedit> command uses C<$HEXEDITOR> as the external hex editor.  If "
"not specified, the external L<hexedit(1)> program is used."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:986
msgid "HOME"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:988
msgid ""
"If compiled with GNU readline support, various files in the home directory "
"can be used.  See L</FILES>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:997
msgid ""
"Set C<LIBGUESTFS_DEBUG=1> to enable verbose messages.  This has the same "
"effect as using the B<-v> option."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1009
msgid ""
"Set the path that guestfish uses to search for kernel and initrd.img.  See "
"the discussion of paths in L<guestfs(3)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1020
msgid "Set C<LIBGUESTFS_TRACE=1> to enable command traces."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1022
msgid "PAGER"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1024
msgid ""
"The C<more> command uses C<$PAGER> as the pager.  If not set, it uses "
"C<more>."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:1039 ../test-tool/libguestfs-test-tool.pod:88
msgid "FILES"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1043
msgid "$HOME/.guestfish"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1045
msgid ""
"If compiled with GNU readline support, then the command history is saved in "
"this file."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1048
msgid "$HOME/.inputrc"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1050
msgid "/etc/inputrc"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1052
msgid ""
"If compiled with GNU readline support, then these files can be used to "
"configure readline.  For further information, please see "
"L<readline(3)/INITIALIZATION FILE>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1056
msgid "To write rules which only apply to guestfish, use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:1058
#, no-wrap
msgid ""
" $if guestfish\n"
" ...\n"
" $endif\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1062
msgid ""
"Variables that you can set in inputrc that change the behaviour of guestfish "
"in useful ways include:"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1067
msgid "completion-ignore-case (default: on)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1069
msgid ""
"By default, guestfish will ignore case when tab-completing paths on the "
"disk.  Use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:1072
#, no-wrap
msgid ""
" set completion-ignore-case off\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1074
msgid "to make guestfish case sensitive."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1078
msgid "test1.img"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:1080
msgid "test2.img (etc)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1082
msgid ""
"When using the C<-N> or C<--new> option, the prepared disk or filesystem "
"will be created in the file C<test1.img> in the current directory.  The "
"second use of C<-N> will use C<test2.img> and so on.  Any existing file with "
"the same name will be overwritten."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1091
msgid ""
"L<guestfs(3)>, L<http://libguestfs.org/>, L<virt-cat(1)>, L<virt-df(1)>, "
"L<virt-edit(1)>, L<virt-filesystems(1)>, L<virt-inspector(1)>, "
"L<virt-list-filesystems(1)>, L<virt-list-partitions(1)>, L<virt-ls(1)>, "
"L<virt-make-fs(1)>, L<virt-rescue(1)>, L<virt-resize(1)>, L<virt-tar(1)>, "
"L<virt-win-reg(1)>, L<hexedit(1)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1117 ../test-tool/libguestfs-test-tool.pod:124 ../fuse/guestmount.pod:253
msgid ""
"This program is free software; you can redistribute it and/or modify it "
"under the terms of the GNU General Public License as published by the Free "
"Software Foundation; either version 2 of the License, or (at your option) "
"any later version."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1122 ../test-tool/libguestfs-test-tool.pod:129 ../fuse/guestmount.pod:258
msgid ""
"This program is distributed in the hope that it will be useful, but WITHOUT "
"ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or "
"FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for "
"more details."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:1127 ../test-tool/libguestfs-test-tool.pod:134 ../fuse/guestmount.pod:263
msgid ""
"You should have received a copy of the GNU General Public License along with "
"this program; if not, write to the Free Software Foundation, Inc., 675 Mass "
"Ave, Cambridge, MA 02139, USA."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1
msgid "add-cdrom"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3
#, no-wrap
msgid ""
" add-cdrom filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:15
msgid ""
"This call checks for the existence of C<filename>.  This stops you from "
"specifying other types of drive which are supported by qemu such as C<nbd:> "
"and C<http:> URLs.  To specify those, use the general L</config> call "
"instead."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:22
msgid ""
"If you just want to add an ISO file (often you use this as an efficient way "
"to transfer large files into the guest), then you should probably use "
"L</add-drive-ro> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:35
msgid "add-domain"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:37
msgid "domain"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:39
#, no-wrap
msgid ""
" add-domain dom [libvirturi:..] [readonly:..] [iface:..]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:41
msgid ""
"This function adds the disk(s) attached to the named libvirt domain C<dom>.  "
"It works by connecting to libvirt, requesting the domain and domain XML from "
"libvirt, parsing it for disks, and calling L</add-drive-opts> on each one."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:58
msgid ""
"The optional C<libvirturi> parameter sets the libvirt URI (see "
"L<http://libvirt.org/uri.html>).  If this is not set then we connect to the "
"default libvirt URI (or one set through an environment variable, see the "
"libvirt documentation for full details).  If you are using the C API "
"directly then it is more flexible to create the libvirt connection object "
"yourself, get the domain object, and call L</add-libvirt-dom>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:66
msgid ""
"The other optional parameters are passed directly through to "
"L</add-drive-opts>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:69 ../fish/guestfish-actions.pod:133 ../fish/guestfish-actions.pod:2844
msgid ""
"This command has one or more optional arguments.  See L</OPTIONAL "
"ARGUMENTS>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:71
msgid "add-drive"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:73
#, no-wrap
msgid ""
" add-drive filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:75
msgid ""
"This function is the equivalent of calling L</add-drive-opts> with no "
"optional parameters, so the disk is added writable, with the format being "
"detected automatically."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:79
msgid ""
"Automatic detection of the format opens you up to a potential security hole "
"when dealing with untrusted raw-format images.  See CVE-2010-3851 and "
"RHBZ#642934.  Specifying the format closes this security hole.  Therefore "
"you should think about replacing calls to this function with calls to "
"L</add-drive-opts>, and specifying the format."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:86
msgid "add-drive-opts"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:88
msgid "add"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:90
#, no-wrap
msgid ""
" add-drive-opts filename [readonly:..] [format:..] [iface:..]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:117
msgid ""
"This forces the image format.  If you omit this (or use L</add-drive> or "
"L</add-drive-ro>) then the format is automatically detected.  Possible "
"formats include C<raw> and C<qcow2>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:128
msgid ""
"This rarely-used option lets you emulate the behaviour of the deprecated "
"L</add-drive-with-if> call (q.v.)"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:135
msgid "add-drive-ro"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:137
msgid "add-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:139
#, no-wrap
msgid ""
" add-drive-ro filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:141
msgid ""
"This function is the equivalent of calling L</add-drive-opts> with the "
"optional parameter C<GUESTFS_ADD_DRIVE_OPTS_READONLY> set to 1, so the disk "
"is added read-only, with the format being detected automatically."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:146
msgid "add-drive-ro-with-if"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:148
#, no-wrap
msgid ""
" add-drive-ro-with-if filename iface\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:150
msgid ""
"This is the same as L</add-drive-ro> but it allows you to specify the QEMU "
"interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:160
msgid "add-drive-with-if"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:162
#, no-wrap
msgid ""
" add-drive-with-if filename iface\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:164
msgid ""
"This is the same as L</add-drive> but it allows you to specify the QEMU "
"interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:174
msgid "aug-clear"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:176
#, no-wrap
msgid ""
" aug-clear augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:181
msgid "aug-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:183
#, no-wrap
msgid ""
" aug-close\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:185
msgid ""
"Close the current Augeas handle and free up any resources used by it.  After "
"calling this, you have to call L</aug-init> again before you can use any "
"other Augeas functions."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:190
msgid "aug-defnode"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:192
#, no-wrap
msgid ""
" aug-defnode name expr val\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:197
msgid ""
"If C<expr> evaluates to an empty nodeset, a node is created, equivalent to "
"calling L</aug-set> C<expr>, C<value>.  C<name> will be the nodeset "
"containing that single node."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:205
msgid "aug-defvar"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:207
#, no-wrap
msgid ""
" aug-defvar name expr\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:216
msgid "aug-get"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:218
#, no-wrap
msgid ""
" aug-get augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:223
msgid "aug-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:225
#, no-wrap
msgid ""
" aug-init root flags\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:231
msgid "You must call this before using any other L</aug-*> commands."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:266
msgid "Do not load the tree in L</aug-init>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:270
msgid "To close the handle, you can call L</aug-close>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:274
msgid "aug-insert"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:276
#, no-wrap
msgid ""
" aug-insert augpath label true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:286
msgid "aug-load"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:288
#, no-wrap
msgid ""
" aug-load\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:295
msgid "aug-ls"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:297
#, no-wrap
msgid ""
" aug-ls augpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:299
msgid ""
"This is just a shortcut for listing L</aug-match> C<path/*> and sorting the "
"resulting nodes into alphabetical order."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:302
msgid "aug-match"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:304
#, no-wrap
msgid ""
" aug-match augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:310
msgid "aug-mv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:312
#, no-wrap
msgid ""
" aug-mv src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:317
msgid "aug-rm"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:319
#, no-wrap
msgid ""
" aug-rm augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:325
msgid "aug-save"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:327
#, no-wrap
msgid ""
" aug-save\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:331
msgid ""
"The flags which were passed to L</aug-init> affect exactly how files are "
"saved."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:334
msgid "aug-set"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:336
#, no-wrap
msgid ""
" aug-set augpath val\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:340
msgid ""
"In the Augeas API, it is possible to clear a node by setting the value to "
"NULL.  Due to an oversight in the libguestfs API you cannot do that with "
"this call.  Instead you must use the L</aug-clear> call."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:345
msgid "available"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:347
#, no-wrap
msgid ""
" available 'groups ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:353
msgid ""
"The libguestfs groups, and the functions that those groups correspond to, "
"are listed in L<guestfs(3)/AVAILABILITY>.  You can also fetch this list at "
"runtime by calling L</available-all-groups>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:377
msgid "You must call L</launch> before calling this function."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:399
msgid ""
"This call was added in version C<1.0.80>.  In previous versions of "
"libguestfs all you could do would be to speculatively execute a command to "
"find out if the daemon implemented it.  See also L</version>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:406
msgid "available-all-groups"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:408
#, no-wrap
msgid ""
" available-all-groups\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:410
msgid ""
"This command returns a list of all optional groups that this daemon knows "
"about.  Note this returns both supported and unsupported groups.  To find "
"out which ones the daemon can actually support you have to call "
"L</available> on each member of the returned list."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:416
msgid "See also L</available> and L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:418
msgid "base64-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:420
#, no-wrap
msgid ""
" base64-in (base64file|-) filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:425 ../fish/guestfish-actions.pod:434 ../fish/guestfish-actions.pod:658 ../fish/guestfish-actions.pod:827 ../fish/guestfish-actions.pod:846 ../fish/guestfish-actions.pod:1223 ../fish/guestfish-actions.pod:4199 ../fish/guestfish-actions.pod:4211 ../fish/guestfish-actions.pod:4222 ../fish/guestfish-actions.pod:4233 ../fish/guestfish-actions.pod:4285 ../fish/guestfish-actions.pod:4294 ../fish/guestfish-actions.pod:4348 ../fish/guestfish-actions.pod:4371
msgid "Use C<-> instead of a filename to read/write from stdin/stdout."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:427
msgid "base64-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:429
#, no-wrap
msgid ""
" base64-out filename (base64file|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:436
msgid "blockdev-flushbufs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:438
#, no-wrap
msgid ""
" blockdev-flushbufs device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:445
msgid "blockdev-getbsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:447
#, no-wrap
msgid ""
" blockdev-getbsz device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:456
msgid "blockdev-getro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:458
#, no-wrap
msgid ""
" blockdev-getro device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:465
msgid "blockdev-getsize64"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:467
#, no-wrap
msgid ""
" blockdev-getsize64 device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:471
msgid "See also L</blockdev-getsz>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:475
msgid "blockdev-getss"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:477
#, no-wrap
msgid ""
" blockdev-getss device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:482
msgid "(Note, this is not the size in sectors, use L</blockdev-getsz> for that)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:487
msgid "blockdev-getsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:489
#, no-wrap
msgid ""
" blockdev-getsz device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:494
msgid ""
"See also L</blockdev-getss> for the real sector size of the device, and "
"L</blockdev-getsize64> for the more useful I<size in bytes>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:500
msgid "blockdev-rereadpt"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:502
#, no-wrap
msgid ""
" blockdev-rereadpt device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:508
msgid "blockdev-setbsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:510
#, no-wrap
msgid ""
" blockdev-setbsz device blocksize\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:519
msgid "blockdev-setro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:521
#, no-wrap
msgid ""
" blockdev-setro device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:527
msgid "blockdev-setrw"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:529
#, no-wrap
msgid ""
" blockdev-setrw device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:535
msgid "case-sensitive-path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:537
#, no-wrap
msgid ""
" case-sensitive-path path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:561
msgid ""
"Thus L</case-sensitive-path> (\"/Windows/System32\")  might return "
"C<\"/WINDOWS/system32\"> (the exact return value would depend on details of "
"how the directories were originally created under Windows)."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:569
msgid "See also L</realpath>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:571
msgid "cat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:573
#, no-wrap
msgid ""
" cat path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:577
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of string).  For "
"those you need to use the L</read-file> or L</download> functions which have "
"a more complex interface."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:585
msgid "checksum"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:587
#, no-wrap
msgid ""
" checksum csumtype path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:630
msgid "To get the checksum for a device, use L</checksum-device>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:632
msgid "To get the checksums for many files, use L</checksums-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:634
msgid "checksum-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:636
#, no-wrap
msgid ""
" checksum-device csumtype device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:638
msgid ""
"This call computes the MD5, SHAx or CRC checksum of the contents of the "
"device named C<device>.  For the types of checksums supported see the "
"L</checksum> command."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:642
msgid "checksums-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:644
#, no-wrap
msgid ""
" checksums-out csumtype directory (sumsfile|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:660
msgid "chmod"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:662
#, no-wrap
msgid ""
" chmod mode path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:673
msgid "chown"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:675
#, no-wrap
msgid ""
" chown owner group path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:683
msgid "command"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:685
#, no-wrap
msgid ""
" command 'arguments ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:692
msgid ""
"The single parameter is an argv-style list of arguments.  The first element "
"is the name of the program to run.  Subsequent elements are parameters.  The "
"list must be non-empty (ie. must contain a program name).  Note that the "
"command runs directly, and is I<not> invoked via the shell (see L</sh>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:720
msgid "command-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:722
#, no-wrap
msgid ""
" command-lines 'arguments ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:724
msgid "This is the same as L</command>, but splits the result into a list of lines."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:727
msgid "See also: L</sh-lines>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:732
msgid "config"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:734
#, no-wrap
msgid ""
" config qemuparam qemuvalue\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:745
msgid "copy-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:747
#, no-wrap
msgid ""
" copy-size src dest size\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:755
msgid "cp"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:757
#, no-wrap
msgid ""
" cp src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:762
msgid "cp-a"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:764
#, no-wrap
msgid ""
" cp-a src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:769
msgid "dd"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:771
#, no-wrap
msgid ""
" dd src dest\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:778
msgid ""
"If the destination is a device, it must be as large or larger than the "
"source file or device, otherwise the copy will fail.  This command cannot do "
"partial copies (see L</copy-size>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:782
msgid "df"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:784
#, no-wrap
msgid ""
" df\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:788 ../fish/guestfish-actions.pod:799
msgid ""
"This command is mostly useful for interactive sessions.  It is I<not> "
"intended that you try to parse the output string.  Use L</statvfs> from "
"programs."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:792
msgid "df-h"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:794
#, no-wrap
msgid ""
" df-h\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:803
msgid "dmesg"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:805
#, no-wrap
msgid ""
" dmesg\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:811
msgid ""
"Another way to get the same information is to enable verbose messages with "
"L</set-verbose> or by setting the environment variable C<LIBGUESTFS_DEBUG=1> "
"before running the program."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:816
msgid "download"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:818
#, no-wrap
msgid ""
" download remotefilename (filename|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:825
msgid "See also L</upload>, L</cat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:829
msgid "download-offset"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:831
#, no-wrap
msgid ""
" download-offset remotefilename (filename|-) offset size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:839
msgid ""
"Note that there is no limit on the amount of data that can be downloaded "
"with this call, unlike with L</pread>, and this call always reads the full "
"amount unless an error occurs."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:844
msgid "See also L</download>, L</pread>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:848
msgid "drop-caches"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:850
#, no-wrap
msgid ""
" drop-caches whattodrop\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:862
msgid "du"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:864
#, no-wrap
msgid ""
" du path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:876
msgid "e2fsck-f"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:878
#, no-wrap
msgid ""
" e2fsck-f device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:884
msgid ""
"This command is only needed because of L</resize2fs> (q.v.).  Normally you "
"should use L</fsck>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:887
msgid "echo-daemon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:889
#, no-wrap
msgid ""
" echo-daemon 'words ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:896
msgid "See also L</ping-daemon>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:898
msgid "egrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:900
#, no-wrap
msgid ""
" egrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:908
msgid "egrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:910
#, no-wrap
msgid ""
" egrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:918
msgid "equal"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:920
#, no-wrap
msgid ""
" equal file1 file2\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:927
msgid "exists"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:929
#, no-wrap
msgid ""
" exists path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:934
msgid "See also L</is-file>, L</is-dir>, L</stat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:936
msgid "fallocate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:938
#, no-wrap
msgid ""
" fallocate path len\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:955
msgid "fallocate64"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:957
#, no-wrap
msgid ""
" fallocate64 path len\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:963
msgid ""
"Note that this call allocates disk blocks for the file.  To create a sparse "
"file use L</truncate-size> instead."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:966
msgid ""
"The deprecated call L</fallocate> does the same, but owing to an oversight "
"it only allowed 30 bit lengths to be specified, effectively limiting the "
"maximum size of files created through that call to 1GB."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:975
msgid "fgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:977
#, no-wrap
msgid ""
" fgrep pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:985
msgid "fgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:987
#, no-wrap
msgid ""
" fgrepi pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:995
msgid "file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:997
#, no-wrap
msgid ""
" file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1009
msgid ""
"This command can also be used on C</dev/> devices (and partitions, LV "
"names).  You can for example use this to determine if a device contains a "
"filesystem, although it's usually better to use L</vfs-type>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1019
msgid "file-architecture"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1021
#, no-wrap
msgid ""
" file-architecture filename\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1124
msgid "filesize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1126
#, no-wrap
msgid ""
" filesize file\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1130
msgid ""
"To get other stats about a file, use L</stat>, L</lstat>, L</is-dir>, "
"L</is-file> etc.  To get the size of block devices, use "
"L</blockdev-getsize64>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1134
msgid "fill"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1136
#, no-wrap
msgid ""
" fill c len path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1142
msgid ""
"To fill a file with zero bytes (sparsely), it is much more efficient to use "
"L</truncate-size>.  To create a file with a pattern of repeating bytes use "
"L</fill-pattern>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1147
msgid "fill-pattern"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1149
#, no-wrap
msgid ""
" fill-pattern pattern len path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1151
msgid ""
"This function is like L</fill> except that it creates a new file of length "
"C<len> containing the repeating pattern of bytes in C<pattern>.  The pattern "
"is truncated if necessary to ensure the length of the file is exactly C<len> "
"bytes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1156
msgid "find"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1158
#, no-wrap
msgid ""
" find directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1172
msgid "then the returned list from L</find> C</tmp> would be 4 elements:"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1185
msgid "See also L</find0>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1190
msgid "find0"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1192
#, no-wrap
msgid ""
" find0 directory (files|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1198
msgid "This command works the same way as L</find> with the following exceptions:"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1225
msgid "findfs-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1227
#, no-wrap
msgid ""
" findfs-label label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1233
msgid "To find the label of a filesystem, use L</vfs-label>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1235
msgid "findfs-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1237
#, no-wrap
msgid ""
" findfs-uuid uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1243
msgid "To find the UUID of a filesystem, use L</vfs-uuid>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1245
msgid "fsck"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1247
#, no-wrap
msgid ""
" fsck fstype device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1277
msgid "get-append"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1279
#, no-wrap
msgid ""
" get-append\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1286
msgid "get-autosync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1288
#, no-wrap
msgid ""
" get-autosync\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1292
msgid "get-direct"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1294
#, no-wrap
msgid ""
" get-direct\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1298
msgid "get-e2label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1300
#, no-wrap
msgid ""
" get-e2label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1312
msgid "get-e2uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1314
#, no-wrap
msgid ""
" get-e2uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1326
msgid "get-memsize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1328
#, no-wrap
msgid ""
" get-memsize\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1333
msgid ""
"If L</set-memsize> was not called on this handle, and if "
"C<LIBGUESTFS_MEMSIZE> was not set, then this returns the compiled-in default "
"value for memsize."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1340
msgid "get-network"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1342
#, no-wrap
msgid ""
" get-network\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1346
msgid "get-path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1348
#, no-wrap
msgid ""
" get-path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1355
msgid "get-pid"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1357
msgid "pid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1359
#, no-wrap
msgid ""
" get-pid\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1366
msgid "get-qemu"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1368
#, no-wrap
msgid ""
" get-qemu\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1375
msgid "get-recovery-proc"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1377
#, no-wrap
msgid ""
" get-recovery-proc\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1381
msgid "get-selinux"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1383
#, no-wrap
msgid ""
" get-selinux\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1385
msgid ""
"This returns the current setting of the selinux flag which is passed to the "
"appliance at boot time.  See L</set-selinux>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1391
msgid "get-state"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1393
#, no-wrap
msgid ""
" get-state\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1400
msgid "get-trace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1402
#, no-wrap
msgid ""
" get-trace\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1406
msgid "get-umask"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1408
#, no-wrap
msgid ""
" get-umask\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1410
msgid ""
"Return the current umask.  By default the umask is C<022> unless it has been "
"set by calling L</umask>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1413
msgid "get-verbose"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1415
#, no-wrap
msgid ""
" get-verbose\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1419
msgid "getcon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1421
#, no-wrap
msgid ""
" getcon\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1425
msgid "See the documentation about SELINUX in L<guestfs(3)>, and L</setcon>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1428
msgid "getxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1430
#, no-wrap
msgid ""
" getxattr path name\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1432
msgid ""
"Get a single extended attribute from file C<path> named C<name>.  This call "
"follows symlinks.  If you want to lookup an extended attribute for the "
"symlink itself, use L</lgetxattr>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1436 ../fish/guestfish-actions.pod:2263
msgid ""
"Normally it is better to get all extended attributes from a file in one go "
"by calling L</getxattrs>.  However some Linux filesystem implementations are "
"buggy and do not provide a way to list out attributes.  For these "
"filesystems (notably ntfs-3g)  you have to know the names of the extended "
"attributes you want in advance and call this function."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1446
msgid "See also: L</getxattrs>, L</lgetxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1448
msgid "getxattrs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1450
#, no-wrap
msgid ""
" getxattrs path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1458
msgid "See also: L</lgetxattrs>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1460
msgid "glob-expand"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1462
#, no-wrap
msgid ""
" glob-expand pattern\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1475
msgid "grep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1477
#, no-wrap
msgid ""
" grep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1485
msgid "grepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1487
#, no-wrap
msgid ""
" grepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1495
msgid "grub-install"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1497
#, no-wrap
msgid ""
" grub-install root device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1513
msgid "head"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1515
#, no-wrap
msgid ""
" head path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1523
msgid "head-n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1525
#, no-wrap
msgid ""
" head-n nrlines path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1538
msgid "hexdump"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1540
#, no-wrap
msgid ""
" hexdump path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1548
msgid "initrd-cat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1550
#, no-wrap
msgid ""
" initrd-cat initrdpath filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1562
msgid "See also L</initrd-list>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1567
msgid "initrd-list"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1569
#, no-wrap
msgid ""
" initrd-list path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1581
msgid "inotify-add-watch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1583
#, no-wrap
msgid ""
" inotify-add-watch path mask\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1595
msgid "inotify-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1597
#, no-wrap
msgid ""
" inotify-close\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1603
msgid "inotify-files"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1605
#, no-wrap
msgid ""
" inotify-files\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1607
msgid ""
"This function is a helpful wrapper around L</inotify-read> which just "
"returns a list of pathnames of objects that were touched.  The returned "
"pathnames are sorted and deduplicated."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1611
msgid "inotify-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1613
#, no-wrap
msgid ""
" inotify-init maxevents\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1619
msgid ""
"C<maxevents> is the maximum number of events which will be queued up between "
"calls to L</inotify-read> or L</inotify-files>.  If this is passed as C<0>, "
"then the kernel (or previously set)  default is used.  For Linux 2.6.29 the "
"default was 16384 events.  Beyond this limit, the kernel throws away events, "
"but records the fact that it threw them away by setting a flag "
"C<IN_Q_OVERFLOW> in the returned structure list (see L</inotify-read>)."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1629
msgid ""
"Before any events are generated, you have to add some watches to the "
"internal watch list.  See: L</inotify-add-watch>, L</inotify-rm-watch> and "
"L</inotify-watch-all>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1635
msgid ""
"Queued up events should be read periodically by calling L</inotify-read> (or "
"L</inotify-files> which is just a helpful wrapper around L</inotify-read>).  "
"If you don't read the events out often enough then you risk the internal "
"queue overflowing."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1642
msgid ""
"The handle should be closed after use by calling L</inotify-close>.  This "
"also removes any watches automatically."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1651
msgid "inotify-read"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1653
#, no-wrap
msgid ""
" inotify-read\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1666
msgid "inotify-rm-watch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1668
#, no-wrap
msgid ""
" inotify-rm-watch wd\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1670
msgid "Remove a previously defined inotify watch.  See L</inotify-add-watch>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1673
msgid "inspect-get-arch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1675
#, no-wrap
msgid ""
" inspect-get-arch root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1677 ../fish/guestfish-actions.pod:1693 ../fish/guestfish-actions.pod:1767 ../fish/guestfish-actions.pod:1785 ../fish/guestfish-actions.pod:1800 ../fish/guestfish-actions.pod:1821 ../fish/guestfish-actions.pod:1836 ../fish/guestfish-actions.pod:1859 ../fish/guestfish-actions.pod:1881 ../fish/guestfish-actions.pod:1905 ../fish/guestfish-actions.pod:1935 ../fish/guestfish-actions.pod:1970 ../fish/guestfish-actions.pod:1986
msgid ""
"This function should only be called with a root device string as returned by "
"L</inspect-os>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1680
msgid ""
"This returns the architecture of the inspected operating system.  The "
"possible return values are listed under L</file-architecture>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1689
msgid "inspect-get-distro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1691
#, no-wrap
msgid ""
" inspect-get-distro root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1763
msgid "inspect-get-filesystems"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1765
#, no-wrap
msgid ""
" inspect-get-filesystems root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1778
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-mountpoints>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1781
msgid "inspect-get-hostname"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1783
#, no-wrap
msgid ""
" inspect-get-hostname root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1796
msgid "inspect-get-major-version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1798
#, no-wrap
msgid ""
" inspect-get-major-version root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1817
msgid "inspect-get-minor-version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1819
#, no-wrap
msgid ""
" inspect-get-minor-version root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1829
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-major-version>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1832
msgid "inspect-get-mountpoints"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1834
#, no-wrap
msgid ""
" inspect-get-mountpoints root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1852
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1855
msgid "inspect-get-package-format"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1857
#, no-wrap
msgid ""
" inspect-get-package-format root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1862
msgid ""
"This function and L</inspect-get-package-management> return the package "
"format and package management tool used by the inspected operating system.  "
"For example for Fedora these functions would return C<rpm> (package format) "
"and C<yum> (package management)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1877
msgid "inspect-get-package-management"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1879
#, no-wrap
msgid ""
" inspect-get-package-management root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1884
msgid ""
"L</inspect-get-package-format> and this function return the package format "
"and package management tool used by the inspected operating system.  For "
"example for Fedora these functions would return C<rpm> (package format) and "
"C<yum> (package management)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1901
msgid "inspect-get-product-name"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1903
#, no-wrap
msgid ""
" inspect-get-product-name root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1918
msgid "inspect-get-roots"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1920
#, no-wrap
msgid ""
" inspect-get-roots\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1922
msgid ""
"This function is a convenient way to get the list of root devices, as "
"returned from a previous call to L</inspect-os>, but without redoing the "
"whole inspection process."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1926
msgid ""
"This returns an empty list if either no root devices were found or the "
"caller has not called L</inspect-os>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1931
msgid "inspect-get-type"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1933
#, no-wrap
msgid ""
" inspect-get-type root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1966
msgid "inspect-get-windows-systemroot"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1968
#, no-wrap
msgid ""
" inspect-get-windows-systemroot root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1982
msgid "inspect-list-applications"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1984
#, no-wrap
msgid ""
" inspect-list-applications root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1991
msgid ""
"I<Note:> This call works differently from other parts of the inspection "
"API.  You have to call L</inspect-os>, then L</inspect-get-mountpoints>, "
"then mount up the disks, before calling this.  Listing applications is a "
"significantly more difficult operation which requires access to the full "
"filesystem.  Also note that unlike the other L</inspect-get-*> calls which "
"are just returning data cached in the libguestfs handle, this call actually "
"reads parts of the mounted filesystems during the call."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2081
msgid "inspect-os"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2083
#, no-wrap
msgid ""
" inspect-os\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2098
msgid ""
"You can pass the root string(s) returned to other L</inspect-get-*> "
"functions in order to query further information about each operating system, "
"such as the name and version."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2103
msgid ""
"This function uses other libguestfs features such as L</mount-ro> and "
"L</umount-all> in order to mount and unmount filesystems and look at the "
"contents.  This should be called with no disks currently mounted.  The "
"function may also use Augeas, so any existing Augeas handle will be closed."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2115 ../fish/guestfish-actions.pod:2291 ../fish/guestfish-actions.pod:2337
msgid "See also L</list-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2117
msgid "is-blockdev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2119
#, no-wrap
msgid ""
" is-blockdev path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2124 ../fish/guestfish-actions.pod:2142 ../fish/guestfish-actions.pod:2161 ../fish/guestfish-actions.pod:2170 ../fish/guestfish-actions.pod:2180 ../fish/guestfish-actions.pod:2214 ../fish/guestfish-actions.pod:2223
msgid "See also L</stat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2126
msgid "is-busy"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2128
#, no-wrap
msgid ""
" is-busy\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2135
msgid "is-chardev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2137
#, no-wrap
msgid ""
" is-chardev path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2144
msgid "is-config"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2146
#, no-wrap
msgid ""
" is-config\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2153
msgid "is-dir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2155
#, no-wrap
msgid ""
" is-dir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2163
msgid "is-fifo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2165
#, no-wrap
msgid ""
" is-fifo path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2172
msgid "is-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2174
#, no-wrap
msgid ""
" is-file path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2182
msgid "is-launching"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2184
#, no-wrap
msgid ""
" is-launching\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2191
msgid "is-lv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2193
#, no-wrap
msgid ""
" is-lv device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2198
msgid "is-ready"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2200
#, no-wrap
msgid ""
" is-ready\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2207
msgid "is-socket"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2209
#, no-wrap
msgid ""
" is-socket path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2216
msgid "is-symlink"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2218
#, no-wrap
msgid ""
" is-symlink path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2225
msgid "kill-subprocess"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2227
#, no-wrap
msgid ""
" kill-subprocess\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2231
msgid "launch"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2233
msgid "run"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2235
#, no-wrap
msgid ""
" launch\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2243
msgid "lchown"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2245
#, no-wrap
msgid ""
" lchown owner group path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2247
msgid ""
"Change the file owner to C<owner> and group to C<group>.  This is like "
"L</chown> but if C<path> is a symlink then the link itself is changed, not "
"the target."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2255
msgid "lgetxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2257
#, no-wrap
msgid ""
" lgetxattr path name\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2273
msgid "See also: L</lgetxattrs>, L</getxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2275
msgid "lgetxattrs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2277
#, no-wrap
msgid ""
" lgetxattrs path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2279
msgid ""
"This is the same as L</getxattrs>, but if C<path> is a symbolic link, then "
"it returns the extended attributes of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2283
msgid "list-devices"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2285
#, no-wrap
msgid ""
" list-devices\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2293
msgid "list-filesystems"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2295
#, no-wrap
msgid ""
" list-filesystems\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2314
msgid ""
"This command runs other libguestfs commands, which might include L</mount> "
"and L</umount>, and therefore you should use this soon after launch and only "
"when nothing is mounted."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2318
msgid ""
"Not all of the filesystems returned will be mountable.  In particular, swap "
"partitions are returned in the list.  Also this command does not check that "
"each filesystem found is valid and mountable, and some filesystems might be "
"mountable but require special options.  Filesystems may not all belong to a "
"single logical operating system (use L</inspect-os> to look for OSes)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2326
msgid "list-partitions"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2328
#, no-wrap
msgid ""
" list-partitions\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2334
msgid ""
"This does not return logical volumes.  For that you will need to call "
"L</lvs>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2339
msgid "ll"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2341
#, no-wrap
msgid ""
" ll directory\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2349
msgid "ln"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2351
#, no-wrap
msgid ""
" ln target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2355
msgid "ln-f"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2357
#, no-wrap
msgid ""
" ln-f target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2362
msgid "ln-s"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2364
#, no-wrap
msgid ""
" ln-s target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2368
msgid "ln-sf"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2370
#, no-wrap
msgid ""
" ln-sf target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2375
msgid "lremovexattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2377
#, no-wrap
msgid ""
" lremovexattr xattr path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2379
msgid ""
"This is the same as L</removexattr>, but if C<path> is a symbolic link, then "
"it removes an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2383
msgid "ls"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2385
#, no-wrap
msgid ""
" ls directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2391
msgid ""
"This command is mostly useful for interactive sessions.  Programs should "
"probably use L</readdir> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2394
msgid "lsetxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2396
#, no-wrap
msgid ""
" lsetxattr xattr val vallen path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2398
msgid ""
"This is the same as L</setxattr>, but if C<path> is a symbolic link, then it "
"sets an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2402
msgid "lstat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2404
#, no-wrap
msgid ""
" lstat path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2408
msgid ""
"This is the same as L</stat> except that if C<path> is a symbolic link, then "
"the link is stat-ed, not the file it refers to."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2414
msgid "lstatlist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2416
#, no-wrap
msgid ""
" lstatlist path 'names ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2418
msgid ""
"This call allows you to perform the L</lstat> operation on multiple files, "
"where all files are in the directory C<path>.  C<names> is the list of files "
"from this directory."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2427
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also L</lxattrlist> for a "
"similarly efficient call for getting extended attributes.  Very long "
"directory listings might cause the protocol message size to be exceeded, "
"causing this call to fail.  The caller must split up such requests into "
"smaller groups of names."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2435
msgid "luks-add-key"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2437
#, no-wrap
msgid ""
" luks-add-key device keyslot\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2444
msgid ""
"Note that if C<keyslot> already contains a key, then this command will "
"fail.  You have to use L</luks-kill-slot> first to remove that key."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2448 ../fish/guestfish-actions.pod:2470 ../fish/guestfish-actions.pod:2483 ../fish/guestfish-actions.pod:2497 ../fish/guestfish-actions.pod:2520 ../fish/guestfish-actions.pod:2530
msgid ""
"This command has one or more key or passphrase parameters.  Guestfish will "
"prompt for these separately."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2451
msgid "luks-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2453
#, no-wrap
msgid ""
" luks-close device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2455
msgid ""
"This closes a LUKS device that was created earlier by L</luks-open> or "
"L</luks-open-ro>.  The C<device> parameter must be the name of the LUKS "
"mapping device (ie. C</dev/mapper/mapname>) and I<not> the name of the "
"underlying block device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2461
msgid "luks-format"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2463
#, no-wrap
msgid ""
" luks-format device keyslot\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2476
msgid "luks-format-cipher"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2478
#, no-wrap
msgid ""
" luks-format-cipher device keyslot cipher\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2480
msgid ""
"This command is the same as L</luks-format> but it also allows you to set "
"the C<cipher> used."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2489
msgid "luks-kill-slot"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2491
#, no-wrap
msgid ""
" luks-kill-slot device keyslot\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2500
msgid "luks-open"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2502
#, no-wrap
msgid ""
" luks-open device mapname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2516
msgid ""
"If this block device contains LVM volume groups, then calling L</vgscan> "
"followed by L</vg-activate-all> will make them visible."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2523
msgid "luks-open-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2525
#, no-wrap
msgid ""
" luks-open-ro device mapname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2527
msgid ""
"This is the same as L</luks-open> except that a read-only mapping is "
"created."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2533
msgid "lvcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2535
#, no-wrap
msgid ""
" lvcreate logvol volgroup mbytes\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2540
msgid "lvm-canonical-lv-name"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2542
#, no-wrap
msgid ""
" lvm-canonical-lv-name lvname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2551
msgid "See also L</is-lv>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2553
msgid "lvm-clear-filter"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2555
#, no-wrap
msgid ""
" lvm-clear-filter\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2557
msgid ""
"This undoes the effect of L</lvm-set-filter>.  LVM will be able to see every "
"block device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2563
msgid "lvm-remove-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2565
#, no-wrap
msgid ""
" lvm-remove-all\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2573
msgid "lvm-set-filter"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2575
#, no-wrap
msgid ""
" lvm-set-filter 'devices ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2600
msgid "lvremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2602
#, no-wrap
msgid ""
" lvremove device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2610
msgid "lvrename"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2612
#, no-wrap
msgid ""
" lvrename logvol newlogvol\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2616
msgid "lvresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2618
#, no-wrap
msgid ""
" lvresize device mbytes\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2624
msgid "lvresize-free"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2626
#, no-wrap
msgid ""
" lvresize-free lv percent\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2634
msgid "lvs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2636
#, no-wrap
msgid ""
" lvs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2644
msgid "See also L</lvs-full>, L</list-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2646
msgid "lvs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2648
#, no-wrap
msgid ""
" lvs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2653
msgid "lvuuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2655
#, no-wrap
msgid ""
" lvuuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2659
msgid "lxattrlist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2661
#, no-wrap
msgid ""
" lxattrlist path 'names ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2677
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also L</lstatlist> for a "
"similarly efficient call for getting standard stats.  Very long directory "
"listings might cause the protocol message size to be exceeded, causing this "
"call to fail.  The caller must split up such requests into smaller groups of "
"names."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2685
msgid "mkdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2687
#, no-wrap
msgid ""
" mkdir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2691
msgid "mkdir-mode"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2693
#, no-wrap
msgid ""
" mkdir-mode path mode\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2702
msgid "See also L</mkdir>, L</umask>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2704
msgid "mkdir-p"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2706
#, no-wrap
msgid ""
" mkdir-p path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2711
msgid "mkdtemp"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2713
#, no-wrap
msgid ""
" mkdtemp template\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2734
msgid "mke2fs-J"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2736
#, no-wrap
msgid ""
" mke2fs-J fstype blocksize device journal\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2744
msgid "See also L</mke2journal>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2746
msgid "mke2fs-JL"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2748
#, no-wrap
msgid ""
" mke2fs-JL fstype blocksize device label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2753
msgid "See also L</mke2journal-L>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2755
msgid "mke2fs-JU"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2757
#, no-wrap
msgid ""
" mke2fs-JU fstype blocksize device uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2762
msgid "See also L</mke2journal-U>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2764
msgid "mke2journal"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2766
#, no-wrap
msgid ""
" mke2journal blocksize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2773
msgid "mke2journal-L"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2775
#, no-wrap
msgid ""
" mke2journal-L blocksize label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2779
msgid "mke2journal-U"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2781
#, no-wrap
msgid ""
" mke2journal-U blocksize uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2785
msgid "mkfifo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2787
#, no-wrap
msgid ""
" mkfifo mode path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2789
msgid ""
"This call creates a FIFO (named pipe) called C<path> with mode C<mode>.  It "
"is just a convenient wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2795
msgid "mkfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2797
#, no-wrap
msgid ""
" mkfs fstype device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2803
msgid "mkfs-b"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2805
#, no-wrap
msgid ""
" mkfs-b fstype blocksize device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2807
msgid ""
"This call is similar to L</mkfs>, but it allows you to control the block "
"size of the resulting filesystem.  Supported block sizes depend on the "
"filesystem type, but typically they are C<1024>, C<2048> or C<4096> only."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2822
msgid "mkfs-opts"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2824
#, no-wrap
msgid ""
" mkfs-opts fstype device [blocksize:..]\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2846
msgid "mkmountpoint"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2848
#, no-wrap
msgid ""
" mkmountpoint exemptpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2850
msgid ""
"L</mkmountpoint> and L</rmmountpoint> are specialized calls that can be used "
"to create extra mountpoints before mounting the first filesystem."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2874
msgid ""
"L</mkmountpoint> is not compatible with L</umount-all>.  You may get "
"unexpected errors if you try to mix these calls.  It is safest to manually "
"unmount filesystems and remove mountpoints after use."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2878
msgid ""
"L</umount-all> unmounts filesystems by sorting the paths longest first, so "
"for this to work for manual mountpoints, you must ensure that the innermost "
"mountpoints have the longest pathnames, as in the example code above."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2885
msgid ""
"Autosync [see L</set-autosync>, this is set by default on handles] means "
"that L</umount-all> is called when the handle is closed which can also "
"trigger these issues."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2889
msgid "mknod"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2891
#, no-wrap
msgid ""
" mknod mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2901
msgid ""
"Note that, just like L<mknod(2)>, the mode must be bitwise OR'd with "
"S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a "
"regular file).  These constants are available in the standard Linux header "
"files, or you can use L</mknod-b>, L</mknod-c> or L</mkfifo> which are "
"wrappers around this command which bitwise OR in the appropriate constant "
"for you."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2911
msgid "mknod-b"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2913
#, no-wrap
msgid ""
" mknod-b mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2915
msgid ""
"This call creates a block device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2921
msgid "mknod-c"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2923
#, no-wrap
msgid ""
" mknod-c mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2925
msgid ""
"This call creates a char device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2931
msgid "mkswap"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2933
#, no-wrap
msgid ""
" mkswap device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2937
msgid "mkswap-L"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2939
#, no-wrap
msgid ""
" mkswap-L label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2947
msgid "mkswap-U"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2949
#, no-wrap
msgid ""
" mkswap-U uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2953
msgid "mkswap-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2955
#, no-wrap
msgid ""
" mkswap-file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2959
msgid ""
"This command just writes a swap file signature to an existing file.  To "
"create the file itself, use something like L</fallocate>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2962
msgid "modprobe"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2964
#, no-wrap
msgid ""
" modprobe modulename\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2971
msgid "mount"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2973
#, no-wrap
msgid ""
" mount device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2989
msgid ""
"B<Important note:> When you use this call, the filesystem options C<sync> "
"and C<noatime> are set implicitly.  This was originally done because we "
"thought it would improve reliability, but it turns out that I<-o sync> has a "
"very large negative performance impact and negligible effect on "
"reliability.  Therefore we recommend that you avoid using L</mount> in any "
"code that needs performance, and instead use L</mount-options> (use an empty "
"string for the first parameter if you don't want any options)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2999
msgid "mount-loop"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3001
#, no-wrap
msgid ""
" mount-loop file mountpoint\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3007
msgid "mount-options"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3009
#, no-wrap
msgid ""
" mount-options options device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3011
msgid ""
"This is the same as the L</mount> command, but it allows you to set the "
"mount options as for the L<mount(8)> I<-o> flag."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3019
msgid "mount-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3021
#, no-wrap
msgid ""
" mount-ro device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3023
msgid ""
"This is the same as the L</mount> command, but it mounts the filesystem with "
"the read-only (I<-o ro>) flag."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3026
msgid "mount-vfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3028
#, no-wrap
msgid ""
" mount-vfs options vfstype device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3030
msgid ""
"This is the same as the L</mount> command, but it allows you to set both the "
"mount options and the vfstype as for the L<mount(8)> I<-o> and I<-t> flags."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3034
msgid "mountpoints"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3036
#, no-wrap
msgid ""
" mountpoints\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3038
msgid ""
"This call is similar to L</mounts>.  That call returns a list of devices.  "
"This one returns a hash table (map) of device name to directory where the "
"device is mounted."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3042
msgid "mounts"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3044
#, no-wrap
msgid ""
" mounts\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3051
msgid "See also: L</mountpoints>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3053
msgid "mv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3055
#, no-wrap
msgid ""
" mv src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3060
msgid "ntfs-3g-probe"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3062
#, no-wrap
msgid ""
" ntfs-3g-probe true|false device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3076
msgid "ntfsresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3078
#, no-wrap
msgid ""
" ntfsresize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3084
msgid "ntfsresize-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3086
#, no-wrap
msgid ""
" ntfsresize-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3088
msgid ""
"This command is the same as L</ntfsresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3091
msgid "part-add"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3093
#, no-wrap
msgid ""
" part-add device prlogex startsect endsect\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3095
msgid ""
"This command adds a partition to C<device>.  If there is no partition table "
"on the device, call L</part-init> first."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3107
msgid ""
"Creating a partition which covers the whole disk is not so easy.  Use "
"L</part-disk> to do that."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3110
msgid "part-del"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3112
#, no-wrap
msgid ""
" part-del device partnum\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3120
msgid "part-disk"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3122
#, no-wrap
msgid ""
" part-disk device parttype\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3124
msgid ""
"This command is simply a combination of L</part-init> followed by "
"L</part-add> to create a single primary partition covering the whole disk."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3128
msgid ""
"C<parttype> is the partition table type, usually C<mbr> or C<gpt>, but other "
"possible values are described in L</part-init>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3134
msgid "part-get-bootable"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3136
#, no-wrap
msgid ""
" part-get-bootable device partnum\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3141
msgid "See also L</part-set-bootable>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3143
msgid "part-get-mbr-id"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3145
#, no-wrap
msgid ""
" part-get-mbr-id device partnum\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3150 ../fish/guestfish-actions.pod:3288
msgid ""
"Note that only MBR (old DOS-style) partitions have type bytes.  You will get "
"undefined results for other partition table types (see "
"L</part-get-parttype>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3154
msgid "part-get-parttype"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3156
#, no-wrap
msgid ""
" part-get-parttype device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3161
msgid ""
"Common return values include: C<msdos> (a DOS/Windows style MBR partition "
"table), C<gpt> (a GPT/EFI-style partition table).  Other values are "
"possible, although unusual.  See L</part-init> for a full list."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3166
msgid "part-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3168
#, no-wrap
msgid ""
" part-init device parttype\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3174
msgid ""
"Initially there are no partitions.  Following this, you should call "
"L</part-add> for each partition required."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3237
msgid "part-list"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3239
#, no-wrap
msgid ""
" part-list device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3254
msgid ""
"Start of the partition I<in bytes>.  To get sectors you have to divide by "
"the device's sector size, see L</blockdev-getss>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3267
msgid "part-set-bootable"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3269
#, no-wrap
msgid ""
" part-set-bootable device partnum true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3278
msgid "part-set-mbr-id"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3280
#, no-wrap
msgid ""
" part-set-mbr-id device partnum idbyte\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3292
msgid "part-set-name"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3294
#, no-wrap
msgid ""
" part-set-name device partnum name\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3302
msgid "part-to-dev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3304
#, no-wrap
msgid ""
" part-to-dev partition\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3310
msgid ""
"The named partition must exist, for example as a string returned from "
"L</list-partitions>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3313
msgid "ping-daemon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3315
#, no-wrap
msgid ""
" ping-daemon\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3322
msgid "pread"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3324
#, no-wrap
msgid ""
" pread path count offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3332
msgid "See also L</pwrite>, L</pread-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3337
msgid "pread-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3339
#, no-wrap
msgid ""
" pread-device device count offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3347
msgid "See also L</pread>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3352
msgid "pvcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3354
#, no-wrap
msgid ""
" pvcreate device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3360
msgid "pvremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3362
#, no-wrap
msgid ""
" pvremove device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3371
msgid "pvresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3373
#, no-wrap
msgid ""
" pvresize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3378
msgid "pvresize-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3380
#, no-wrap
msgid ""
" pvresize-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3382
msgid ""
"This command is the same as L</pvresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3385
msgid "pvs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3387
#, no-wrap
msgid ""
" pvs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3395
msgid "See also L</pvs-full>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3397
msgid "pvs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3399
#, no-wrap
msgid ""
" pvs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3404
msgid "pvuuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3406
#, no-wrap
msgid ""
" pvuuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3410
msgid "pwrite"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3412
#, no-wrap
msgid ""
" pwrite path content offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3423
msgid "See also L</pread>, L</pwrite-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3428
msgid "pwrite-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3430
#, no-wrap
msgid ""
" pwrite-device device content offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3440
msgid "See also L</pwrite>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3445
msgid "read-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3447
#, no-wrap
msgid ""
" read-file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3452
msgid ""
"Unlike L</cat>, this function can correctly handle files that contain "
"embedded ASCII NUL characters.  However unlike L</download>, this function "
"is limited in the total size of file that can be handled."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3460
msgid "read-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3462
#, no-wrap
msgid ""
" read-lines path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3469
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of line).  For "
"those you need to use the L</read-file> function which has a more complex "
"interface."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3474
msgid "readdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3476
#, no-wrap
msgid ""
" readdir dir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3528
msgid ""
"This function is primarily intended for use by programs.  To get a simple "
"list of names, use L</ls>.  To get a printable directory for human "
"consumption, use L</ll>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3532
msgid "readlink"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3534
#, no-wrap
msgid ""
" readlink path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3538
msgid "readlinklist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3540
#, no-wrap
msgid ""
" readlinklist path 'names ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3564
msgid "realpath"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3566
#, no-wrap
msgid ""
" realpath path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3571
msgid "removexattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3573
#, no-wrap
msgid ""
" removexattr xattr path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3578
msgid "See also: L</lremovexattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3580
msgid "resize2fs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3582
#, no-wrap
msgid ""
" resize2fs device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3587
msgid ""
"I<Note:> It is sometimes required that you run L</e2fsck-f> on the C<device> "
"before calling this command.  For unknown reasons C<resize2fs> sometimes "
"gives an error about this and sometimes not.  In any case, it is always safe "
"to call L</e2fsck-f> before calling this function."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3593
msgid "resize2fs-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3595
#, no-wrap
msgid ""
" resize2fs-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3597
msgid ""
"This command is the same as L</resize2fs> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3600
msgid "rm"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3602
#, no-wrap
msgid ""
" rm path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3606
msgid "rm-rf"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3608
#, no-wrap
msgid ""
" rm-rf path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3614
msgid "rmdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3616
#, no-wrap
msgid ""
" rmdir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3620
msgid "rmmountpoint"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3622
#, no-wrap
msgid ""
" rmmountpoint exemptpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3624
msgid ""
"This calls removes a mountpoint that was previously created with "
"L</mkmountpoint>.  See L</mkmountpoint> for full details."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3628
msgid "scrub-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3630
#, no-wrap
msgid ""
" scrub-device device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3641
msgid "scrub-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3643
#, no-wrap
msgid ""
" scrub-file file\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3653
msgid "scrub-freespace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3655
#, no-wrap
msgid ""
" scrub-freespace dir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3657
msgid ""
"This command creates the directory C<dir> and then fills it with files until "
"the filesystem is full, and scrubs the files as for L</scrub-file>, and "
"deletes them.  The intention is to scrub any free space on the partition "
"containing C<dir>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3666
msgid "set-append"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3668
msgid "append"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3670
#, no-wrap
msgid ""
" set-append append\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3681
msgid "set-autosync"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3683
msgid "autosync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3685
#, no-wrap
msgid ""
" set-autosync true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3687
msgid ""
"If C<autosync> is true, this enables autosync.  Libguestfs will make a best "
"effort attempt to run L</umount-all> followed by L</sync> when the handle is "
"closed (also if the program exits without closing handles)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3695
msgid "set-direct"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3697
msgid "direct"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3699
#, no-wrap
msgid ""
" set-direct true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3705
msgid ""
"One consequence of this is that log messages aren't caught by the library "
"and handled by L</set-log-message-callback>, but go straight to stdout."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3714
msgid "set-e2label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3716
#, no-wrap
msgid ""
" set-e2label device label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3722
msgid ""
"You can use either L</tune2fs-l> or L</get-e2label> to return the existing "
"label on a filesystem."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3725
msgid "set-e2uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3727
#, no-wrap
msgid ""
" set-e2uuid device uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3734
msgid ""
"You can use either L</tune2fs-l> or L</get-e2uuid> to return the existing "
"UUID of a filesystem."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3737
msgid "set-memsize"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3739
msgid "memsize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3741
#, no-wrap
msgid ""
" set-memsize memsize\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3743
msgid ""
"This sets the memory size in megabytes allocated to the qemu subprocess.  "
"This only has any effect if called before L</launch>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3754
msgid "set-network"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3756
msgid "network"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3758
#, no-wrap
msgid ""
" set-network true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3766
msgid "You must call this before calling L</launch>, otherwise it has no effect."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3769
msgid "set-path"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3771
msgid "path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3773
#, no-wrap
msgid ""
" set-path searchpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3782
msgid "set-qemu"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3784
msgid "qemu"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3786
#, no-wrap
msgid ""
" set-qemu qemu\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3806
msgid "set-recovery-proc"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3808
msgid "recovery-proc"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3810
#, no-wrap
msgid ""
" set-recovery-proc true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3812
msgid ""
"If this is called with the parameter C<false> then L</launch> does not "
"create a recovery process.  The purpose of the recovery process is to stop "
"runaway qemu processes in the case where the main program aborts abruptly."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3817
msgid ""
"This only has any effect if called before L</launch>, and the default is "
"true."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3826
msgid "set-selinux"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3828
msgid "selinux"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3830
#, no-wrap
msgid ""
" set-selinux true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3841
msgid "set-trace"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3843
msgid "trace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3845
#, no-wrap
msgid ""
" set-trace true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3861
msgid "set-verbose"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3863
msgid "verbose"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3865
#, no-wrap
msgid ""
" set-verbose true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3872
msgid "setcon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3874
#, no-wrap
msgid ""
" setcon context\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3881
msgid "setxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3883
#, no-wrap
msgid ""
" setxattr xattr val vallen path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3889
msgid "See also: L</lsetxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3891
msgid "sfdisk"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3893
#, no-wrap
msgid ""
" sfdisk device cyls heads sectors 'lines ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3915
msgid "See also: L</sfdisk-l>, L</sfdisk-N>, L</part-init>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3921
msgid "sfdiskM"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3923
#, no-wrap
msgid ""
" sfdiskM device 'lines ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3925
msgid ""
"This is a simplified interface to the L</sfdisk> command, where partition "
"sizes are specified in megabytes only (rounded to the nearest cylinder) and "
"you don't need to specify the cyls, heads and sectors parameters which were "
"rarely if ever used anyway."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3931
msgid "See also: L</sfdisk>, the L<sfdisk(8)> manpage and L</part-disk>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3937
msgid "sfdisk-N"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3939
#, no-wrap
msgid ""
" sfdisk-N device partnum cyls heads sectors line\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3944
msgid ""
"For other parameters, see L</sfdisk>.  You should usually pass C<0> for the "
"cyls/heads/sectors parameters."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3947
msgid "See also: L</part-add>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3952
msgid "sfdisk-disk-geometry"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3954
#, no-wrap
msgid ""
" sfdisk-disk-geometry device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3956
msgid ""
"This displays the disk geometry of C<device> read from the partition table.  "
"Especially in the case where the underlying block device has been resized, "
"this can be different from the kernel's idea of the geometry (see "
"L</sfdisk-kernel-geometry>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3964
msgid "sfdisk-kernel-geometry"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3966
#, no-wrap
msgid ""
" sfdisk-kernel-geometry device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3973
msgid "sfdisk-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3975
#, no-wrap
msgid ""
" sfdisk-l device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3981
msgid "See also: L</part-list>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3983
msgid "sh"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3985
#, no-wrap
msgid ""
" sh command\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3990
msgid "This is like L</command>, but passes the command to:"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3998
msgid "All the provisos about L</command> apply to this call."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4000
msgid "sh-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4002
#, no-wrap
msgid ""
" sh-lines command\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4004
msgid "This is the same as L</sh>, but splits the result into a list of lines."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4007
msgid "See also: L</command-lines>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4009
msgid "sleep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4011
#, no-wrap
msgid ""
" sleep secs\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4015
msgid "stat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4017
#, no-wrap
msgid ""
" stat path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4023
msgid "statvfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4025
#, no-wrap
msgid ""
" statvfs path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4033
msgid "strings"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4035
#, no-wrap
msgid ""
" strings path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4043
msgid "strings-e"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4045
#, no-wrap
msgid ""
" strings-e encoding path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4047
msgid ""
"This is like the L</strings> command, but allows you to specify the encoding "
"of strings that are looked for in the source file C<path>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4057
msgid ""
"Single 7-bit-byte characters like ASCII and the ASCII-compatible parts of "
"ISO-8859-X (this is what L</strings> uses)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4089
msgid "swapoff-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4091
#, no-wrap
msgid ""
" swapoff-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4093
msgid ""
"This command disables the libguestfs appliance swap device or partition "
"named C<device>.  See L</swapon-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4097
msgid "swapoff-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4099
#, no-wrap
msgid ""
" swapoff-file file\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4103
msgid "swapoff-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4105
#, no-wrap
msgid ""
" swapoff-label label\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4110
msgid "swapoff-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4112
#, no-wrap
msgid ""
" swapoff-uuid uuid\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4117
msgid "swapon-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4119
#, no-wrap
msgid ""
" swapon-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4121
msgid ""
"This command enables the libguestfs appliance to use the swap device or "
"partition named C<device>.  The increased memory is made available for all "
"commands, for example those run using L</command> or L</sh>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4133
msgid "swapon-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4135
#, no-wrap
msgid ""
" swapon-file file\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4137
msgid "This command enables swap to a file.  See L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4140
msgid "swapon-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4142
#, no-wrap
msgid ""
" swapon-label label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4144
msgid ""
"This command enables swap to a labeled swap partition.  See "
"L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4147
msgid "swapon-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4149
#, no-wrap
msgid ""
" swapon-uuid uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4151
msgid ""
"This command enables swap to a swap partition with the given UUID.  See "
"L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4154
msgid "sync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4156
#, no-wrap
msgid ""
" sync\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4164
msgid "tail"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4166
#, no-wrap
msgid ""
" tail path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4174
msgid "tail-n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4176
#, no-wrap
msgid ""
" tail-n nrlines path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4189
msgid "tar-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4191
#, no-wrap
msgid ""
" tar-in (tarfile|-) directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4196
msgid "To upload a compressed tarball, use L</tgz-in> or L</txz-in>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4201
msgid "tar-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4203
#, no-wrap
msgid ""
" tar-out directory (tarfile|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4208
msgid "To download a compressed tarball, use L</tgz-out> or L</txz-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4213
msgid "tgz-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4215
#, no-wrap
msgid ""
" tgz-in (tarball|-) directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4220
msgid "To upload an uncompressed tarball, use L</tar-in>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4224
msgid "tgz-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4226
#, no-wrap
msgid ""
" tgz-out directory (tarball|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4231
msgid "To download an uncompressed tarball, use L</tar-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4235
msgid "touch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4237
#, no-wrap
msgid ""
" touch path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4246
msgid "truncate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4248
#, no-wrap
msgid ""
" truncate path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4253
msgid "truncate-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4255
#, no-wrap
msgid ""
" truncate-size path size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4260
msgid ""
"If the current file size is less than C<size> then the file is extended to "
"the required size with zero bytes.  This creates a sparse file (ie. disk "
"blocks are not allocated for the file until you write to it).  To create a "
"non-sparse file of zeroes, use L</fallocate64> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4266
msgid "tune2fs-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4268
#, no-wrap
msgid ""
" tune2fs-l device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4278
msgid "txz-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4280
#, no-wrap
msgid ""
" txz-in (tarball|-) directory\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4287
msgid "txz-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4289
#, no-wrap
msgid ""
" txz-out directory (tarball|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4296
msgid "umask"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4298
#, no-wrap
msgid ""
" umask mask\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4312
msgid "See also L</get-umask>, L<umask(2)>, L</mknod>, L</mkdir>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4317
msgid "umount"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4319
msgid "unmount"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4321
#, no-wrap
msgid ""
" umount pathordevice\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4327
msgid "umount-all"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4329
msgid "unmount-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4331
#, no-wrap
msgid ""
" umount-all\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4337
msgid "upload"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4339
#, no-wrap
msgid ""
" upload (filename|-) remotefilename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4346
msgid "See also L</download>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4350
msgid "upload-offset"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4352
#, no-wrap
msgid ""
" upload-offset (filename|-) remotefilename offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4364
msgid ""
"Note that there is no limit on the amount of data that can be uploaded with "
"this call, unlike with L</pwrite>, and this call always writes the full "
"amount unless an error occurs."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4369
msgid "See also L</upload>, L</pwrite>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4373
msgid "utimens"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4375
#, no-wrap
msgid ""
" utimens path atsecs atnsecs mtsecs mtnsecs\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4394
msgid "version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4396
#, no-wrap
msgid ""
" version\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4423
msgid ""
"I<Note:> Don't use this call to test for availability of features.  In "
"enterprise distributions we backport features from later versions into "
"earlier versions, making this an unreliable way to test for features.  Use "
"L</available> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4429
msgid "vfs-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4431
#, no-wrap
msgid ""
" vfs-label device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4438
msgid "To find a filesystem from the label, use L</findfs-label>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4440
msgid "vfs-type"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4442
#, no-wrap
msgid ""
" vfs-type device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4452
msgid "vfs-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4454
#, no-wrap
msgid ""
" vfs-uuid device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4461
msgid "To find a filesystem from the UUID, use L</findfs-uuid>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4463
msgid "vg-activate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4465
#, no-wrap
msgid ""
" vg-activate true|false 'volgroups ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4478
msgid "vg-activate-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4480
#, no-wrap
msgid ""
" vg-activate-all true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4490
msgid "vgcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4492
#, no-wrap
msgid ""
" vgcreate volgroup 'physvols ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4497
msgid "vglvuuids"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4499
#, no-wrap
msgid ""
" vglvuuids vgname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4504
msgid ""
"You can use this along with L</lvs> and L</lvuuid> calls to associate "
"logical volumes and volume groups."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4507
msgid "See also L</vgpvuuids>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4509
msgid "vgpvuuids"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4511
#, no-wrap
msgid ""
" vgpvuuids vgname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4516
msgid ""
"You can use this along with L</pvs> and L</pvuuid> calls to associate "
"physical volumes and volume groups."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4519
msgid "See also L</vglvuuids>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4521
msgid "vgremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4523
#, no-wrap
msgid ""
" vgremove vgname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4530
msgid "vgrename"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4532
#, no-wrap
msgid ""
" vgrename volgroup newvolgroup\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4536
msgid "vgs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4538
#, no-wrap
msgid ""
" vgs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4546
msgid "See also L</vgs-full>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4548
msgid "vgs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4550
#, no-wrap
msgid ""
" vgs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4555
msgid "vgscan"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4557
#, no-wrap
msgid ""
" vgscan\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4562
msgid "vguuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4564
#, no-wrap
msgid ""
" vguuid vgname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4568
msgid "wc-c"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4570
#, no-wrap
msgid ""
" wc-c path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4575
msgid "wc-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4577
#, no-wrap
msgid ""
" wc-l path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4582
msgid "wc-w"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4584
#, no-wrap
msgid ""
" wc-w path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4589
msgid "write"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4591
#, no-wrap
msgid ""
" write path content\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4599
msgid "write-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4601
#, no-wrap
msgid ""
" write-file path content size\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4624
msgid "zegrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4626
#, no-wrap
msgid ""
" zegrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4634
msgid "zegrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4636
#, no-wrap
msgid ""
" zegrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4644
msgid "zero"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4646
#, no-wrap
msgid ""
" zero device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4654
msgid "See also: L</zero-device>, L</scrub-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4656
msgid "zero-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4658
#, no-wrap
msgid ""
" zero-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4660
msgid ""
"This command writes zeroes over the entire C<device>.  Compare with L</zero> "
"which just zeroes the first few blocks of a device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4667
msgid "zerofree"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4669
#, no-wrap
msgid ""
" zerofree device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4682
msgid "zfgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4684
#, no-wrap
msgid ""
" zfgrep pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4692
msgid "zfgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4694
#, no-wrap
msgid ""
" zfgrepi pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4702
msgid "zfile"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4704
#, no-wrap
msgid ""
" zfile meth path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4711
msgid "Since 1.0.63, use L</file> instead which can now process compressed files."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4721
msgid "zgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4723
#, no-wrap
msgid ""
" zgrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4731
msgid "zgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4733
#, no-wrap
msgid ""
" zgrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:1
msgid "alloc"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:3
msgid "allocate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:5
#, no-wrap
msgid ""
" alloc filename size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:7
msgid ""
"This creates an empty (zeroed) file of the given size, and then adds so it "
"can be further examined."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:10 ../fish/guestfish-commands.pod:168
msgid "For more advanced image creation, see L<qemu-img(1)> utility."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:12 ../fish/guestfish-commands.pod:170
msgid "Size can be specified using standard suffixes, eg. C<1M>."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:14
msgid ""
"To create a sparse file, use L</sparse> instead.  To create a prepared disk "
"image, see L</PREPARED DISK IMAGES>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:17
msgid "copy-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:19
#, no-wrap
msgid ""
" copy-in local [local ...] /remotedir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:21
msgid ""
"C<copy-in> copies local files or directories recursively into the disk "
"image, placing them in the directory called C</remotedir> (which must "
"exist).  This guestfish meta-command turns into a sequence of L</tar-in> and "
"other commands as necessary."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:26
msgid ""
"Multiple local files and directories can be specified, but the last "
"parameter must always be a remote directory.  Wildcards cannot be used."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:30
msgid "copy-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:32
#, no-wrap
msgid ""
" copy-out remote [remote ...] localdir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:34
msgid ""
"C<copy-out> copies remote files or directories recursively out of the disk "
"image, placing them on the host disk in a local directory called C<localdir> "
"(which must exist).  This guestfish meta-command turns into a sequence of "
"L</download>, L</tar-out> and other commands as necessary."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:40
msgid ""
"Multiple remote files and directories can be specified, but the last "
"parameter must always be a local directory.  To download to the current "
"directory, use C<.> as in:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:44
#, no-wrap
msgid ""
" copy-out /home .\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:46
msgid ""
"Wildcards cannot be used in the ordinary command, but you can use them with "
"the help of L</glob> like this:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:49
#, no-wrap
msgid ""
" glob copy-out /home/* .\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:51
msgid "echo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:53
#, no-wrap
msgid ""
" echo [params ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:55
msgid "This echos the parameters to the terminal."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:57
msgid "edit"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:59
msgid "vi"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:61
msgid "emacs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:63
#, no-wrap
msgid ""
" edit filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:65
msgid ""
"This is used to edit a file.  It downloads the file, edits it locally using "
"your editor, then uploads the result."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:68
msgid ""
"The editor is C<$EDITOR>.  However if you use the alternate commands C<vi> "
"or C<emacs> you will get those corresponding editors."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:72
msgid "glob"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:74
#, no-wrap
msgid ""
" glob command args...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:76
msgid ""
"Expand wildcards in any paths in the args list, and run C<command> "
"repeatedly on each matching path."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:79
msgid "See L</WILDCARDS AND GLOBBING>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:81
msgid "hexedit"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:83
#, no-wrap
msgid ""
" hexedit <filename|device>\n"
" hexedit <filename|device> <max>\n"
" hexedit <filename|device> <start> <max>\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:87
msgid ""
"Use hexedit (a hex editor) to edit all or part of a binary file or block "
"device."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:90
msgid ""
"This command works by downloading potentially the whole file or device, "
"editing it locally, then uploading it.  If the file or device is large, you "
"have to specify which part you wish to edit by using C<max> and/or C<start> "
"C<max> parameters.  C<start> and C<max> are specified in bytes, with the "
"usual modifiers allowed such as C<1M> (1 megabyte)."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:97
msgid "For example to edit the first few sectors of a disk you might do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:100
#, no-wrap
msgid ""
" hexedit /dev/sda 1M\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:102
msgid ""
"which would allow you to edit anywhere within the first megabyte of the "
"disk."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:105
msgid "To edit the superblock of an ext2 filesystem on C</dev/sda1>, do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:107
#, no-wrap
msgid ""
" hexedit /dev/sda1 0x400 0x400\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:109
msgid "(assuming the superblock is in the standard location)."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:111
msgid ""
"This command requires the external L<hexedit(1)> program.  You can specify "
"another program to use by setting the C<HEXEDITOR> environment variable."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:115
msgid "See also L</hexdump>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:117
msgid "lcd"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:119
#, no-wrap
msgid ""
" lcd directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:121
msgid "Change the local directory, ie. the current directory of guestfish itself."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:124
msgid "Note that C<!cd> won't do what you might expect."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:126
msgid "man"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:128
msgid "manual"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:130
#, no-wrap
msgid ""
"  man\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:132
msgid "Opens the manual page for guestfish."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:134
msgid "more"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:136
msgid "less"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:138
#, no-wrap
msgid ""
" more filename\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:140
#, no-wrap
msgid ""
" less filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:142
msgid "This is used to view a file."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:144
msgid ""
"The default viewer is C<$PAGER>.  However if you use the alternate command "
"C<less> you will get the C<less> command specifically."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:147
msgid "reopen"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:149
#, no-wrap
msgid ""
"  reopen\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:151
msgid ""
"Close and reopen the libguestfs handle.  It is not necessary to use this "
"normally, because the handle is closed properly when guestfish exits.  "
"However this is occasionally useful for testing."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:155
msgid "sparse"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:157
#, no-wrap
msgid ""
" sparse filename size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:159
msgid ""
"This creates an empty sparse file of the given size, and then adds so it can "
"be further examined."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:162
msgid ""
"In all respects it works the same as the L</alloc> command, except that the "
"image file is allocated sparsely, which means that disk blocks are not "
"assigned to the file until they are needed.  Sparse disk files only use "
"space when written to, but they are slower and there is a danger you could "
"run out of real disk space during a write operation."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:172
msgid "supported"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:174
#, no-wrap
msgid ""
" supported\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:176
msgid ""
"This command returns a list of the optional groups known to the daemon, and "
"indicates which ones are supported by this build of the libguestfs "
"appliance."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:180
msgid "See also L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:182
msgid "time"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:184
#, no-wrap
msgid ""
" time command args...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:186
msgid ""
"Run the command as usual, but print the elapsed time afterwards.  This can "
"be useful for benchmarking operations."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:5
msgid "libguestfs-test-tool - End user tests for libguestfs"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:9
#, no-wrap
msgid ""
" libguestfs-test-tool [--options]\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:13
msgid ""
"libguestfs-test-tool is a test program shipped with libguestfs to end users "
"and developers, to allow them to check basic libguestfs functionality is "
"working.  This is needed because libguestfs occasionally breaks for reasons "
"beyond our control: usually because of changes in the underlying qemu or "
"kernel packages, or the host environment."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:20
msgid "If you suspect a problem in libguestfs, then just run:"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:22
#, no-wrap
msgid ""
" libguestfs-test-tool\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:24
msgid "It will print lots of diagnostic messages."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:26
msgid "If it runs to completion successfully, you will see this near the end:"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:28
#, no-wrap
msgid ""
" ===== TEST FINISHED OK =====\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:30
msgid "and the test tool will exit with code 0."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:32
msgid ""
"If it fails (and/or exits with non-zero error code), please paste the "
"B<complete, unedited> output of the test tool into a bug report.  More "
"information about reporting bugs can be found on the "
"L<http://libguestfs.org/> website."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:41
msgid "I<--help>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:43
msgid "Display short usage information and exit."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:45
msgid "I<--helper /path/to/libguestfs-test-tool-helper>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:47
msgid ""
"Pass an alternate name for the helper program.  libguestfs-test-tool will "
"normally look in the C<$libexec> directory that was configured when the tool "
"was built."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:51
msgid "I<--qemu qemu_binary>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:53
msgid ""
"If you have downloaded another qemu binary, point this option at the full "
"path of the binary to try it."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:56
msgid "I<--qemudir qemu_source_dir>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:58
msgid ""
"If you have compiled qemu from source, point this option at the source "
"directory to try it."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:61
msgid "I<--timeout N>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:63
msgid ""
"Set the launch timeout to C<N> seconds.  The default is 120 seconds which "
"does not usually need to be adjusted unless your machine is very slow."
msgstr ""

# type: =head1
#: ../test-tool/libguestfs-test-tool.pod:69
msgid "TRYING OUT A DIFFERENT VERSION OF QEMU"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:71
msgid ""
"If you have compiled another version of qemu from source and would like to "
"try that, then you can use the I<--qemudir> option to point to the qemu "
"source directory."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:75
msgid ""
"If you have downloaded a qemu binary from somewhere, use the I<--qemu> "
"option to point to the binary."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:78
msgid ""
"When using an alternate qemu with libguestfs, usually you would need to "
"write a qemu wrapper script (see section I<QEMU WRAPPERS> in "
"L<guestfs(3)>).  libguestfs-test-tool writes a temporary qemu wrapper script "
"when you use either of the I<--qemudir> or I<--qemu> options."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:85
msgid ""
"libguestfs-test-tool returns I<0> if the tests completed without error, or "
"I<1> if there was an error."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:92
msgid "/usr/libexec/libguestfs-test-tool-helper"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:94
msgid ""
"This helper program is run inside the appliance and provides additional "
"tests."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:97
msgid "/usr/bin/mkisofs"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:99
msgid ""
"The C<mkisofs> command is required in order to construct a CD-ROM ISO file "
"which is used as part of the tests."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:106
msgid ""
"For the full list of environment variables which may affect libguestfs, "
"please see the L<guestfs(3)> manual page."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:111
msgid "L<guestfs(3)>, L<http://libguestfs.org/>, L<http://qemu.org/>."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:121
msgid "Copyright (C) 2009 Red Hat Inc.  L<http://libguestfs.org/>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:5
msgid "guestmount - Mount a guest filesystem on the host using FUSE and libguestfs"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:9
#, no-wrap
msgid ""
" guestmount [--options] -a disk.img -m device [--ro] mountpoint\n"
"\n"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:11
#, no-wrap
msgid ""
" guestmount [--options] -a disk.img -i [--ro] mountpoint\n"
"\n"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:13
#, no-wrap
msgid ""
" guestmount [--options] -d Guest -i [--ro] mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:17
msgid ""
"You must I<not> use C<guestmount> in read-write mode on live virtual "
"machines.  If you do this, you risk disk corruption in the VM."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:22
msgid ""
"The guestmount program can be used to mount virtual machine filesystems and "
"other disk images on the host.  It uses libguestfs for access to the guest "
"filesystem, and FUSE (the \"filesystem in userspace\") to make it appear as "
"a mountable device."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:27
msgid ""
"Along with other options, you have to give at least one device (I<-a> "
"option) or libvirt domain (I<-d> option), and at least one mountpoint (I<-m> "
"option) or use the I<-i> inspection option.  How this works is better "
"explained in the L<guestfish(1)> manual page, or by looking at the examples "
"below."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:33
msgid ""
"FUSE lets you mount filesystems as non-root.  The mountpoint must be owned "
"by you, and the filesystem will not be visible to any other users unless you "
"make certain global configuration changes to C</etc/fuse.conf>.  To unmount "
"the filesystem, use the C<fusermount -u> command."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:41
msgid ""
"For a typical Windows guest which has its main filesystem on the first "
"partition:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:44
#, no-wrap
msgid ""
" guestmount -a windows.img -m /dev/sda1 --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:46
msgid ""
"For a typical Linux guest which has a /boot filesystem on the first "
"partition, and the root filesystem on a logical volume:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:49
#, no-wrap
msgid ""
" guestmount -a linux.img -m /dev/VG/LV -m /dev/sda1:/boot --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:51
msgid "To get libguestfs to detect guest mountpoints for you:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:53
#, no-wrap
msgid ""
" guestmount -a guest.img -i --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:55
msgid "For a libvirt guest called \"Guest\" you could do:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:57
#, no-wrap
msgid ""
" guestmount -d Guest -i --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:59
msgid ""
"If you don't know what filesystems are contained in a guest or disk image, "
"use L<virt-filesystems(1)> first:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:62
#, no-wrap
msgid ""
" virt-filesystems MyGuest\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:64
msgid ""
"If you want to trace the libguestfs calls but without excessive debugging "
"information, we recommend:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:67
#, no-wrap
msgid ""
" guestmount [...] --trace /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:69
msgid "If you want to debug the program, we recommend:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:71
#, no-wrap
msgid ""
" guestmount [...] --trace --verbose /mnt\n"
"\n"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:77
msgid "B<-a image> | B<--add image>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:79
msgid "Add a block device or virtual machine image."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:84
msgid "B<-c URI> | B<--connect URI>"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:90
msgid "B<-d libvirt-domain> | B<--domain libvirt-domain>"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:96
msgid "B<--dir-cache-timeout N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:98
msgid ""
"Set the readdir cache timeout to I<N> seconds, the default being 60 "
"seconds.  The readdir cache [actually, there are several semi-independent "
"caches] is populated after a readdir(2) call with the stat and extended "
"attributes of the files in the directory, in anticipation that they will be "
"requested soon after."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:104
msgid ""
"There is also a different attribute cache implemented by FUSE (see the FUSE "
"option I<-o attr_timeout>), but the FUSE cache does not anticipate future "
"requests, only cache existing ones."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:115
msgid "B<--format=raw|qcow2|..> | B<--format>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:122
msgid ""
"If you have untrusted raw-format guest disk images, you should use this "
"option to specify the disk format.  This avoids a possible security problem "
"with malicious guests (CVE-2010-3851).  See also "
"L<guestfs(3)/guestfs_add_drive_opts>."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:127
msgid "B<--fuse-help>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:129
msgid "Display help on special FUSE options (see I<-o> below)."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:133
msgid "Display brief help and exit."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:135
msgid "B<-i> | B<--inspector>"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:146
msgid "B<-m dev[:mnt]> | B<--mount dev[:mnt]>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:148
msgid ""
"Mount the named partition or logical volume on the given mountpoint B<in the "
"guest> (this has nothing to do with mountpoints in the host)."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:151
msgid ""
"If the mountpoint is omitted, it defaults to C</>.  You have to mount "
"something on C</>."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:154
msgid "B<-n> | B<--no-sync>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:156
msgid ""
"By default, we attempt to sync the guest disk when the FUSE mountpoint is "
"unmounted.  If you specify this option, then we don't attempt to sync the "
"disk.  See the discussion of autosync in the L<guestfs(3)> manpage."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:161
msgid "B<-o option> | B<--option option>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:163
msgid "Pass extra options to FUSE."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:165
msgid ""
"To get a list of all the extra options supported by FUSE, use the command "
"below.  Note that only the FUSE I<-o> options can be passed, and only some "
"of them are a good idea."
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:169
#, no-wrap
msgid ""
" guestmount --fuse-help\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:171
msgid "Some potentially useful FUSE options:"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:175
msgid "B<-o allow_other>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:177
msgid "Allow other users to see the filesystem."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:179
msgid "B<-o attr_timeout=N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:181
msgid "Enable attribute caching by FUSE, and set the timeout to I<N> seconds."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:183
msgid "B<-o kernel_cache>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:185
msgid ""
"Allow the kernel to cache files (reduces the number of reads that have to go "
"through the L<guestfs(3)> API).  This is generally a good idea if you can "
"afford the extra memory usage."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:189
msgid "B<-o uid=N> B<-o gid=N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:191
msgid ""
"Use these options to map all UIDs and GIDs inside the guest filesystem to "
"the chosen values."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:196
msgid "B<-r> | B<--ro>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:198
msgid ""
"Add devices and mount everything read-only.  Also disallow writes and make "
"the disk appear read-only to FUSE."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:201
msgid ""
"This is highly recommended if you are not going to edit the guest disk.  If "
"the guest is running and this option is I<not> supplied, then there is a "
"strong risk of disk corruption in the guest.  We try to prevent this from "
"happening, but it is not always possible."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:206
msgid "See also L<guestfish(1)/OPENING DISKS FOR READ AND WRITE>."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:210
msgid "Enable SELinux support for the guest."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:212
msgid "B<-v> | B<--verbose>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:214
msgid "Enable verbose messages from underlying libguestfs."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:216
msgid "B<-V> | B<--version>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:218
msgid "Display the program version and exit."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:220
msgid "B<-w> | B<--rw>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:222
msgid ""
"This option does nothing at the moment.  See L<guestfish(1)/OPENING DISKS "
"FOR READ AND WRITE>."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:225
msgid "B<-x> | B<--trace>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:227
msgid "Trace libguestfs calls and entry into each FUSE function."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:229
msgid "This also stops the daemon from forking into the background."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:235
msgid ""
"L<guestfish(1)>, L<virt-inspector(1)>, L<virt-cat(1)>, L<virt-edit(1)>, "
"L<virt-tar(1)>, L<guestfs(3)>, L<http://libguestfs.org/>, "
"L<http://fuse.sf.net/>."
msgstr ""
