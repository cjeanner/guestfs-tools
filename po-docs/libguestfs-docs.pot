# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Red Hat Inc.
# This file is distributed under the same license as the libguestfs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: libguestfs 1.5.22\n"
"Report-Msgid-Bugs-To: libguestfs@redhat.com\n"
"POT-Creation-Date: 2010-10-19 15:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: ENCODING"

# type: =encoding
#: ../src/guestfs.pod:1 ../fish/guestfish.pod:1 ../test-tool/libguestfs-test-tool.pod:1 ../fuse/guestmount.pod:1 ../inspector/virt-inspector.pl:36 ../tools/virt-edit.pl:31 ../tools/virt-win-reg.pl:34 ../tools/virt-df.pl:32 ../tools/virt-ls.pl:31 ../tools/virt-resize.pl:38 ../tools/virt-list-filesystems.pl:28 ../tools/virt-cat.pl:30 ../tools/virt-tar.pl:30 ../tools/virt-rescue.pl:29 ../tools/virt-make-fs.pl:33 ../tools/virt-list-partitions.pl:28
msgid "utf8"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:3 ../fish/guestfish.pod:3 ../test-tool/libguestfs-test-tool.pod:3 ../fuse/guestmount.pod:3 ../inspector/virt-inspector.pl:38 ../tools/virt-edit.pl:33 ../tools/virt-win-reg.pl:36 ../tools/virt-df.pl:34 ../tools/virt-ls.pl:33 ../tools/virt-resize.pl:40 ../tools/virt-list-filesystems.pl:30 ../tools/virt-cat.pl:32 ../tools/virt-tar.pl:32 ../tools/virt-rescue.pl:31 ../tools/virt-make-fs.pl:35 ../tools/virt-list-partitions.pl:30
msgid "NAME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:5
msgid "guestfs - Library for accessing and modifying virtual machine images"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:7 ../fish/guestfish.pod:7 ../test-tool/libguestfs-test-tool.pod:7 ../fuse/guestmount.pod:7 ../inspector/virt-inspector.pl:42 ../tools/virt-edit.pl:37 ../tools/virt-win-reg.pl:40 ../tools/virt-df.pl:38 ../tools/virt-ls.pl:37 ../tools/virt-resize.pl:44 ../tools/virt-list-filesystems.pl:34 ../tools/virt-cat.pl:36 ../tools/virt-tar.pl:36 ../tools/virt-rescue.pl:35 ../tools/virt-make-fs.pl:39 ../tools/virt-list-partitions.pl:34
msgid "SYNOPSIS"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:9
#, no-wrap
msgid ""
" #include <guestfs.h>\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:11
#, no-wrap
msgid ""
" guestfs_h *g = guestfs_create ();\n"
" guestfs_add_drive (g, \"guest.img\");\n"
" guestfs_launch (g);\n"
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
" guestfs_touch (g, \"/hello\");\n"
" guestfs_umount (g, \"/\");\n"
" guestfs_sync (g);\n"
" guestfs_close (g);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:20
#, no-wrap
msgid ""
" cc prog.c -o prog -lguestfs\n"
"or:\n"
" cc prog.c -o prog `pkg-config libguestfs --cflags --libs`\n"
"\n"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:24 ../fish/guestfish.pod:30 ../test-tool/libguestfs-test-tool.pod:11 ../fuse/guestmount.pod:16 ../inspector/virt-inspector.pl:48 ../tools/virt-edit.pl:51 ../tools/virt-win-reg.pl:64 ../tools/virt-df.pl:46 ../tools/virt-ls.pl:43 ../tools/virt-resize.pl:50 ../tools/virt-list-filesystems.pl:40 ../tools/virt-cat.pl:42 ../tools/virt-tar.pl:73 ../tools/virt-rescue.pl:51 ../tools/virt-make-fs.pl:47 ../tools/virt-list-partitions.pl:40
msgid "DESCRIPTION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:26
msgid ""
"Libguestfs is a library for accessing and modifying guest disk images.  "
"Amongst the things this is good for: making batch configuration changes to "
"guests, getting disk used/free statistics (see also: virt-df), migrating "
"between virtualization systems (see also: virt-p2v), performing partial "
"backups, performing partial guest clones, cloning guests and changing "
"registry/UUID/hostname info, and much else besides."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:34
msgid ""
"Libguestfs uses Linux kernel and qemu code, and can access any type of guest "
"filesystem that Linux and qemu can, including but not limited to: ext2/3/4, "
"btrfs, FAT and NTFS, LVM, many different disk partition schemes, qcow, "
"qcow2, vmdk."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:39
msgid ""
"Libguestfs provides ways to enumerate guest storage (eg. partitions, LVs, "
"what filesystem is in each LV, etc.).  It can also run commands in the "
"context of the guest.  Also you can access filesystems over FUSE."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:44
msgid ""
"Libguestfs is a library that can be linked with C and C++ management "
"programs (or management programs written in OCaml, Perl, Python, Ruby, Java, "
"PHP, Haskell or C#).  You can also use it from shell scripts or the command "
"line."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:49
msgid ""
"You don't need to be root to use libguestfs, although obviously you do need "
"enough permissions to access the disk images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:52
msgid ""
"Libguestfs is a large API because it can do many things.  For a gentle "
"introduction, please read the L</API OVERVIEW> section next."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:55
msgid "API OVERVIEW"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:57
msgid ""
"This section provides a gentler overview of the libguestfs API.  We also try "
"to group API calls together, where that may not be obvious from reading "
"about the individual calls in the main section of this manual."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:62
msgid "HANDLES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:64
msgid ""
"Before you can use libguestfs calls, you have to create a handle.  Then you "
"must add at least one disk image to the handle, followed by launching the "
"handle, then performing whatever operations you want, and finally closing "
"the handle.  By convention we use the single letter C<g> for the name of the "
"handle variable, although of course you can use any name you want."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:71
msgid "The general structure of all libguestfs-using programs looks like this:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:74
#, no-wrap
msgid ""
" guestfs_h *g = guestfs_create ();\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:76
#, no-wrap
msgid ""
" /* Call guestfs_add_drive additional times if there are\n"
"  * multiple disk images.\n"
"  */\n"
" guestfs_add_drive (g, \"guest.img\");\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:81
#, no-wrap
msgid ""
" /* Most manipulation calls won't work until you've launched\n"
"  * the handle 'g'.  You have to do this _after_ adding drives\n"
"  * and _before_ other commands.\n"
"  */\n"
" guestfs_launch (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:87
#, no-wrap
msgid ""
" /* Now you can examine what partitions, LVs etc are available.\n"
"  */\n"
" char **partitions = guestfs_list_partitions (g);\n"
" char **logvols = guestfs_lvs (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:92
#, no-wrap
msgid ""
" /* To access a filesystem in the image, you must mount it.\n"
"  */\n"
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:96
#, no-wrap
msgid ""
" /* Now you can perform filesystem actions on the guest\n"
"  * disk image.\n"
"  */\n"
" guestfs_touch (g, \"/hello\");\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:101
#, no-wrap
msgid ""
" /* You only need to call guestfs_sync if you have made\n"
"  * changes to the guest image.  (But if you've made changes\n"
"  * then you *must* sync).  See also: guestfs_umount and\n"
"  * guestfs_umount_all calls.\n"
"  */\n"
" guestfs_sync (g);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:108
#, no-wrap
msgid ""
" /* Close the handle 'g'. */\n"
" guestfs_close (g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:111
msgid ""
"The code above doesn't include any error checking.  In real code you should "
"check return values carefully for errors.  In general all functions that "
"return integers return C<-1> on error, and all functions that return "
"pointers return C<NULL> on error.  See section L</ERROR HANDLING> below for "
"how to handle errors, and consult the documentation for each function call "
"below to see precisely how they return error indications."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:119
msgid "DISK IMAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:121
msgid ""
"The image filename (C<\"guest.img\"> in the example above) could be a disk "
"image from a virtual machine, a L<dd(1)> copy of a physical hard disk, an "
"actual block device, or simply an empty file of zeroes that you have created "
"through L<posix_fallocate(3)>.  Libguestfs lets you do useful things to all "
"of these."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:127
msgid ""
"You can add a disk read-only using L</guestfs_add_drive_ro>, in which case "
"libguestfs won't modify the file."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:130
msgid ""
"Be extremely cautious if the disk image is in use, eg. if it is being used "
"by a virtual machine.  Adding it read-write will almost certainly cause disk "
"corruption, but adding it read-only is safe."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:134
msgid ""
"You must add at least one disk image, and you may add multiple disk images.  "
"In the API, the disk images are usually referred to as C</dev/sda> (for the "
"first one you added), C</dev/sdb> (for the second one you added), etc."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:139
msgid ""
"Once L</guestfs_launch> has been called you cannot add any more images.  You "
"can call L</guestfs_list_devices> to get a list of the device names, in the "
"order that you added them.  See also L</BLOCK DEVICE NAMING> below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:144
msgid "MOUNTING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:146
msgid ""
"Before you can read or write files, create directories and so on in a disk "
"image that contains filesystems, you have to mount those filesystems using "
"L</guestfs_mount>.  If you already know that a disk image contains (for "
"example) one partition with a filesystem on that partition, then you can "
"mount it directly:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:152
#, no-wrap
msgid ""
" guestfs_mount (g, \"/dev/sda1\", \"/\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:154
msgid ""
"where C</dev/sda1> means literally the first partition (C<1>) of the first "
"disk image that we added (C</dev/sda>).  If the disk contains Linux LVM2 "
"logical volumes you could refer to those instead (eg. C</dev/VG/LV>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:158
msgid ""
"If you are given a disk image and you don't know what it contains then you "
"have to find out.  Libguestfs can do that too: use "
"L</guestfs_list_partitions> and L</guestfs_lvs> to list possible partitions "
"and LVs, and either try mounting each to see what is mountable, or else "
"examine them with L</guestfs_vfs_type> or L</guestfs_file>.  Libguestfs also "
"has a set of APIs for inspection of disk images (see L</INSPECTION> below).  "
"But you might find it easier to look at higher level programs built on top "
"of libguestfs, in particular L<virt-inspector(1)>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:168
msgid ""
"To mount a disk image read-only, use L</guestfs_mount_ro>.  There are "
"several other variations of the C<guestfs_mount_*> call."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:171
msgid "FILESYSTEM ACCESS AND MODIFICATION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:173
msgid ""
"The majority of the libguestfs API consists of fairly low-level calls for "
"accessing and modifying the files, directories, symlinks etc on mounted "
"filesystems.  There are over a hundred such calls which you can find listed "
"in detail below in this man page, and we don't even pretend to cover them "
"all in this overview."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:179
msgid ""
"Specify filenames as full paths, starting with C<\"/\"> and including the "
"mount point."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:182
msgid ""
"For example, if you mounted a filesystem at C<\"/\"> and you want to read "
"the file called C<\"etc/passwd\"> then you could do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:185
#, no-wrap
msgid ""
" char *data = guestfs_cat (g, \"/etc/passwd\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:187
msgid ""
"This would return C<data> as a newly allocated buffer containing the full "
"content of that file (with some conditions: see also L</DOWNLOADING> below), "
"or C<NULL> if there was an error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:191
msgid ""
"As another example, to create a top-level directory on that filesystem "
"called C<\"var\"> you would do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:194
#, no-wrap
msgid ""
" guestfs_mkdir (g, \"/var\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:196
msgid "To create a symlink you could do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:198
#, no-wrap
msgid ""
" guestfs_ln_s (g, \"/etc/init.d/portmap\",\n"
"               \"/etc/rc3.d/S30portmap\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:201
msgid ""
"Libguestfs will reject attempts to use relative paths and there is no "
"concept of a current working directory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:204
msgid ""
"Libguestfs can return errors in many situations: for example if the "
"filesystem isn't writable, or if a file or directory that you requested "
"doesn't exist.  If you are using the C API (documented here)  you have to "
"check for those error conditions after each call.  (Other language bindings "
"turn these errors into exceptions)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:210
msgid ""
"File writes are affected by the per-handle umask, set by calling "
"L</guestfs_umask> and defaulting to 022.  See L</UMASK>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:213
msgid "PARTITIONING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:215
msgid ""
"Libguestfs contains API calls to read, create and modify partition tables on "
"disk images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:218
msgid ""
"In the common case where you want to create a single partition covering the "
"whole disk, you should use the L</guestfs_part_disk> call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:222
#, no-wrap
msgid ""
" const char *parttype = \"mbr\";\n"
" if (disk_is_larger_than_2TB)\n"
"   parttype = \"gpt\";\n"
" guestfs_part_disk (g, \"/dev/sda\", parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:227
msgid ""
"Obviously this effectively wipes anything that was on that disk image "
"before."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:230
msgid "LVM2"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:232
msgid ""
"Libguestfs provides access to a large part of the LVM2 API, such as "
"L</guestfs_lvcreate> and L</guestfs_vgremove>.  It won't make much sense "
"unless you familiarize yourself with the concepts of physical volumes, "
"volume groups and logical volumes."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:237
msgid ""
"This author strongly recommends reading the LVM HOWTO, online at "
"L<http://tldp.org/HOWTO/LVM-HOWTO/>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:240
msgid "DOWNLOADING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:242
msgid ""
"Use L</guestfs_cat> to download small, text only files.  This call is "
"limited to files which are less than 2 MB and which cannot contain any ASCII "
"NUL (C<\\0>) characters.  However it has a very simple to use API."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:247
msgid ""
"L</guestfs_read_file> can be used to read files which contain arbitrary 8 "
"bit data, since it returns a (pointer, size) pair.  However it is still "
"limited to \"small\" files, less than 2 MB."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:251
msgid ""
"L</guestfs_download> can be used to download any file, with no limits on "
"content or size (even files larger than 4 GB)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:254
msgid "To download multiple files, see L</guestfs_tar_out> and L</guestfs_tgz_out>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:257
msgid "UPLOADING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:259
msgid ""
"It's often the case that you want to write a file or files to the disk "
"image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:262
msgid ""
"To write a small file with fixed content, use L</guestfs_write>.  To create "
"a file of all zeroes, use L</guestfs_truncate_size> (sparse) or "
"L</guestfs_fallocate64> (with all disk blocks allocated).  There are a "
"variety of other functions for creating test files, for example "
"L</guestfs_fill> and L</guestfs_fill_pattern>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:268
msgid ""
"To upload a single file, use L</guestfs_upload>.  This call has no limits on "
"file content or size (even files larger than 4 GB)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:271
msgid "To upload multiple files, see L</guestfs_tar_in> and L</guestfs_tgz_in>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:273
msgid ""
"However the fastest way to upload I<large numbers of arbitrary files> is to "
"turn them into a squashfs or CD ISO (see L<mksquashfs(8)> and "
"L<mkisofs(8)>), then attach this using L</guestfs_add_drive_ro>.  If you add "
"the drive in a predictable way (eg. adding it last after all other drives) "
"then you can get the device name from L</guestfs_list_devices> and mount it "
"directly using L</guestfs_mount_ro>.  Note that squashfs images are "
"sometimes non-portable between kernel versions, and they don't support "
"labels or UUIDs.  If you want to pre-build an image or you need to mount it "
"using a label or UUID, use an ISO image instead."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:284
msgid "COPYING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:286
msgid ""
"There are various different commands for copying between files and devices "
"and in and out of the guest filesystem.  These are summarised in the table "
"below."
msgstr ""

# type: =item
#: ../src/guestfs.pod:292
msgid "B<file> to B<file>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:294
msgid ""
"Use L</guestfs_cp> to copy a single file, or L</guestfs_cp_a> to copy "
"directories recursively."
msgstr ""

# type: =item
#: ../src/guestfs.pod:297
msgid "B<file or device> to B<file or device>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:299
msgid ""
"Use L</guestfs_dd> which efficiently uses L<dd(1)> to copy between files and "
"devices in the guest."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:302
msgid "Example: duplicate the contents of an LV:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:304
#, no-wrap
msgid ""
" guestfs_dd (g, \"/dev/VG/Original\", \"/dev/VG/Copy\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:306
msgid ""
"The destination (C</dev/VG/Copy>) must be at least as large as the source "
"(C</dev/VG/Original>).  To copy less than the whole source device, use "
"L</guestfs_copy_size>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:310
msgid "B<file on the host> to B<file or device>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:312
msgid "Use L</guestfs_upload>.  See L</UPLOADING> above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:314
msgid "B<file or device> to B<file on the host>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:316
msgid "Use L</guestfs_download>.  See L</DOWNLOADING> above."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:320
msgid "LISTING FILES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:322
msgid ""
"L</guestfs_ll> is just designed for humans to read (mainly when using the "
"L<guestfish(1)>-equivalent command C<ll>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:325
msgid ""
"L</guestfs_ls> is a quick way to get a list of files in a directory from "
"programs, as a flat list of strings."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:328
msgid ""
"L</guestfs_readdir> is a programmatic way to get a list of files in a "
"directory, plus additional information about each one.  It is more "
"equivalent to using the L<readdir(3)> call on a local filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:332
msgid ""
"L</guestfs_find> and L</guestfs_find0> can be used to recursively list "
"files."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:335
msgid "RUNNING COMMANDS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:337
msgid ""
"Although libguestfs is primarily an API for manipulating files inside guest "
"images, we also provide some limited facilities for running commands inside "
"guests."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:341
msgid "There are many limitations to this:"
msgstr ""

# type: =item
#: ../src/guestfs.pod:345 ../src/guestfs.pod:350 ../src/guestfs.pod:355 ../src/guestfs.pod:359 ../src/guestfs.pod:364 ../src/guestfs.pod:368 ../src/guestfs.pod:373 ../src/guestfs.pod:1254 ../src/guestfs.pod:1259 ../src/guestfs.pod:1263 ../src/guestfs.pod:1365 ../src/guestfs.pod:1369 ../src/guestfs.pod:1373 ../src/guestfs.pod:1378 ../src/guestfs.pod:1386 ../src/guestfs.pod:1405 ../src/guestfs.pod:1413 ../src/guestfs.pod:1643 ../src/guestfs.pod:1649 ../src/guestfs.pod:1654 ../src/guestfs.pod:1660 ../src/guestfs.pod:1767 ../src/guestfs.pod:1771 ../src/guestfs.pod:1775 ../src/guestfs.pod:1779 ../src/guestfs-actions.pod:14 ../src/guestfs-actions.pod:21 ../src/guestfs-actions.pod:372 ../src/guestfs-actions.pod:380 ../src/guestfs-actions.pod:387 ../src/guestfs-actions.pod:394 ../src/guestfs-actions.pod:1285 ../src/guestfs-actions.pod:1289 ../src/guestfs-actions.pod:1293 ../src/guestfs-actions.pod:1297 ../src/guestfs-actions.pod:1305 ../src/guestfs-actions.pod:1309 ../src/guestfs-actions.pod:1313 ../src/guestfs-actions.pod:1323 ../src/guestfs-actions.pod:1327 ../src/guestfs-actions.pod:1331 ../src/guestfs-actions.pod:1454 ../src/guestfs-actions.pod:1458 ../src/guestfs-actions.pod:1463 ../src/guestfs-actions.pod:1468 ../src/guestfs-actions.pod:1520 ../src/guestfs-actions.pod:1524 ../src/guestfs-actions.pod:1529 ../fish/guestfish.pod:338 ../fish/guestfish.pod:342 ../fish/guestfish.pod:346 ../fish/guestfish.pod:350 ../fish/guestfish-actions.pod:15 ../fish/guestfish-actions.pod:22 ../fish/guestfish-actions.pod:306 ../fish/guestfish-actions.pod:314 ../fish/guestfish-actions.pod:321 ../fish/guestfish-actions.pod:328 ../fish/guestfish-actions.pod:1023 ../fish/guestfish-actions.pod:1027 ../fish/guestfish-actions.pod:1031 ../fish/guestfish-actions.pod:1035 ../fish/guestfish-actions.pod:1043 ../fish/guestfish-actions.pod:1047 ../fish/guestfish-actions.pod:1051 ../fish/guestfish-actions.pod:1061 ../fish/guestfish-actions.pod:1065 ../fish/guestfish-actions.pod:1069 ../fish/guestfish-actions.pod:1159 ../fish/guestfish-actions.pod:1163 ../fish/guestfish-actions.pod:1168 ../fish/guestfish-actions.pod:1173 ../fish/guestfish-actions.pod:1215 ../fish/guestfish-actions.pod:1219 ../fish/guestfish-actions.pod:1224 ../tools/virt-df.pl:144 ../tools/virt-df.pl:150 ../tools/virt-resize.pl:348 ../tools/virt-resize.pl:353 ../tools/virt-resize.pl:363
msgid "*"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:347
msgid ""
"The kernel version that the command runs under will be different from what "
"it expects."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:352
msgid ""
"If the command needs to communicate with daemons, then most likely they "
"won't be running."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:357
msgid "The command will be running in limited memory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:361
msgid ""
"The network may not be available unless you enable it (see "
"L</guestfs_set_network>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:366
msgid "Only supports Linux guests (not Windows, BSD, etc)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:370
msgid "Architecture limitations (eg. won't work for a PPC guest on an X86 host)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:375
msgid ""
"For SELinux guests, you may need to enable SELinux and load policy first.  "
"See L</SELINUX> in this manpage."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:380
msgid ""
"The two main API calls to run commands are L</guestfs_command> and "
"L</guestfs_sh> (there are also variations)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:383
msgid ""
"The difference is that L</guestfs_sh> runs commands using the shell, so any "
"shell globs, redirections, etc will work."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:386
msgid "CONFIGURATION FILES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:388
msgid ""
"To read and write configuration files in Linux guest filesystems, we "
"strongly recommend using Augeas.  For example, Augeas understands how to "
"read and write, say, a Linux shadow password file or X.org configuration "
"file, and so avoids you having to write that code."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:393
msgid ""
"The main Augeas calls are bound through the C<guestfs_aug_*> APIs.  We don't "
"document Augeas itself here because there is excellent documentation on the "
"L<http://augeas.net/> website."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:397
msgid ""
"If you don't want to use Augeas (you fool!) then try calling "
"L</guestfs_read_lines> to get the file as a list of lines which you can "
"iterate over."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:401
msgid "SELINUX"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:403
msgid ""
"We support SELinux guests.  To ensure that labeling happens correctly in "
"SELinux guests, you need to enable SELinux and load the guest's policy:"
msgstr ""

# type: =item
#: ../src/guestfs.pod:409
msgid "1."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:411
msgid "Before launching, do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:413
#, no-wrap
msgid ""
" guestfs_set_selinux (g, 1);\n"
"\n"
msgstr ""

# type: =item
#: ../src/guestfs.pod:415
msgid "2."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:417
msgid ""
"After mounting the guest's filesystem(s), load the policy.  This is best "
"done by running the L<load_policy(8)> command in the guest itself:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:421
#, no-wrap
msgid ""
" guestfs_sh (g, \"/usr/sbin/load_policy\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:423
msgid ""
"(Older versions of C<load_policy> require you to specify the name of the "
"policy file)."
msgstr ""

# type: =item
#: ../src/guestfs.pod:426
msgid "3."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:428
msgid ""
"Optionally, set the security context for the API.  The correct security "
"context to use can only be known by inspecting the guest.  As an example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:432
#, no-wrap
msgid ""
" guestfs_setcon (g, \"unconfined_u:unconfined_r:unconfined_t:s0\");\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:436
msgid "This will work for running commands and editing existing files."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:438
msgid ""
"When new files are created, you may need to label them explicitly, for "
"example by running the external command C<restorecon pathname>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:442
msgid "UMASK"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:444
msgid ""
"Certain calls are affected by the current file mode creation mask (the "
"\"umask\").  In particular ones which create files or directories, such as "
"L</guestfs_touch>, L</guestfs_mknod> or L</guestfs_mkdir>.  This affects "
"either the default mode that the file is created with or modifies the mode "
"that you supply."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:450
msgid ""
"The default umask is C<022>, so files are created with modes such as C<0644> "
"and directories with C<0755>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:453
msgid ""
"There are two ways to avoid being affected by umask.  Either set umask to 0 "
"(call C<guestfs_umask (g, 0)> early after launching).  Or call "
"L</guestfs_chmod> after creating each file or directory."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:457
msgid "For more information about umask, see L<umask(2)>."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:459 ../fish/guestfish.pod:589
msgid "ENCRYPTED DISKS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:461
msgid ""
"Libguestfs allows you to access Linux guests which have been encrypted using "
"whole disk encryption that conforms to the Linux Unified Key Setup (LUKS) "
"standard.  This includes nearly all whole disk encryption systems used by "
"modern Linux guests."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:467
msgid ""
"Use L</guestfs_vfs_type> to identify LUKS-encrypted block devices (it "
"returns the string C<crypto_LUKS>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:470
msgid ""
"Then open these devices by calling L</guestfs_luks_open>.  Obviously you "
"will require the passphrase!"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:473
msgid ""
"Opening a LUKS device creates a new device mapper device called "
"C</dev/mapper/mapname> (where C<mapname> is the string you supply to "
"L</guestfs_luks_open>).  Reads and writes to this mapper device are "
"decrypted from and encrypted to the underlying block device respectively."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:479
msgid ""
"LVM volume groups on the device can be made visible by calling "
"L</guestfs_vgscan> followed by L</guestfs_vg_activate_all>.  The logical "
"volume(s) can now be mounted in the usual way."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:483
msgid ""
"Use the reverse process to close a LUKS device.  Unmount any logical volumes "
"on it, deactivate the volume groups by caling C<guestfs_vg_activate (g, 0, "
"[\"/dev/VG\"])>.  Then close the mapper device by calling "
"L</guestfs_luks_close> on the C</dev/mapper/mapname> device (I<not> the "
"underlying encrypted block device)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:490
msgid "INSPECTION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:492
msgid ""
"Libguestfs has APIs for inspecting an unknown disk image to find out if it "
"contains operating systems.  (These APIs used to be in a separate Perl-only "
"library called L<Sys::Guestfs::Lib(3)> but since version 1.5.3 the most "
"frequently used part of this library has been rewritten in C and moved into "
"the core code)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:498
msgid ""
"Add all disks belonging to the unknown virtual machine and call "
"L</guestfs_launch> in the usual way."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:501
msgid ""
"Then call L</guestfs_inspect_os>.  This function uses other libguestfs calls "
"and certain heuristics, and returns a list of operating systems that were "
"found.  An empty list means none were found.  A single element is the root "
"filesystem of the operating system.  For dual- or multi-boot guests, "
"multiple roots can be returned, each one corresponding to a separate "
"operating system.  (Multi-boot virtual machines are extremely rare in the "
"world of virtualization, but since this scenario can happen, we have built "
"libguestfs to deal with it.)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:510
msgid ""
"For each root, you can then call various C<guestfs_inspect_get_*> functions "
"to get additional details about that operating system.  For example, call "
"L</guestfs_inspect_get_type> to return the string C<windows> or C<linux> for "
"Windows and Linux-based operating systems respectively."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:516
msgid ""
"Un*x-like and Linux-based operating systems usually consist of several "
"filesystems which are mounted at boot time (for example, a separate boot "
"partition mounted on C</boot>).  The inspection rules are able to detect how "
"filesystems correspond to mount points.  Call "
"C<guestfs_inspect_get_mountpoints> to get this mapping.  It might return a "
"hash table like this example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:523
#, no-wrap
msgid ""
" /boot => /dev/sda1\n"
" /     => /dev/vg_guest/lv_root\n"
" /usr  => /dev/vg_guest/lv_usr\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:527
msgid ""
"The caller can then make calls to L</guestfs_mount_options> to mount the "
"filesystems as suggested."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:530
msgid ""
"Be careful to mount filesystems in the right order (eg. C</> before "
"C</usr>).  Sorting the keys of the hash by length, shortest first, should "
"work."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:534
msgid ""
"Inspection currently only works for some common operating systems.  "
"Contributors are welcome to send patches for other operating systems that we "
"currently cannot detect."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:538
msgid ""
"Encrypted disks must be opened before inspection.  See L</ENCRYPTED DISKS> "
"for more details.  The L</guestfs_inspect_os> function just ignores any "
"encrypted devices."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:542
msgid ""
"A note on the implementation: The call L</guestfs_inspect_os> performs "
"inspection and caches the results in the guest handle.  Subsequent calls to "
"C<guestfs_inspect_get_*> return this cached information, but I<do not> "
"re-read the disks.  If you change the content of the guest disks, you can "
"redo inspection by calling L</guestfs_inspect_os> again."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:549
msgid "SPECIAL CONSIDERATIONS FOR WINDOWS GUESTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:551
msgid ""
"Libguestfs can mount NTFS partitions.  It does this using the "
"L<http://www.ntfs-3g.org/> driver."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:554
msgid ""
"DOS and Windows still use drive letters, and the filesystems are always "
"treated as case insensitive by Windows itself, and therefore you might find "
"a Windows configuration file referring to a path like "
"C<c:\\windows\\system32>.  When the filesystem is mounted in libguestfs, "
"that directory might be referred to as C</WINDOWS/System32>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:560
msgid ""
"Drive letter mappings are outside the scope of libguestfs.  You have to use "
"libguestfs to read the appropriate Windows Registry and configuration files, "
"to determine yourself how drives are mapped (see also L<hivex(3)> and "
"L<virt-inspector(1)>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:565
msgid ""
"Replacing backslash characters with forward slash characters is also outside "
"the scope of libguestfs, but something that you can easily do."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:568
msgid ""
"Where we can help is in resolving the case insensitivity of paths.  For "
"this, call L</guestfs_case_sensitive_path>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:571
msgid ""
"Libguestfs also provides some help for decoding Windows Registry \"hive\" "
"files, through the library C<hivex> which is part of the libguestfs project "
"although ships as a separate tarball.  You have to locate and download the "
"hive file(s) yourself, and then pass them to C<hivex> functions.  See also "
"the programs L<hivexml(1)>, L<hivexsh(1)>, L<hivexregedit(1)> and "
"L<virt-win-reg(1)> for more help on this issue."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:579
msgid "USING LIBGUESTFS WITH OTHER PROGRAMMING LANGUAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:581
msgid ""
"Although we don't want to discourage you from using the C API, we will "
"mention here that the same API is also available in other languages."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:584
msgid ""
"The API is broadly identical in all supported languages.  This means that "
"the C call C<guestfs_mount(g,path)> is C<$g-E<gt>mount($path)> in Perl, "
"C<g.mount(path)> in Python, and C<Guestfs.mount g path> in OCaml.  In other "
"words, a straightforward, predictable isomorphism between each language."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:590
msgid ""
"Error messages are automatically transformed into exceptions if the language "
"supports it."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:593
msgid ""
"We don't try to \"object orientify\" parts of the API in OO languages, "
"although contributors are welcome to write higher level APIs above what we "
"provide in their favourite languages if they wish."
msgstr ""

# type: =item
#: ../src/guestfs.pod:599
msgid "B<C++>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:601
msgid ""
"You can use the I<guestfs.h> header file from C++ programs.  The C++ API is "
"identical to the C API.  C++ classes and exceptions are not used."
msgstr ""

# type: =item
#: ../src/guestfs.pod:605
msgid "B<C#>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:607
msgid ""
"The C# bindings are highly experimental.  Please read the warnings at the "
"top of C<csharp/Libguestfs.cs>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:610
msgid "B<Haskell>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:612
msgid ""
"This is the only language binding that is working but incomplete.  Only "
"calls which return simple integers have been bound in Haskell, and we are "
"looking for help to complete this binding."
msgstr ""

# type: =item
#: ../src/guestfs.pod:616
msgid "B<Java>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:618
msgid ""
"Full documentation is contained in the Javadoc which is distributed with "
"libguestfs."
msgstr ""

# type: =item
#: ../src/guestfs.pod:621
msgid "B<OCaml>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:623
msgid "For documentation see the file C<guestfs.mli>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:625
msgid "B<Perl>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:627
msgid "For documentation see L<Sys::Guestfs(3)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:629
msgid "B<PHP>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:631
msgid ""
"For documentation see C<README-PHP> supplied with libguestfs sources or in "
"the php-libguestfs package for your distribution."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:634
msgid "The PHP binding only works correctly on 64 bit machines."
msgstr ""

# type: =item
#: ../src/guestfs.pod:636
msgid "B<Python>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:638
msgid "For documentation do:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:640
#, no-wrap
msgid ""
" $ python\n"
" >>> import guestfs\n"
" >>> help (guestfs)\n"
"\n"
msgstr ""

# type: =item
#: ../src/guestfs.pod:644
msgid "B<Ruby>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:646
msgid ""
"Use the Guestfs module.  There is no Ruby-specific documentation, but you "
"can find examples written in Ruby in the libguestfs source."
msgstr ""

# type: =item
#: ../src/guestfs.pod:649
msgid "B<shell scripts>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:651
msgid "For documentation see L<guestfish(1)>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:655
msgid "LIBGUESTFS GOTCHAS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:657
msgid ""
"L<http://en.wikipedia.org/wiki/Gotcha_(programming)>: \"A feature of a "
"system [...] that works in the way it is documented but is counterintuitive "
"and almost invites mistakes.\""
msgstr ""

# type: textblock
#: ../src/guestfs.pod:661
msgid ""
"Since we developed libguestfs and the associated tools, there are several "
"things we would have designed differently, but are now stuck with for "
"backwards compatibility or other reasons.  If there is ever a libguestfs 2.0 "
"release, you can expect these to change.  Beware of them."
msgstr ""

# type: =item
#: ../src/guestfs.pod:669
msgid "Autosync / forgetting to sync."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:671
msgid ""
"When modifying a filesystem from C or another language, you B<must> unmount "
"all filesystems and call L</guestfs_sync> explicitly before you close the "
"libguestfs handle.  You can also call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:675
#, no-wrap
msgid ""
" guestfs_set_autosync (g, 1);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:677
msgid ""
"to have the unmount/sync done automatically for you when the handle 'g' is "
"closed.  (This feature is called \"autosync\", L</guestfs_set_autosync> "
"q.v.)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:681
msgid ""
"If you forget to do this, then it is entirely possible that your changes "
"won't be written out, or will be partially written, or (very rarely) that "
"you'll get disk corruption."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:685
msgid ""
"Note that in L<guestfish(3)> autosync is the default.  So quick and dirty "
"guestfish scripts that forget to sync will work just fine, which can make "
"this very puzzling if you are trying to debug a problem."
msgstr ""

# type: =item
#: ../src/guestfs.pod:689
msgid "Mount option C<-o sync> should not be the default."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:691
msgid ""
"If you use L</guestfs_mount>, then C<-o sync,noatime> are added implicitly.  "
"However C<-o sync> does not add any reliability benefit, but does have a "
"very large performance impact."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:695
msgid ""
"The work around is to use L</guestfs_mount_options> and set the mount "
"options that you actually want to use."
msgstr ""

# type: =item
#: ../src/guestfs.pod:698
msgid "Read-only should be the default."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:700
msgid ""
"In L<guestfish(3)>, I<--ro> should be the default, and you should have to "
"specify I<--rw> if you want to make changes to the image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:703
msgid "This would reduce the potential to corrupt live VM images."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:705
msgid ""
"Note that many filesystems change the disk when you just mount and unmount, "
"even if you didn't perform any writes.  You need to use "
"L</guestfs_add_drive_ro> to guarantee that the disk is not changed."
msgstr ""

# type: =item
#: ../src/guestfs.pod:709
msgid "guestfish command line is hard to use."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:711
msgid ""
"C<guestfish disk.img> doesn't do what people expect (open C<disk.img> for "
"examination).  It tries to run a guestfish command C<disk.img> which doesn't "
"exist, so it fails.  In earlier versions of guestfish the error message was "
"also unintuitive, but we have corrected this since.  Like the Bourne shell, "
"we should have used C<guestfish -c command> to run commands."
msgstr ""

# type: =item
#: ../src/guestfs.pod:718
msgid "guestfish megabyte modifiers don't work right on all commands"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:720
msgid ""
"In recent guestfish you can use C<1M> to mean 1 megabyte (and similarly for "
"other modifiers).  What guestfish actually does is to multiply the number "
"part by the modifier part and pass the result to the C API.  However this "
"doesn't work for a few APIs which aren't expecting bytes, but are already "
"expecting some other unit (eg. megabytes)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:727
msgid "The most common is L</guestfs_lvcreate>.  The guestfish command:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:729
#, no-wrap
msgid ""
" lvcreate LV VG 100M\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:731
msgid ""
"does not do what you might expect.  Instead because L</guestfs_lvcreate> is "
"already expecting megabytes, this tries to create a 100 I<terabyte> (100 "
"megabytes * megabytes) logical volume.  The error message you get from this "
"is also a little obscure."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:736
msgid ""
"This could be fixed in the generator by specially marking parameters and "
"return values which take bytes or other units."
msgstr ""

# type: =item
#: ../src/guestfs.pod:739
msgid "Library should return errno with error messages."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:741
msgid ""
"It would be a nice-to-have to be able to get the original value of 'errno' "
"from inside the appliance along error paths (where set).  Currently "
"L<guestmount(1)> goes through hoops to try to reverse the error message "
"string into an errno, see the function error() in fuse/guestmount.c."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:747
msgid ""
"In libguestfs 1.5.4, the protocol was changed so that the Linux errno is "
"sent back from the daemon."
msgstr ""

# type: =item
#: ../src/guestfs.pod:750
msgid "Ambiguity between devices and paths"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:752
msgid ""
"There is a subtle ambiguity in the API between a device name "
"(eg. C</dev/sdb2>) and a similar pathname.  A file might just happen to be "
"called C<sdb2> in the directory C</dev> (consider some non-Unix VM image)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:757
msgid ""
"In the current API we usually resolve this ambiguity by having two separate "
"calls, for example L</guestfs_checksum> and L</guestfs_checksum_device>.  "
"Some API calls are ambiguous and (incorrectly) resolve the problem by "
"detecting if the path supplied begins with C</dev/>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:763
msgid ""
"To avoid both the ambiguity and the need to duplicate some calls, we could "
"make paths/devices into structured names.  One way to do this would be to "
"use a notation like grub (C<hd(0,0)>), although nobody really likes this "
"aspect of grub.  Another way would be to use a structured type, equivalent "
"to this OCaml type:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:769
#, no-wrap
msgid ""
" type path = Path of string | Device of int | Partition of int * int\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:771
msgid "which would allow you to pass arguments like:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:773
#, no-wrap
msgid ""
" Path \"/foo/bar\"\n"
" Device 1            (* /dev/sdb, or perhaps /dev/sda *)\n"
" Partition (1, 2)    (* /dev/sdb2 (or is it /dev/sda2 or /dev/sdb3?) *)\n"
" Path \"/dev/sdb2\"    (* not a device *)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:778
msgid ""
"As you can see there are still problems to resolve even with this "
"representation.  Also consider how it might work in guestfish."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:783
msgid "PROTOCOL LIMITS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:785
msgid ""
"Internally libguestfs uses a message-based protocol to pass API calls and "
"their responses to and from a small \"appliance\" (see L</INTERNALS> for "
"plenty more detail about this).  The maximum message size used by the "
"protocol is slightly less than 4 MB.  For some API calls you may need to be "
"aware of this limit.  The API calls which may be affected are individually "
"documented, with a link back to this section of the documentation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:793
msgid ""
"A simple call such as L</guestfs_cat> returns its result (the file data) in "
"a simple string.  Because this string is at some point internally encoded as "
"a message, the maximum size that it can return is slightly under 4 MB.  If "
"the requested file is larger than this then you will get an error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:799
msgid ""
"In order to transfer large files into and out of the guest filesystem, you "
"need to use particular calls that support this.  The sections L</UPLOADING> "
"and L</DOWNLOADING> document how to do this."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:803
msgid ""
"You might also consider mounting the disk image using our FUSE filesystem "
"support (L<guestmount(1)>)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:806
msgid "KEYS AND PASSPHRASES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:808
msgid ""
"Certain libguestfs calls take a parameter that contains sensitive key "
"material, passed in as a C string."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:811
msgid ""
"In the future we would hope to change the libguestfs implementation so that "
"keys are L<mlock(2)>-ed into physical RAM, and thus can never end up in "
"swap.  However this is I<not> done at the moment, because of the complexity "
"of such an implementation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:816
msgid ""
"Therefore you should be aware that any key parameter you pass to libguestfs "
"might end up being written out to the swap partition.  If this is a concern, "
"scrub the swap partition or don't use libguestfs on encrypted devices."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:821
msgid "CONNECTION MANAGEMENT"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:823
msgid "guestfs_h *"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:825
msgid ""
"C<guestfs_h> is the opaque type representing a connection handle.  Create a "
"handle by calling L</guestfs_create>.  Call L</guestfs_close> to free the "
"handle and release all resources used."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:829
msgid ""
"For information on using multiple handles and threads, see the section "
"L</MULTIPLE HANDLES AND MULTIPLE THREADS> below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:832
msgid "guestfs_create"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:834
#, no-wrap
msgid ""
" guestfs_h *guestfs_create (void);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:836
msgid "Create a connection handle."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:838
msgid "You have to call L</guestfs_add_drive> on the handle at least once."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:840
msgid ""
"This function returns a non-NULL pointer to a handle on success or NULL on "
"error."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:843
msgid "After configuring the handle, you have to call L</guestfs_launch>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:845
msgid ""
"You may also want to configure error handling for the handle.  See L</ERROR "
"HANDLING> section below."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:848
msgid "guestfs_close"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:850
#, no-wrap
msgid ""
" void guestfs_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:852
msgid "This closes the connection handle and frees up all resources used."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:854
msgid "ERROR HANDLING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:856
msgid ""
"The convention in all functions that return C<int> is that they return C<-1> "
"to indicate an error.  You can get additional information on errors by "
"calling L</guestfs_last_error> and/or by setting up an error handler with "
"L</guestfs_set_error_handler>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:861
msgid "The default error handler prints the information string to C<stderr>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:863
msgid ""
"Out of memory errors are handled differently.  The default action is to call "
"L<abort(3)>.  If this is undesirable, then you can set a handler using "
"L</guestfs_set_out_of_memory_handler>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:867
msgid "guestfs_last_error"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:869
#, no-wrap
msgid ""
" const char *guestfs_last_error (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:871
msgid ""
"This returns the last error message that happened on C<g>.  If there has not "
"been an error since the handle was created, then this returns C<NULL>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:875
msgid ""
"The lifetime of the returned string is until the next error occurs, or "
"L</guestfs_close> is called."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:878
msgid ""
"The error string is not localized (ie. is always in English), because this "
"makes searching for error messages in search engines give the largest number "
"of results."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:882
msgid "guestfs_set_error_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:884
#, no-wrap
msgid ""
" typedef void (*guestfs_error_handler_cb) (guestfs_h *g,\n"
"                                           void *opaque,\n"
"                                           const char *msg);\n"
" void guestfs_set_error_handler (guestfs_h *g,\n"
"                                 guestfs_error_handler_cb cb,\n"
"                                 void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:891
msgid ""
"The callback C<cb> will be called if there is an error.  The parameters "
"passed to the callback are an opaque data pointer and the error message "
"string."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:895
msgid ""
"Note that the message string C<msg> is freed as soon as the callback "
"function returns, so if you want to stash it somewhere you must make your "
"own copy."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:899
msgid "The default handler prints messages on C<stderr>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:901
msgid "If you set C<cb> to C<NULL> then I<no> handler is called."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:903
msgid "guestfs_get_error_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:905
#, no-wrap
msgid ""
" guestfs_error_handler_cb guestfs_get_error_handler (guestfs_h *g,\n"
"                                                     void **opaque_rtn);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:908
msgid "Returns the current error handler callback."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:910
msgid "guestfs_set_out_of_memory_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:912
#, no-wrap
msgid ""
" typedef void (*guestfs_abort_cb) (void);\n"
" int guestfs_set_out_of_memory_handler (guestfs_h *g,\n"
"                                        guestfs_abort_cb);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:916
msgid ""
"The callback C<cb> will be called if there is an out of memory situation.  "
"I<Note this callback must not return>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:919
msgid "The default is to call L<abort(3)>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:921
msgid "You cannot set C<cb> to C<NULL>.  You can't ignore out of memory situations."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:924
msgid "guestfs_get_out_of_memory_handler"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:926
#, no-wrap
msgid ""
" guestfs_abort_fn guestfs_get_out_of_memory_handler (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:928
msgid "This returns the current out of memory handler."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:930
msgid "PATH"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:932
msgid ""
"Libguestfs needs a kernel and initrd.img, which it finds by looking along an "
"internal path."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:935
msgid ""
"By default it looks for these in the directory C<$libdir/guestfs> "
"(eg. C</usr/local/lib/guestfs> or C</usr/lib64/guestfs>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:938
msgid ""
"Use L</guestfs_set_path> or set the environment variable L</LIBGUESTFS_PATH> "
"to change the directories that libguestfs will search in.  The value is a "
"colon-separated list of paths.  The current directory is I<not> searched "
"unless the path contains an empty element or C<.>.  For example "
"C<LIBGUESTFS_PATH=:/usr/lib/guestfs> would search the current directory and "
"then C</usr/lib/guestfs>."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:945
msgid "HIGH-LEVEL API ACTIONS"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:947
msgid "ABI GUARANTEE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:949
msgid ""
"We guarantee the libguestfs ABI (binary interface), for public, high-level "
"actions as outlined in this section.  Although we will deprecate some "
"actions, for example if they get replaced by newer calls, we will keep the "
"old actions forever.  This allows you the developer to program in confidence "
"against the libguestfs API."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:955 ../fish/guestfish.pod:819
msgid "@ACTIONS@"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:957
msgid "STRUCTURES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:959
msgid "@STRUCTS@"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:961
msgid "AVAILABILITY"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:963
msgid "GROUPS OF FUNCTIONALITY IN THE APPLIANCE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:965
msgid ""
"Using L</guestfs_available> you can test availability of the following "
"groups of functions.  This test queries the appliance to see if the "
"appliance you are currently using supports the functionality."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:970
msgid "@AVAILABILITY@"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:972
msgid "GUESTFISH supported COMMAND"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:974
msgid ""
"In L<guestfish(3)> there is a handy interactive command C<supported> which "
"prints out the available groups and whether they are supported by this build "
"of libguestfs.  Note however that you have to do C<run> first."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:979
msgid "SINGLE CALLS AT COMPILE TIME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:981
msgid ""
"Since version 1.5.8, C<E<lt>guestfs.hE<gt>> defines symbols for each C API "
"function, such as:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:984
#, no-wrap
msgid ""
" #define LIBGUESTFS_HAVE_DD 1\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:986
msgid "if L</guestfs_dd> is available."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:988
msgid ""
"Before version 1.5.8, if you needed to test whether a single libguestfs "
"function is available at compile time, we recommended using build tools such "
"as autoconf or cmake.  For example in autotools you could use:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:993
#, no-wrap
msgid ""
" AC_CHECK_LIB([guestfs],[guestfs_create])\n"
" AC_CHECK_FUNCS([guestfs_dd])\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:996
msgid ""
"which would result in C<HAVE_GUESTFS_DD> being either defined or not defined "
"in your program."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:999
msgid "SINGLE CALLS AT RUN TIME"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1001
msgid ""
"Testing at compile time doesn't guarantee that a function really exists in "
"the library.  The reason is that you might be dynamically linked against a "
"previous I<libguestfs.so> (dynamic library)  which doesn't have the call.  "
"This situation unfortunately results in a segmentation fault, which is a "
"shortcoming of the C dynamic linking system itself."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1008
msgid ""
"You can use L<dlopen(3)> to test if a function is available at run time, as "
"in this example program (note that you still need the compile time check as "
"well):"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1012
#, no-wrap
msgid ""
" #include <stdio.h>\n"
" #include <stdlib.h>\n"
" #include <unistd.h>\n"
" #include <dlfcn.h>\n"
" #include <guestfs.h>\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1018
#, no-wrap
msgid ""
" main ()\n"
" {\n"
" #ifdef LIBGUESTFS_HAVE_DD\n"
"   void *dl;\n"
"   int has_function;\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1024
#, no-wrap
msgid ""
"   /* Test if the function guestfs_dd is really available. */\n"
"   dl = dlopen (NULL, RTLD_LAZY);\n"
"   if (!dl) {\n"
"     fprintf (stderr, \"dlopen: %s\\n\", dlerror ());\n"
"     exit (EXIT_FAILURE);\n"
"   }\n"
"   has_function = dlsym (dl, \"guestfs_dd\") != NULL;\n"
"   dlclose (dl);\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1033
#, no-wrap
msgid ""
"   if (!has_function)\n"
"     printf (\"this libguestfs.so does NOT have guestfs_dd function\\n\");\n"
"   else {\n"
"     printf (\"this libguestfs.so has guestfs_dd function\\n\");\n"
"     /* Now it's safe to call\n"
"     guestfs_dd (g, \"foo\", \"bar\");\n"
"     */\n"
"   }\n"
" #else\n"
"   printf (\"guestfs_dd function was not found at compile time\\n\");\n"
" #endif\n"
"  }\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1046
msgid ""
"You may think the above is an awful lot of hassle, and it is.  There are "
"other ways outside of the C linking system to ensure that this kind of "
"incompatibility never arises, such as using package versioning:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1051
#, no-wrap
msgid ""
" Requires: libguestfs >= 1.0.80\n"
"\n"
msgstr ""

# type: =end
#: ../src/guestfs.pod:1053 ../src/guestfs.pod:1058
msgid "html"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1055
msgid ""
"<!-- old anchor for the next section --> <a "
"name=\"state_machine_and_low_level_event_api\"/>"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1060
msgid "ARCHITECTURE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1062
msgid ""
"Internally, libguestfs is implemented by running an appliance (a special "
"type of small virtual machine) using L<qemu(1)>.  Qemu runs as a child "
"process of the main program."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1066
#, no-wrap
msgid ""
"  ___________________\n"
" /                   \\\n"
" | main program      |\n"
" |                   |\n"
" |                   |           child process / appliance\n"
" |                   |           __________________________\n"
" |                   |          / qemu                     \\\n"
" +-------------------+   RPC    |      +-----------------+ |\n"
" | libguestfs     <--------------------> guestfsd        | |\n"
" |                   |          |      +-----------------+ |\n"
" \\___________________/          |      | Linux kernel    | |\n"
"                                |      +--^--------------+ |\n"
"                                \\_________|________________/\n"
"                                          |\n"
"                                   _______v______\n"
"                                  /              \\\n"
"                                  | Device or    |\n"
"                                  | disk image   |\n"
"                                  \\______________/\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1086
msgid ""
"The library, linked to the main program, creates the child process and hence "
"the appliance in the L</guestfs_launch> function."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1089
msgid ""
"Inside the appliance is a Linux kernel and a complete stack of userspace "
"tools (such as LVM and ext2 programs) and a small controlling daemon called "
"L</guestfsd>.  The library talks to L</guestfsd> using remote procedure "
"calls (RPC).  There is a mostly one-to-one correspondence between libguestfs "
"API calls and RPC calls to the daemon.  Lastly the disk image(s) are "
"attached to the qemu process which translates device access by the "
"appliance's Linux kernel into accesses to the image."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1098
msgid ""
"A common misunderstanding is that the appliance \"is\" the virtual machine.  "
"Although the disk image you are attached to might also be used by some "
"virtual machine, libguestfs doesn't know or care about this.  (But you will "
"care if both libguestfs's qemu process and your virtual machine are trying "
"to update the disk image at the same time, since these usually results in "
"massive disk corruption)."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1105
msgid "STATE MACHINE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1107
msgid "libguestfs uses a state machine to model the child process:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1109
#, no-wrap
msgid ""
"                         |\n"
"                    guestfs_create\n"
"                         |\n"
"                         |\n"
"                     ____V_____\n"
"                    /          \\\n"
"                    |  CONFIG  |\n"
"                    \\__________/\n"
"                     ^ ^   ^  \\\n"
"                    /  |    \\  \\ guestfs_launch\n"
"                   /   |    _\\__V______\n"
"                  /    |   /           \\\n"
"                 /     |   | LAUNCHING |\n"
"                /      |   \\___________/\n"
"               /       |       /\n"
"              /        |  guestfs_launch\n"
"             /         |     /\n"
"    ______  /        __|____V\n"
"   /      \\ ------> /        \\\n"
"   | BUSY |         | READY  |\n"
"   \\______/ <------ \\________/\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1131
msgid ""
"The normal transitions are (1) CONFIG (when the handle is created, but there "
"is no child process), (2) LAUNCHING (when the child process is booting up), "
"(3) alternating between READY and BUSY as commands are issued to, and "
"carried out by, the child process."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1136
msgid ""
"The guest may be killed by L</guestfs_kill_subprocess>, or may die "
"asynchronously at any time (eg. due to some internal error), and that causes "
"the state to transition back to CONFIG."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1140
msgid ""
"Configuration commands for qemu such as L</guestfs_add_drive> can only be "
"issued when in the CONFIG state."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1143
msgid ""
"The API offers one call that goes from CONFIG through LAUNCHING to READY.  "
"L</guestfs_launch> blocks until the child process is READY to accept "
"commands (or until some failure or timeout).  L</guestfs_launch> internally "
"moves the state from CONFIG to LAUNCHING while it is running."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1149
msgid ""
"API actions such as L</guestfs_mount> can only be issued when in the READY "
"state.  These API calls block waiting for the command to be carried out "
"(ie. the state to transition to BUSY and then back to READY).  There are no "
"non-blocking versions, and no way to issue more than one command per handle "
"at the same time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1155
msgid ""
"Finally, the child process sends asynchronous messages back to the main "
"program, such as kernel log messages.  You can register a callback to "
"receive these messages."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1159
msgid "SETTING CALLBACKS TO HANDLE EVENTS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1161
msgid ""
"The child process generates events in some situations.  Current events "
"include: receiving a log message, the child process exits."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1164
msgid ""
"Use the C<guestfs_set_*_callback> functions to set a callback for different "
"types of events."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1167
msgid ""
"Only I<one callback of each type> can be registered for each handle.  "
"Calling C<guestfs_set_*_callback> again overwrites the previous callback of "
"that type.  Cancel all callbacks of this type by calling this function with "
"C<cb> set to C<NULL>."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1172
msgid "guestfs_set_log_message_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1174
#, no-wrap
msgid ""
" typedef void (*guestfs_log_message_cb) (guestfs_h *g, void *opaque,\n"
"                                         char *buf, int len);\n"
" void guestfs_set_log_message_callback (guestfs_h *g,\n"
"                                        guestfs_log_message_cb cb,\n"
"                                        void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1180
msgid ""
"The callback function C<cb> will be called whenever qemu or the guest writes "
"anything to the console."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1183
msgid "Use this function to capture kernel messages and similar."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1185
msgid ""
"Normally there is no log message handler, and log messages are just "
"discarded."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1188
msgid "guestfs_set_subprocess_quit_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1190
#, no-wrap
msgid ""
" typedef void (*guestfs_subprocess_quit_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_subprocess_quit_callback (guestfs_h *g,\n"
"                                            guestfs_subprocess_quit_cb cb,\n"
"                                            void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1195
msgid ""
"The callback function C<cb> will be called when the child process quits, "
"either asynchronously or if killed by L</guestfs_kill_subprocess>.  (This "
"corresponds to a transition from any state to the CONFIG state)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1200
msgid "guestfs_set_launch_done_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1202
#, no-wrap
msgid ""
" typedef void (*guestfs_launch_done_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_launch_done_callback (guestfs_h *g,\n"
"                                        guestfs_launch_done_cb cb,\n"
"                                        void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1207
msgid ""
"The callback function C<cb> will be called when the child process becomes "
"ready first time after it has been launched.  (This corresponds to a "
"transition from LAUNCHING to the READY state)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1211
msgid "guestfs_set_close_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1213
#, no-wrap
msgid ""
" typedef void (*guestfs_close_cb) (guestfs_h *g, void *opaque);\n"
" void guestfs_set_close_callback (guestfs_h *g,\n"
"                                  guestfs_close_cb cb,\n"
"                                  void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1218
msgid ""
"The callback function C<cb> will be called while the handle is being closed "
"(synchronously from L</guestfs_close>)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1221
msgid ""
"Note that libguestfs installs an L<atexit(3)> handler to try to clean up "
"handles that are open when the program exits.  This means that this callback "
"might be called indirectly from L<exit(3)>, which can cause unexpected "
"problems in higher-level languages (eg. if your HLL interpreter has already "
"been cleaned up by the time this is called, and if your callback then jumps "
"into some HLL function)."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1229
msgid "guestfs_set_progress_callback"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1231
#, no-wrap
msgid ""
" typedef void (*guestfs_progress_cb) (guestfs_h *g, void *opaque,\n"
"                                      int proc_nr, int serial,\n"
"                                      uint64_t position, uint64_t total);\n"
" void guestfs_set_progress_callback (guestfs_h *g,\n"
"                                     guestfs_progress_cb cb,\n"
"                                     void *opaque);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1238
msgid ""
"Some long-running operations can generate progress messages.  If this "
"callback is registered, then it will be called each time a progress message "
"is generated (usually two seconds after the operation started, and three "
"times per second thereafter until it completes, although the frequency may "
"change in future versions)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1244
msgid ""
"The callback receives two numbers: C<position> and C<total>.  The units of "
"C<total> are not defined, although for some operations C<total> may relate "
"in some way to the amount of data to be transferred (eg. in bytes or "
"megabytes), and C<position> may be the portion which has been transferred."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1250
msgid "The only defined and stable parts of the API are:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1256
msgid ""
"The callback can display to the user some type of progress bar or indicator "
"which shows the ratio of C<position>:C<total>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1261
msgid "0 E<lt>= C<position> E<lt>= C<total>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1265
msgid ""
"If any progress notification is sent during a call, then a final progress "
"notification is always sent when C<position> = C<total>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1268
msgid ""
"This is to simplify caller code, so callers can easily set the progress "
"indicator to \"100%\" at the end of the operation, without requiring special "
"code to detect this case."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1274
msgid ""
"The callback also receives the procedure number and serial number of the "
"call.  These are only useful for debugging protocol issues, and the callback "
"can normally ignore them.  The callback may want to print these numbers in "
"error messages or debugging messages."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1279
msgid "PRIVATE DATA AREA"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1281
msgid ""
"You can attach named pieces of private data to the libguestfs handle, and "
"fetch them by name for the lifetime of the handle.  This is called the "
"private data area and is only available from the C API."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1285
msgid "To attach a named piece of data, use the following call:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1287
#, no-wrap
msgid ""
" void guestfs_set_private (guestfs_h *g, const char *key, void *data);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1289
msgid ""
"C<key> is the name to associate with this data, and C<data> is an arbitrary "
"pointer (which can be C<NULL>).  Any previous item with the same name is "
"overwritten."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1293
msgid ""
"You can use any C<key> you want, but names beginning with an underscore "
"character are reserved for internal libguestfs purposes (for implementing "
"language bindings).  It is recommended to prefix the name with some unique "
"string to avoid collisions with other users."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1298
msgid "To retrieve the pointer, use:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1300
#, no-wrap
msgid ""
" void *guestfs_get_private (guestfs_h *g, const char *key);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1302
msgid ""
"This function returns C<NULL> if either no data is found associated with "
"C<key>, or if the user previously set the C<key>'s C<data> pointer to "
"C<NULL>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1306
msgid ""
"Libguestfs does not try to look at or interpret the C<data> pointer in any "
"way.  As far as libguestfs is concerned, it need not be a valid pointer at "
"all.  In particular, libguestfs does I<not> try to free the data when the "
"handle is closed.  If the data must be freed, then the caller must either "
"free it before calling L</guestfs_close> or must set up a close callback to "
"do it (see L</guestfs_set_close_callback>, and note that only one callback "
"can be registered for a handle)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1314
msgid ""
"The private data area is implemented using a hash table, and should be "
"reasonably efficient for moderate numbers of keys."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1317
msgid "BLOCK DEVICE NAMING"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1319
msgid ""
"In the kernel there is now quite a profusion of schemata for naming block "
"devices (in this context, by I<block device> I mean a physical or virtual "
"hard drive).  The original Linux IDE driver used names starting with "
"C</dev/hd*>.  SCSI devices have historically used a different naming scheme, "
"C</dev/sd*>.  When the Linux kernel I<libata> driver became a popular "
"replacement for the old IDE driver (particularly for SATA devices) those "
"devices also used the C</dev/sd*> scheme.  Additionally we now have virtual "
"machines with paravirtualized drivers.  This has created several different "
"naming systems, such as C</dev/vd*> for virtio disks and C</dev/xvd*> for "
"Xen PV disks."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1331
msgid ""
"As discussed above, libguestfs uses a qemu appliance running an embedded "
"Linux kernel to access block devices.  We can run a variety of appliances "
"based on a variety of Linux kernels."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1335
msgid ""
"This causes a problem for libguestfs because many API calls use device or "
"partition names.  Working scripts and the recipe (example) scripts that we "
"make available over the internet could fail if the naming scheme changes."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1340
msgid ""
"Therefore libguestfs defines C</dev/sd*> as the I<standard naming scheme>.  "
"Internally C</dev/sd*> names are translated, if necessary, to other names as "
"required.  For example, under RHEL 5 which uses the C</dev/hd*> scheme, any "
"device parameter C</dev/sda2> is translated to C</dev/hda2> transparently."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1346
msgid ""
"Note that this I<only> applies to parameters.  The L</guestfs_list_devices>, "
"L</guestfs_list_partitions> and similar calls return the true names of the "
"devices and partitions as known to the appliance."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1351
msgid "ALGORITHM FOR BLOCK DEVICE NAME TRANSLATION"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1353
msgid ""
"Usually this translation is transparent.  However in some (very rare)  cases "
"you may need to know the exact algorithm.  Such cases include where you use "
"L</guestfs_config> to add a mixture of virtio and IDE devices to the "
"qemu-based appliance, so have a mixture of C</dev/sd*> and C</dev/vd*> "
"devices."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1359
msgid ""
"The algorithm is applied only to I<parameters> which are known to be either "
"device or partition names.  Return values from functions such as "
"L</guestfs_list_devices> are never changed."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1367
msgid "Is the string a parameter which is a device or partition name?"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1371
msgid "Does the string begin with C</dev/sd>?"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1375
msgid ""
"Does the named device exist? If so, we use that device.  However if I<not> "
"then we continue with this algorithm."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1380
msgid "Replace initial C</dev/sd> string with C</dev/hd>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1382
msgid "For example, change C</dev/sda2> to C</dev/hda2>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1384
msgid "If that named device exists, use it.  If not, continue."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1388
msgid "Replace initial C</dev/sd> string with C</dev/vd>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1390
msgid "If that named device exists, use it.  If not, return an error."
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1394
msgid "PORTABILITY CONCERNS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1396
msgid ""
"Although the standard naming scheme and automatic translation is useful for "
"simple programs and guestfish scripts, for larger programs it is best not to "
"rely on this mechanism."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1400
msgid ""
"Where possible for maximum future portability programs using libguestfs "
"should use these future-proof techniques:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1407
msgid ""
"Use L</guestfs_list_devices> or L</guestfs_list_partitions> to list actual "
"device names, and then use those names directly."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1410
msgid "Since those device names exist by definition, they will never be translated."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1415
msgid ""
"Use higher level ways to identify filesystems, such as LVM names, UUIDs and "
"filesystem labels."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1420
msgid "INTERNALS"
msgstr ""

# type: =head2
#: ../src/guestfs.pod:1422
msgid "COMMUNICATION PROTOCOL"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1424
msgid ""
"Don't rely on using this protocol directly.  This section documents how it "
"currently works, but it may change at any time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1427
msgid ""
"The protocol used to talk between the library and the daemon running inside "
"the qemu virtual machine is a simple RPC mechanism built on top of XDR (RFC "
"1014, RFC 1832, RFC 4506)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1431
msgid ""
"The detailed format of structures is in C<src/guestfs_protocol.x> (note: "
"this file is automatically generated)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1434
msgid ""
"There are two broad cases, ordinary functions that don't have any C<FileIn> "
"and C<FileOut> parameters, which are handled with very simple request/reply "
"messages.  Then there are functions that have any C<FileIn> or C<FileOut> "
"parameters, which use the same request and reply messages, but they may also "
"be followed by files sent using a chunked encoding."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1441
msgid "ORDINARY FUNCTIONS (NO FILEIN/FILEOUT PARAMS)"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1443
msgid "For ordinary functions, the request message is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1445
#, no-wrap
msgid ""
" total length (header + arguments,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_args (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1450
msgid ""
"The total length field allows the daemon to allocate a fixed size buffer "
"into which it slurps the rest of the message.  As a result, the total length "
"is limited to C<GUESTFS_MESSAGE_MAX> bytes (currently 4MB), which means the "
"effective size of any request is limited to somewhere under this size."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1456
msgid ""
"Note also that many functions don't take any arguments, in which case the "
"C<guestfs_I<foo>_args> is completely omitted."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1459
msgid ""
"The header contains the procedure number (C<guestfs_proc>) which is how the "
"receiver knows what type of args structure to expect, or none at all."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1463
msgid "The reply message for ordinary functions is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1465
#, no-wrap
msgid ""
" total length (header + ret,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_ret (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1470
msgid ""
"As above the C<guestfs_I<foo>_ret> structure may be completely omitted for "
"functions that return no formal return values."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1473
msgid "As above the total length of the reply is limited to C<GUESTFS_MESSAGE_MAX>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1476
msgid ""
"In the case of an error, a flag is set in the header, and the reply message "
"is slightly changed:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1479
#, no-wrap
msgid ""
" total length (header + error,\n"
"      but not including the length word itself)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_message_error (encoded as XDR)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1484
msgid ""
"The C<guestfs_message_error> structure contains the error message as a "
"string."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1487
msgid "FUNCTIONS THAT HAVE FILEIN PARAMETERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1489
msgid ""
"A C<FileIn> parameter indicates that we transfer a file I<into> the guest.  "
"The normal request message is sent (see above).  However this is followed by "
"a sequence of file chunks."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1493
#, no-wrap
msgid ""
" total length (header + arguments,\n"
"      but not including the length word itself,\n"
"      and not including the chunks)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_args (encoded as XDR)\n"
" sequence of chunks for FileIn param #0\n"
" sequence of chunks for FileIn param #1 etc.\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1501
msgid "The \"sequence of chunks\" is:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1503
#, no-wrap
msgid ""
" length of chunk (not including length word itself)\n"
" struct guestfs_chunk (encoded as XDR)\n"
" length of chunk\n"
" struct guestfs_chunk (encoded as XDR)\n"
"   ...\n"
" length of chunk\n"
" struct guestfs_chunk (with data.data_len == 0)\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1511
msgid ""
"The final chunk has the C<data_len> field set to zero.  Additionally a flag "
"is set in the final chunk to indicate either successful completion or early "
"cancellation."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1515
msgid ""
"At time of writing there are no functions that have more than one FileIn "
"parameter.  However this is (theoretically) supported, by sending the "
"sequence of chunks for each FileIn parameter one after another (from left to "
"right)."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1520
msgid ""
"Both the library (sender) I<and> the daemon (receiver) may cancel the "
"transfer.  The library does this by sending a chunk with a special flag set "
"to indicate cancellation.  When the daemon sees this, it cancels the whole "
"RPC, does I<not> send any reply, and goes back to reading the next request."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1526
msgid ""
"The daemon may also cancel.  It does this by writing a special word "
"C<GUESTFS_CANCEL_FLAG> to the socket.  The library listens for this during "
"the transfer, and if it gets it, it will cancel the transfer (it sends a "
"cancel chunk).  The special word is chosen so that even if cancellation "
"happens right at the end of the transfer (after the library has finished "
"writing and has started listening for the reply), the \"spurious\" cancel "
"flag will not be confused with the reply message."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1535
msgid ""
"This protocol allows the transfer of arbitrary sized files (no 32 bit "
"limit), and also files where the size is not known in advance (eg. from "
"pipes or sockets).  However the chunks are rather small "
"(C<GUESTFS_MAX_CHUNK_SIZE>), so that neither the library nor the daemon need "
"to keep much in memory."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1541
msgid "FUNCTIONS THAT HAVE FILEOUT PARAMETERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1543
msgid ""
"The protocol for FileOut parameters is exactly the same as for FileIn "
"parameters, but with the roles of daemon and library reversed."
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1546
#, no-wrap
msgid ""
" total length (header + ret,\n"
"      but not including the length word itself,\n"
"      and not including the chunks)\n"
" struct guestfs_message_header (encoded as XDR)\n"
" struct guestfs_<foo>_ret (encoded as XDR)\n"
" sequence of chunks for FileOut param #0\n"
" sequence of chunks for FileOut param #1 etc.\n"
"\n"
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1554
msgid "INITIAL MESSAGE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1556
msgid ""
"When the daemon launches it sends an initial word (C<GUESTFS_LAUNCH_FLAG>) "
"which indicates that the guest and daemon is alive.  This is what "
"L</guestfs_launch> waits for."
msgstr ""

# type: =head3
#: ../src/guestfs.pod:1560
msgid "PROGRESS NOTIFICATION MESSAGES"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1562
msgid ""
"The daemon may send progress notification messages at any time.  These are "
"distinguished by the normal length word being replaced by "
"C<GUESTFS_PROGRESS_FLAG>, followed by a fixed size progress message."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1566
msgid ""
"The library turns them into progress callbacks (see "
"C<guestfs_set_progress_callback>) if there is a callback registered, or "
"discards them if not."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1570
msgid ""
"The daemon self-limits the frequency of progress messages it sends (see "
"C<daemon/proto.c:notify_progress>).  Not all calls generate progress "
"messages."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1574
msgid "MULTIPLE HANDLES AND MULTIPLE THREADS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1576
msgid ""
"All high-level libguestfs actions are synchronous.  If you want to use "
"libguestfs asynchronously then you must create a thread."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1579
msgid ""
"Only use the handle from a single thread.  Either use the handle exclusively "
"from one thread, or provide your own mutex so that two threads cannot issue "
"calls on the same handle at the same time."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1583
msgid ""
"See the graphical program guestfs-browser for one possible architecture for "
"multithreaded programs using libvirt and libguestfs."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1586
msgid "QEMU WRAPPERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1588
msgid ""
"If you want to compile your own qemu, run qemu from a non-standard location, "
"or pass extra arguments to qemu, then you can write a shell-script wrapper "
"around qemu."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1592
msgid ""
"There is one important rule to remember: you I<must C<exec qemu>> as the "
"last command in the shell script (so that qemu replaces the shell and "
"becomes the direct child of the libguestfs-using program).  If you don't do "
"this, then the qemu process won't be cleaned up correctly."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1597
msgid ""
"Here is an example of a wrapper, where I have built my own copy of qemu from "
"source:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1600
#, no-wrap
msgid ""
" #!/bin/sh -\n"
" qemudir=/home/rjones/d/qemu\n"
" exec $qemudir/x86_64-softmmu/qemu-system-x86_64 -L $qemudir/pc-bios "
"\"$@\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1604
msgid ""
"Save this script as C</tmp/qemu.wrapper> (or wherever), C<chmod +x>, and "
"then use it by setting the LIBGUESTFS_QEMU environment variable.  For "
"example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1608
#, no-wrap
msgid ""
" LIBGUESTFS_QEMU=/tmp/qemu.wrapper guestfish\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1610
msgid ""
"Note that libguestfs also calls qemu with the -help and -version options in "
"order to determine features."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1613
msgid "LIBGUESTFS VERSION NUMBERS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1615
msgid ""
"Since April 2010, libguestfs has started to make separate development and "
"stable releases, along with corresponding branches in our git repository.  "
"These separate releases can be identified by version number:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1620
#, no-wrap
msgid ""
"                 even numbers for stable: 1.2.x, 1.4.x, ...\n"
"       .-------- odd numbers for development: 1.3.x, 1.5.x, ...\n"
"       |\n"
"       v\n"
" 1  .  3  .  5\n"
" ^           ^\n"
" |           |\n"
" |           `-------- sub-version\n"
" |\n"
" `------ always '1' because we don't change the ABI\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1631
msgid "Thus \"1.3.5\" is the 5th update to the development branch \"1.3\"."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1633
msgid ""
"As time passes we cherry pick fixes from the development branch and backport "
"those into the stable branch, the effect being that the stable branch should "
"get more stable and less buggy over time.  So the stable releases are ideal "
"for people who don't need new features but would just like the software to "
"work."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1639
msgid "Our criteria for backporting changes are:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1645
msgid ""
"Documentation changes which don't affect any code are backported unless the "
"documentation refers to a future feature which is not in stable."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1651
msgid ""
"Bug fixes which are not controversial, fix obvious problems, and have been "
"well tested are backported."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1656
msgid ""
"Simple rearrangements of code which shouldn't affect how it works get "
"backported.  This is so that the code in the two branches doesn't get too "
"far out of step, allowing us to backport future fixes more easily."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1662
msgid ""
"We I<don't> backport new features, new APIs, new tools etc, except in one "
"exceptional case: the new feature is required in order to implement an "
"important bug fix."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1668
msgid ""
"A new stable branch starts when we think the new features in development are "
"substantial and compelling enough over the current stable branch to warrant "
"it.  When that happens we create new stable and development versions 1.N.0 "
"and 1.(N+1).0 [N is even].  The new dot-oh release won't necessarily be so "
"stable at this point, but by backporting fixes from development, that branch "
"will stabilize over time."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1676 ../fish/guestfish.pod:826 ../test-tool/libguestfs-test-tool.pod:104 ../tools/virt-edit.pl:312 ../tools/virt-rescue.pl:226
msgid "ENVIRONMENT VARIABLES"
msgstr ""

# type: =item
#: ../src/guestfs.pod:1680 ../fish/guestfish.pod:852
msgid "LIBGUESTFS_APPEND"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1682 ../fish/guestfish.pod:854
msgid "Pass additional options to the guest kernel."
msgstr ""

# type: =item
#: ../src/guestfs.pod:1684 ../fish/guestfish.pod:856
msgid "LIBGUESTFS_DEBUG"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1686
msgid ""
"Set C<LIBGUESTFS_DEBUG=1> to enable verbose messages.  This has the same "
"effect as calling C<guestfs_set_verbose (g, 1)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:1689 ../fish/guestfish.pod:861
msgid "LIBGUESTFS_MEMSIZE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1691 ../fish/guestfish.pod:863
msgid "Set the memory allocated to the qemu process, in megabytes.  For example:"
msgstr ""

# type: verbatim
#: ../src/guestfs.pod:1694 ../fish/guestfish.pod:866
#, no-wrap
msgid ""
" LIBGUESTFS_MEMSIZE=700\n"
"\n"
msgstr ""

# type: =item
#: ../src/guestfs.pod:1696 ../fish/guestfish.pod:868
msgid "LIBGUESTFS_PATH"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1698
msgid ""
"Set the path that libguestfs uses to search for kernel and initrd.img.  See "
"the discussion of paths in section PATH above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:1701 ../fish/guestfish.pod:873
msgid "LIBGUESTFS_QEMU"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1703 ../fish/guestfish.pod:875
msgid ""
"Set the default qemu binary that libguestfs uses.  If not set, then the qemu "
"which was found at compile time by the configure script is used."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1707
msgid "See also L</QEMU WRAPPERS> above."
msgstr ""

# type: =item
#: ../src/guestfs.pod:1709 ../fish/guestfish.pod:879
msgid "LIBGUESTFS_TRACE"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1711
msgid ""
"Set C<LIBGUESTFS_TRACE=1> to enable command traces.  This has the same "
"effect as calling C<guestfs_set_trace (g, 1)>."
msgstr ""

# type: =item
#: ../src/guestfs.pod:1714 ../fish/guestfish.pod:888
msgid "TMPDIR"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1716 ../fish/guestfish.pod:890
msgid "Location of temporary directory, defaults to C</tmp>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1718 ../fish/guestfish.pod:892
msgid ""
"If libguestfs was compiled to use the supermin appliance then the real "
"appliance is cached in this directory, shared between all handles belonging "
"to the same EUID.  You can use C<$TMPDIR> to configure another directory to "
"use in case C</tmp> is not large enough."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1726 ../fish/guestfish.pod:950 ../test-tool/libguestfs-test-tool.pod:109 ../fuse/guestmount.pod:178 ../inspector/virt-inspector.pl:853 ../tools/virt-edit.pl:332 ../tools/virt-win-reg.pl:468 ../tools/virt-df.pl:573 ../tools/virt-ls.pl:217 ../tools/virt-resize.pl:1447 ../tools/virt-list-filesystems.pl:198 ../tools/virt-cat.pl:170 ../tools/virt-tar.pl:264 ../tools/virt-rescue.pl:238 ../tools/virt-make-fs.pl:534 ../tools/virt-list-partitions.pl:236
msgid "SEE ALSO"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1728
msgid ""
"L<guestfish(1)>, L<guestmount(1)>, L<virt-cat(1)>, L<virt-df(1)>, "
"L<virt-edit(1)>, L<virt-inspector(1)>, L<virt-list-filesystems(1)>, "
"L<virt-list-partitions(1)>, L<virt-ls(1)>, L<virt-make-fs(1)>, "
"L<virt-rescue(1)>, L<virt-tar(1)>, L<virt-win-reg(1)>, L<qemu(1)>, "
"L<febootstrap(1)>, L<hivex(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1746
msgid ""
"Tools with a similar purpose: L<fdisk(8)>, L<parted(8)>, L<kpartx(8)>, "
"L<lvm(8)>, L<disktype(1)>."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1753 ../tools/virt-win-reg.pl:483 ../tools/virt-make-fs.pl:548
msgid "BUGS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1755
msgid "To get a list of bugs against libguestfs use this link:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1757
msgid "L<https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1759
msgid "To report a new bug against libguestfs use this link:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1761
msgid "L<https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1763
msgid "When reporting a bug, please check:"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1769
msgid "That the bug hasn't been reported already."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1773
msgid "That you are testing a recent version."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1777
msgid "Describe the bug accurately, and give a way to reproduce it."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1781
msgid ""
"Run libguestfs-test-tool and paste the B<complete, unedited> output into the "
"bug report."
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1786 ../fish/guestfish.pod:967 ../test-tool/libguestfs-test-tool.pod:115 ../fuse/guestmount.pod:189 ../inspector/virt-inspector.pl:862
msgid "AUTHORS"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1788 ../fish/guestfish.pod:969 ../test-tool/libguestfs-test-tool.pod:117 ../fuse/guestmount.pod:191
msgid "Richard W.M. Jones (C<rjones at redhat dot com>)"
msgstr ""

# type: =head1
#: ../src/guestfs.pod:1790 ../fish/guestfish.pod:971 ../test-tool/libguestfs-test-tool.pod:119 ../fuse/guestmount.pod:193 ../inspector/virt-inspector.pl:868 ../tools/virt-edit.pl:348 ../tools/virt-win-reg.pl:498 ../tools/virt-df.pl:586 ../tools/virt-ls.pl:232 ../tools/virt-resize.pl:1473 ../tools/virt-list-filesystems.pl:214 ../tools/virt-cat.pl:184 ../tools/virt-tar.pl:279 ../tools/virt-rescue.pl:252 ../tools/virt-make-fs.pl:563 ../tools/virt-list-partitions.pl:251
msgid "COPYRIGHT"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1792 ../fish/guestfish.pod:973
msgid "Copyright (C) 2009-2010 Red Hat Inc.  L<http://libguestfs.org/>"
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1795
msgid ""
"This library is free software; you can redistribute it and/or modify it "
"under the terms of the GNU Lesser General Public License as published by the "
"Free Software Foundation; either version 2 of the License, or (at your "
"option) any later version."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1800
msgid ""
"This library is distributed in the hope that it will be useful, but WITHOUT "
"ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or "
"FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License "
"for more details."
msgstr ""

# type: textblock
#: ../src/guestfs.pod:1805
msgid ""
"You should have received a copy of the GNU Lesser General Public License "
"along with this library; if not, write to the Free Software Foundation, "
"Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1
msgid "guestfs_add_cdrom"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3
#, no-wrap
msgid ""
" int guestfs_add_cdrom (guestfs_h *g,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:6 ../fish/guestfish-actions.pod:7
msgid "This function adds a virtual CD-ROM disk image to the guest."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:8 ../fish/guestfish-actions.pod:9
msgid "This is equivalent to the qemu parameter C<-cdrom filename>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:10 ../src/guestfs-actions.pod:1516 ../fish/guestfish-actions.pod:11 ../fish/guestfish-actions.pod:1211
msgid "Notes:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:16
msgid ""
"This call checks for the existence of C<filename>.  This stops you from "
"specifying other types of drive which are supported by qemu such as C<nbd:> "
"and C<http:> URLs.  To specify those, use the general C<guestfs_config> call "
"instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:23
msgid ""
"If you just want to add an ISO file (often you use this as an efficient way "
"to transfer large files into the guest), then you should probably use "
"C<guestfs_add_drive_ro> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:29 ../src/guestfs-actions.pod:63 ../src/guestfs-actions.pod:92 ../src/guestfs-actions.pod:103 ../src/guestfs-actions.pod:114 ../src/guestfs-actions.pod:124 ../src/guestfs-actions.pod:135 ../src/guestfs-actions.pod:238 ../src/guestfs-actions.pod:255 ../src/guestfs-actions.pod:266 ../src/guestfs-actions.pod:302 ../src/guestfs-actions.pod:324 ../src/guestfs-actions.pod:339 ../src/guestfs-actions.pod:403 ../src/guestfs-actions.pod:430 ../src/guestfs-actions.pod:441 ../src/guestfs-actions.pod:453 ../src/guestfs-actions.pod:534 ../src/guestfs-actions.pod:549 ../src/guestfs-actions.pod:560 ../src/guestfs-actions.pod:571 ../src/guestfs-actions.pod:717 ../src/guestfs-actions.pod:734 ../src/guestfs-actions.pod:749 ../src/guestfs-actions.pod:824 ../src/guestfs-actions.pod:839 ../src/guestfs-actions.pod:855 ../src/guestfs-actions.pod:866 ../src/guestfs-actions.pod:883 ../src/guestfs-actions.pod:916 ../src/guestfs-actions.pod:974 ../src/guestfs-actions.pod:1002 ../src/guestfs-actions.pod:1024 ../src/guestfs-actions.pod:1055 ../src/guestfs-actions.pod:1143 ../src/guestfs-actions.pod:1174 ../src/guestfs-actions.pod:1374 ../src/guestfs-actions.pod:1393 ../src/guestfs-actions.pod:1474 ../src/guestfs-actions.pod:1822 ../src/guestfs-actions.pod:1945 ../src/guestfs-actions.pod:2000 ../src/guestfs-actions.pod:2030 ../src/guestfs-actions.pod:2439 ../src/guestfs-actions.pod:2451 ../src/guestfs-actions.pod:2468 ../src/guestfs-actions.pod:2576 ../src/guestfs-actions.pod:2587 ../src/guestfs-actions.pod:2597 ../src/guestfs-actions.pod:2608 ../src/guestfs-actions.pod:2620 ../src/guestfs-actions.pod:2650 ../src/guestfs-actions.pod:2714 ../src/guestfs-actions.pod:2731 ../src/guestfs-actions.pod:2745 ../src/guestfs-actions.pod:2765 ../src/guestfs-actions.pod:2785 ../src/guestfs-actions.pod:2814 ../src/guestfs-actions.pod:2830 ../src/guestfs-actions.pod:2846 ../src/guestfs-actions.pod:2858 ../src/guestfs-actions.pod:2867 ../src/guestfs-actions.pod:2900 ../src/guestfs-actions.pod:2913 ../src/guestfs-actions.pod:2923 ../src/guestfs-actions.pod:2935 ../src/guestfs-actions.pod:2949 ../src/guestfs-actions.pod:3029 ../src/guestfs-actions.pod:3046 ../src/guestfs-actions.pod:3056 ../src/guestfs-actions.pod:3101 ../src/guestfs-actions.pod:3116 ../src/guestfs-actions.pod:3131 ../src/guestfs-actions.pod:3144 ../src/guestfs-actions.pod:3155 ../src/guestfs-actions.pod:3166 ../src/guestfs-actions.pod:3180 ../src/guestfs-actions.pod:3192 ../src/guestfs-actions.pod:3209 ../src/guestfs-actions.pod:3240 ../src/guestfs-actions.pod:3268 ../src/guestfs-actions.pod:3284 ../src/guestfs-actions.pod:3300 ../src/guestfs-actions.pod:3309 ../src/guestfs-actions.pod:3323 ../src/guestfs-actions.pod:3333 ../src/guestfs-actions.pod:3345 ../src/guestfs-actions.pod:3357 ../src/guestfs-actions.pod:3389 ../src/guestfs-actions.pod:3401 ../src/guestfs-actions.pod:3418 ../src/guestfs-actions.pod:3429 ../src/guestfs-actions.pod:3443 ../src/guestfs-actions.pod:3483 ../src/guestfs-actions.pod:3514 ../src/guestfs-actions.pod:3525 ../src/guestfs-actions.pod:3550 ../src/guestfs-actions.pod:3564 ../src/guestfs-actions.pod:3579 ../src/guestfs-actions.pod:3701 ../src/guestfs-actions.pod:3753 ../src/guestfs-actions.pod:3772 ../src/guestfs-actions.pod:3787 ../src/guestfs-actions.pod:3813 ../src/guestfs-actions.pod:3870 ../src/guestfs-actions.pod:3884 ../src/guestfs-actions.pod:3894 ../src/guestfs-actions.pod:3905 ../src/guestfs-actions.pod:4160 ../src/guestfs-actions.pod:4176 ../src/guestfs-actions.pod:4187 ../src/guestfs-actions.pod:4196 ../src/guestfs-actions.pod:4207 ../src/guestfs-actions.pod:4216 ../src/guestfs-actions.pod:4227 ../src/guestfs-actions.pod:4240 ../src/guestfs-actions.pod:4258 ../src/guestfs-actions.pod:4274 ../src/guestfs-actions.pod:4290 ../src/guestfs-actions.pod:4305 ../src/guestfs-actions.pod:4325 ../src/guestfs-actions.pod:4340 ../src/guestfs-actions.pod:4356 ../src/guestfs-actions.pod:4374 ../src/guestfs-actions.pod:4390 ../src/guestfs-actions.pod:4404 ../src/guestfs-actions.pod:4429 ../src/guestfs-actions.pod:4450 ../src/guestfs-actions.pod:4466 ../src/guestfs-actions.pod:4487 ../src/guestfs-actions.pod:4499 ../src/guestfs-actions.pod:4511 ../src/guestfs-actions.pod:4527 ../src/guestfs-actions.pod:4561 ../src/guestfs-actions.pod:4581 ../src/guestfs-actions.pod:4604 ../src/guestfs-actions.pod:4694 ../src/guestfs-actions.pod:4800 ../src/guestfs-actions.pod:4809 ../src/guestfs-actions.pod:4819 ../src/guestfs-actions.pod:4829 ../src/guestfs-actions.pod:4848 ../src/guestfs-actions.pod:4858 ../src/guestfs-actions.pod:4868 ../src/guestfs-actions.pod:4878 ../src/guestfs-actions.pod:4890 ../src/guestfs-actions.pod:4940 ../src/guestfs-actions.pod:4954 ../src/guestfs-actions.pod:4967 ../src/guestfs-actions.pod:4980 ../src/guestfs-actions.pod:4994 ../src/guestfs-actions.pod:5004 ../src/guestfs-actions.pod:5021 ../src/guestfs-actions.pod:5051 ../src/guestfs-actions.pod:5062 ../src/guestfs-actions.pod:5097 ../src/guestfs-actions.pod:5107 ../src/guestfs-actions.pod:5122 ../src/guestfs-actions.pod:5148 ../src/guestfs-actions.pod:5176 ../src/guestfs-actions.pod:5280 ../src/guestfs-actions.pod:5295 ../src/guestfs-actions.pod:5306 ../src/guestfs-actions.pod:5352 ../src/guestfs-actions.pod:5362 ../src/guestfs-actions.pod:5399 ../src/guestfs-actions.pod:5426 ../src/guestfs-actions.pod:5468 ../src/guestfs-actions.pod:5491 ../src/guestfs-actions.pod:5548 ../src/guestfs-actions.pod:5564 ../src/guestfs-actions.pod:5590
msgid "This function returns 0 on success or -1 on error."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:31
msgid "guestfs_add_drive"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:33
#, no-wrap
msgid ""
" int guestfs_add_drive (guestfs_h *g,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:36 ../fish/guestfish-actions.pod:36
msgid ""
"This function adds a virtual machine disk image C<filename> to the guest.  "
"The first time you call this function, the disk appears as IDE disk 0 "
"(C</dev/sda>) in the guest, the second time as C</dev/sdb>, and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:41 ../fish/guestfish-actions.pod:41
msgid ""
"You don't necessarily need to be root when using libguestfs.  However you "
"obviously do need sufficient permissions to access the filename for whatever "
"operations you want to perform (ie. read access if you just want to read the "
"image or write access if you want to modify the image)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:47 ../fish/guestfish-actions.pod:47
msgid ""
"This is equivalent to the qemu parameter C<-drive "
"file=filename,cache=off,if=...>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:50 ../fish/guestfish-actions.pod:50
msgid ""
"C<cache=off> is omitted in cases where it is not supported by the underlying "
"filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:53 ../src/guestfs-actions.pod:82
msgid ""
"C<if=...> is set at compile time by the configuration option C<./configure "
"--with-drive-if=...>.  In the rare case where you might need to change this "
"at run time, use C<guestfs_add_drive_with_if> or "
"C<guestfs_add_drive_ro_with_if>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:58 ../src/guestfs-actions.pod:87
msgid ""
"Note that this call checks for the existence of C<filename>.  This stops you "
"from specifying other types of drive which are supported by qemu such as "
"C<nbd:> and C<http:> URLs.  To specify those, use the general "
"C<guestfs_config> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:65
msgid "guestfs_add_drive_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:67
#, no-wrap
msgid ""
" int guestfs_add_drive_ro (guestfs_h *g,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:70 ../fish/guestfish-actions.pod:69
msgid "This adds a drive in snapshot mode, making it effectively read-only."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:73 ../fish/guestfish-actions.pod:72
msgid ""
"Note that writes to the device are allowed, and will be seen for the "
"duration of the guestfs handle, but they are written to a temporary file "
"which is discarded as soon as the guestfs handle is closed.  We don't "
"currently have any method to enable changes to be committed, although qemu "
"can support this."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:79 ../fish/guestfish-actions.pod:78
msgid ""
"This is equivalent to the qemu parameter C<-drive "
"file=filename,snapshot=on,if=...>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:94
msgid "guestfs_add_drive_ro_with_if"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:96
#, no-wrap
msgid ""
" int guestfs_add_drive_ro_with_if (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *iface);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:100
msgid ""
"This is the same as C<guestfs_add_drive_ro> but it allows you to specify the "
"QEMU interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:105
msgid "guestfs_add_drive_with_if"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:107
#, no-wrap
msgid ""
" int guestfs_add_drive_with_if (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *iface);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:111
msgid ""
"This is the same as C<guestfs_add_drive> but it allows you to specify the "
"QEMU interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:116
msgid "guestfs_aug_clear"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:118
#, no-wrap
msgid ""
" int guestfs_aug_clear (guestfs_h *g,\n"
"\t\tconst char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:121 ../fish/guestfish-actions.pod:109
msgid ""
"Set the value associated with C<path> to C<NULL>.  This is the same as the "
"L<augtool(1)> C<clear> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:126
msgid "guestfs_aug_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:128
#, no-wrap
msgid ""
" int guestfs_aug_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:130
msgid ""
"Close the current Augeas handle and free up any resources used by it.  After "
"calling this, you have to call C<guestfs_aug_init> again before you can use "
"any other Augeas functions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:137
msgid "guestfs_aug_defnode"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:139
#, no-wrap
msgid ""
" struct guestfs_int_bool *guestfs_aug_defnode (guestfs_h *g,\n"
"\t\tconst char *name,\n"
"\t\tconst char *expr,\n"
"\t\tconst char *val);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:144 ../fish/guestfish-actions.pod:125
msgid "Defines a variable C<name> whose value is the result of evaluating C<expr>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:147
msgid ""
"If C<expr> evaluates to an empty nodeset, a node is created, equivalent to "
"calling C<guestfs_aug_set> C<expr>, C<value>.  C<name> will be the nodeset "
"containing that single node."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:151 ../fish/guestfish-actions.pod:132
msgid ""
"On success this returns a pair containing the number of nodes in the "
"nodeset, and a boolean flag if a node was created."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:155
msgid ""
"This function returns a C<struct guestfs_int_bool *>, or NULL if there was "
"an error.  I<The caller must call C<guestfs_free_int_bool> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:159
msgid "guestfs_aug_defvar"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:161
#, no-wrap
msgid ""
" int guestfs_aug_defvar (guestfs_h *g,\n"
"\t\tconst char *name,\n"
"\t\tconst char *expr);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:165 ../fish/guestfish-actions.pod:140
msgid ""
"Defines an Augeas variable C<name> whose value is the result of evaluating "
"C<expr>.  If C<expr> is NULL, then C<name> is undefined."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:169 ../fish/guestfish-actions.pod:144
msgid ""
"On success this returns the number of nodes in C<expr>, or C<0> if C<expr> "
"evaluates to something which is not a nodeset."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:172 ../src/guestfs-actions.pod:313 ../src/guestfs-actions.pod:467 ../src/guestfs-actions.pod:492 ../src/guestfs-actions.pod:507 ../src/guestfs-actions.pod:523 ../src/guestfs-actions.pod:1041 ../src/guestfs-actions.pod:1356 ../src/guestfs-actions.pod:1538 ../src/guestfs-actions.pod:1619 ../src/guestfs-actions.pod:1650 ../src/guestfs-actions.pod:1693 ../src/guestfs-actions.pod:1710 ../src/guestfs-actions.pod:1935 ../src/guestfs-actions.pod:2147 ../src/guestfs-actions.pod:2165 ../src/guestfs-actions.pod:3503 ../src/guestfs-actions.pod:3610 ../src/guestfs-actions.pod:3964 ../src/guestfs-actions.pod:3987 ../src/guestfs-actions.pod:5086 ../src/guestfs-actions.pod:5436 ../src/guestfs-actions.pod:5446 ../src/guestfs-actions.pod:5456
msgid "On error this function returns -1."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:174
msgid "guestfs_aug_get"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:176
#, no-wrap
msgid ""
" char *guestfs_aug_get (guestfs_h *g,\n"
"\t\tconst char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:179 ../fish/guestfish-actions.pod:151
msgid ""
"Look up the value associated with C<path>.  If C<path> matches exactly one "
"node, the C<value> is returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:182 ../src/guestfs-actions.pod:610 ../src/guestfs-actions.pod:625 ../src/guestfs-actions.pod:682 ../src/guestfs-actions.pod:695 ../src/guestfs-actions.pod:786 ../src/guestfs-actions.pod:899 ../src/guestfs-actions.pod:928 ../src/guestfs-actions.pod:942 ../src/guestfs-actions.pod:958 ../src/guestfs-actions.pod:1069 ../src/guestfs-actions.pod:1233 ../src/guestfs-actions.pod:1342 ../src/guestfs-actions.pod:1487 ../src/guestfs-actions.pod:1501 ../src/guestfs-actions.pod:1577 ../src/guestfs-actions.pod:1595 ../src/guestfs-actions.pod:1729 ../src/guestfs-actions.pod:1868 ../src/guestfs-actions.pod:2049 ../src/guestfs-actions.pod:2099 ../src/guestfs-actions.pod:2215 ../src/guestfs-actions.pod:2250 ../src/guestfs-actions.pod:2565 ../src/guestfs-actions.pod:2986 ../src/guestfs-actions.pod:3082 ../src/guestfs-actions.pod:3625 ../src/guestfs-actions.pod:3801 ../src/guestfs-actions.pod:3942 ../src/guestfs-actions.pod:4103 ../src/guestfs-actions.pod:4146 ../src/guestfs-actions.pod:4622 ../src/guestfs-actions.pod:4635 ../src/guestfs-actions.pod:4649 ../src/guestfs-actions.pod:4670 ../src/guestfs-actions.pod:5229 ../src/guestfs-actions.pod:5245 ../src/guestfs-actions.pod:5260 ../src/guestfs-actions.pod:5408 ../src/guestfs-actions.pod:5638
msgid ""
"This function returns a string, or NULL on error.  I<The caller must free "
"the returned string after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:185
msgid "guestfs_aug_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:187
#, no-wrap
msgid ""
" int guestfs_aug_init (guestfs_h *g,\n"
"\t\tconst char *root,\n"
"\t\tint flags);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:191 ../fish/guestfish-actions.pod:158
msgid ""
"Create a new Augeas handle for editing configuration files.  If there was "
"any previous Augeas handle associated with this guestfs session, then it is "
"closed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:195
msgid "You must call this before using any other C<guestfs_aug_*> commands."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:198 ../fish/guestfish-actions.pod:165
msgid "C<root> is the filesystem root.  C<root> must not be NULL, use C</> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:201 ../fish/guestfish-actions.pod:168
msgid ""
"The flags are the same as the flags defined in E<lt>augeas.hE<gt>, the "
"logical I<or> of the following integers:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:207 ../fish/guestfish-actions.pod:174
msgid "C<AUG_SAVE_BACKUP> = 1"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:209 ../fish/guestfish-actions.pod:176
msgid "Keep the original file with a C<.augsave> extension."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:211 ../fish/guestfish-actions.pod:178
msgid "C<AUG_SAVE_NEWFILE> = 2"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:213 ../fish/guestfish-actions.pod:180
msgid ""
"Save changes into a file with extension C<.augnew>, and do not overwrite "
"original.  Overrides C<AUG_SAVE_BACKUP>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:216 ../fish/guestfish-actions.pod:183
msgid "C<AUG_TYPE_CHECK> = 4"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:218 ../fish/guestfish-actions.pod:185
msgid "Typecheck lenses (can be expensive)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:220 ../fish/guestfish-actions.pod:187
msgid "C<AUG_NO_STDINC> = 8"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:222 ../fish/guestfish-actions.pod:189
msgid "Do not use standard load path for modules."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:224 ../fish/guestfish-actions.pod:191
msgid "C<AUG_SAVE_NOOP> = 16"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:226 ../fish/guestfish-actions.pod:193
msgid "Make save a no-op, just record what would have been changed."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:228 ../fish/guestfish-actions.pod:195
msgid "C<AUG_NO_LOAD> = 32"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:230
msgid "Do not load the tree in C<guestfs_aug_init>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:234
msgid "To close the handle, you can call C<guestfs_aug_close>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:236 ../fish/guestfish-actions.pod:203
msgid "To find out more about Augeas, see L<http://augeas.net/>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:240
msgid "guestfs_aug_insert"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:242
#, no-wrap
msgid ""
" int guestfs_aug_insert (guestfs_h *g,\n"
"\t\tconst char *augpath,\n"
"\t\tconst char *label,\n"
"\t\tint before);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:247 ../fish/guestfish-actions.pod:209
msgid ""
"Create a new sibling C<label> for C<path>, inserting it into the tree before "
"or after C<path> (depending on the boolean flag C<before>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:251 ../fish/guestfish-actions.pod:213
msgid ""
"C<path> must match exactly one existing node in the tree, and C<label> must "
"be a label, ie. not contain C</>, C<*> or end with a bracketed index C<[N]>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:257
msgid "guestfs_aug_load"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:259
#, no-wrap
msgid ""
" int guestfs_aug_load (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:261 ../fish/guestfish-actions.pod:221
msgid "Load files into the tree."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:263 ../fish/guestfish-actions.pod:223
msgid "See C<aug_load> in the Augeas documentation for the full gory details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:268
msgid "guestfs_aug_ls"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:270
#, no-wrap
msgid ""
" char **guestfs_aug_ls (guestfs_h *g,\n"
"\t\tconst char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:273
msgid ""
"This is just a shortcut for listing C<guestfs_aug_match> C<path/*> and "
"sorting the resulting nodes into alphabetical order."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:276 ../src/guestfs-actions.pod:289 ../src/guestfs-actions.pod:417 ../src/guestfs-actions.pod:802 ../src/guestfs-actions.pod:1081 ../src/guestfs-actions.pod:1097 ../src/guestfs-actions.pod:1185 ../src/guestfs-actions.pod:1201 ../src/guestfs-actions.pod:1432 ../src/guestfs-actions.pod:1766 ../src/guestfs-actions.pod:1779 ../src/guestfs-actions.pod:1795 ../src/guestfs-actions.pod:1832 ../src/guestfs-actions.pod:1853 ../src/guestfs-actions.pod:1915 ../src/guestfs-actions.pod:1955 ../src/guestfs-actions.pod:2121 ../src/guestfs-actions.pod:2289 ../src/guestfs-actions.pod:2494 ../src/guestfs-actions.pod:2550 ../src/guestfs-actions.pod:2634 ../src/guestfs-actions.pod:2963 ../src/guestfs-actions.pod:3470 ../src/guestfs-actions.pod:3919 ../src/guestfs-actions.pod:4028 ../src/guestfs-actions.pod:4134 ../src/guestfs-actions.pod:4683 ../src/guestfs-actions.pod:4732 ../src/guestfs-actions.pod:4784 ../src/guestfs-actions.pod:4900 ../src/guestfs-actions.pod:4921 ../src/guestfs-actions.pod:5321 ../src/guestfs-actions.pod:5338 ../src/guestfs-actions.pod:5376 ../src/guestfs-actions.pod:5512 ../src/guestfs-actions.pod:5528 ../src/guestfs-actions.pod:5601 ../src/guestfs-actions.pod:5617 ../src/guestfs-actions.pod:5657 ../src/guestfs-actions.pod:5673
msgid ""
"This function returns a NULL-terminated array of strings (like "
"L<environ(3)>), or NULL if there was an error.  I<The caller must free the "
"strings and the array after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:280
msgid "guestfs_aug_match"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:282
#, no-wrap
msgid ""
" char **guestfs_aug_match (guestfs_h *g,\n"
"\t\tconst char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:285 ../fish/guestfish-actions.pod:237
msgid ""
"Returns a list of paths which match the path expression C<path>.  The "
"returned paths are sufficiently qualified so that they match exactly one "
"node in the current tree."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:293
msgid "guestfs_aug_mv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:295
#, no-wrap
msgid ""
" int guestfs_aug_mv (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:299 ../fish/guestfish-actions.pod:245
msgid ""
"Move the node C<src> to C<dest>.  C<src> must match exactly one node.  "
"C<dest> is overwritten if it exists."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:304
msgid "guestfs_aug_rm"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:306
#, no-wrap
msgid ""
" int guestfs_aug_rm (guestfs_h *g,\n"
"\t\tconst char *augpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:309 ../fish/guestfish-actions.pod:252
msgid "Remove C<path> and all of its children."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:311 ../fish/guestfish-actions.pod:254
msgid "On success this returns the number of entries which were removed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:315
msgid "guestfs_aug_save"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:317
#, no-wrap
msgid ""
" int guestfs_aug_save (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:319 ../fish/guestfish-actions.pod:260
msgid "This writes all pending changes to disk."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:321
msgid ""
"The flags which were passed to C<guestfs_aug_init> affect exactly how files "
"are saved."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:326
msgid "guestfs_aug_set"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:328
#, no-wrap
msgid ""
" int guestfs_aug_set (guestfs_h *g,\n"
"\t\tconst char *augpath,\n"
"\t\tconst char *val);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:332 ../fish/guestfish-actions.pod:269
msgid "Set the value associated with C<path> to C<val>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:334
msgid ""
"In the Augeas API, it is possible to clear a node by setting the value to "
"NULL.  Due to an oversight in the libguestfs API you cannot do that with "
"this call.  Instead you must use the C<guestfs_aug_clear> call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:341
msgid "guestfs_available"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:343
#, no-wrap
msgid ""
" int guestfs_available (guestfs_h *g,\n"
"\t\tchar *const *groups);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:346 ../fish/guestfish-actions.pod:280
msgid ""
"This command is used to check the availability of some groups of "
"functionality in the appliance, which not all builds of the libguestfs "
"appliance will be able to provide."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:350
msgid ""
"The libguestfs groups, and the functions that those groups correspond to, "
"are listed in L<guestfs(3)/AVAILABILITY>.  You can also fetch this list at "
"runtime by calling C<guestfs_available_all_groups>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:355 ../fish/guestfish-actions.pod:289
msgid ""
"The argument C<groups> is a list of group names, eg: C<[\"inotify\", "
"\"augeas\"]> would check for the availability of the Linux inotify functions "
"and Augeas (configuration file editing) functions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:360 ../fish/guestfish-actions.pod:294
msgid "The command returns no error if I<all> requested groups are available."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:362 ../fish/guestfish-actions.pod:296
msgid ""
"It fails with an error if one or more of the requested groups is unavailable "
"in the appliance."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:365 ../fish/guestfish-actions.pod:299
msgid ""
"If an unknown group name is included in the list of groups then an error is "
"always returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:368 ../fish/guestfish-actions.pod:302
msgid "I<Notes:>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:374
msgid "You must call C<guestfs_launch> before calling this function."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:376 ../fish/guestfish-actions.pod:310
msgid ""
"The reason is because we don't know what groups are supported by the "
"appliance/daemon until it is running and can be queried."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:382 ../fish/guestfish-actions.pod:316
msgid ""
"If a group of functions is available, this does not necessarily mean that "
"they will work.  You still have to check for errors when calling individual "
"API functions even if they are available."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:389 ../fish/guestfish-actions.pod:323
msgid ""
"It is usually the job of distro packagers to build complete functionality "
"into the libguestfs appliance.  Upstream libguestfs, if built from source "
"with all requirements satisfied, will support everything."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:396
msgid ""
"This call was added in version C<1.0.80>.  In previous versions of "
"libguestfs all you could do would be to speculatively execute a command to "
"find out if the daemon implemented it.  See also C<guestfs_version>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:405
msgid "guestfs_available_all_groups"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:407
#, no-wrap
msgid ""
" char **guestfs_available_all_groups (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:409
msgid ""
"This command returns a list of all optional groups that this daemon knows "
"about.  Note this returns both supported and unsupported groups.  To find "
"out which ones the daemon can actually support you have to call "
"C<guestfs_available> on each member of the returned list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:415
msgid "See also C<guestfs_available> and L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:421
msgid "guestfs_base64_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:423
#, no-wrap
msgid ""
" int guestfs_base64_in (guestfs_h *g,\n"
"\t\tconst char *base64file,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:427 ../fish/guestfish-actions.pod:353
msgid "This command uploads base64-encoded data from C<base64file> to C<filename>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:432
msgid "guestfs_base64_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:434
#, no-wrap
msgid ""
" int guestfs_base64_out (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *base64file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:438 ../fish/guestfish-actions.pod:362
msgid ""
"This command downloads the contents of C<filename>, writing it out to local "
"file C<base64file> encoded as base64."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:443
msgid "guestfs_blockdev_flushbufs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:445
#, no-wrap
msgid ""
" int guestfs_blockdev_flushbufs (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:448 ../fish/guestfish-actions.pod:371
msgid "This tells the kernel to flush internal buffers associated with C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:451 ../src/guestfs-actions.pod:465 ../src/guestfs-actions.pod:477 ../src/guestfs-actions.pod:490 ../src/guestfs-actions.pod:505 ../src/guestfs-actions.pod:521 ../src/guestfs-actions.pod:532 ../src/guestfs-actions.pod:547 ../src/guestfs-actions.pod:558 ../src/guestfs-actions.pod:569 ../fish/guestfish-actions.pod:374 ../fish/guestfish-actions.pod:385 ../fish/guestfish-actions.pod:394 ../fish/guestfish-actions.pod:404 ../fish/guestfish-actions.pod:416 ../fish/guestfish-actions.pod:429 ../fish/guestfish-actions.pod:437 ../fish/guestfish-actions.pod:448 ../fish/guestfish-actions.pod:456 ../fish/guestfish-actions.pod:464
msgid "This uses the L<blockdev(8)> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:455
msgid "guestfs_blockdev_getbsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:457
#, no-wrap
msgid ""
" int guestfs_blockdev_getbsz (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:460 ../fish/guestfish-actions.pod:380
msgid "This returns the block size of a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:462 ../src/guestfs-actions.pod:544 ../fish/guestfish-actions.pod:382 ../fish/guestfish-actions.pod:445
msgid ""
"(Note this is different from both I<size in blocks> and I<filesystem block "
"size>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:469
msgid "guestfs_blockdev_getro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:471
#, no-wrap
msgid ""
" int guestfs_blockdev_getro (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:474 ../fish/guestfish-actions.pod:391
msgid ""
"Returns a boolean indicating if the block device is read-only (true if "
"read-only, false if not)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:479 ../src/guestfs-actions.pod:1115 ../src/guestfs-actions.pod:1127 ../src/guestfs-actions.pod:1559 ../src/guestfs-actions.pod:1567 ../src/guestfs-actions.pod:1627 ../src/guestfs-actions.pod:1670 ../src/guestfs-actions.pod:1682 ../src/guestfs-actions.pod:1701 ../src/guestfs-actions.pod:1718 ../src/guestfs-actions.pod:2303 ../src/guestfs-actions.pod:2314 ../src/guestfs-actions.pod:2326 ../src/guestfs-actions.pod:2337 ../src/guestfs-actions.pod:2350 ../src/guestfs-actions.pod:2362 ../src/guestfs-actions.pod:2375 ../src/guestfs-actions.pod:2386 ../src/guestfs-actions.pod:2396 ../src/guestfs-actions.pod:2407 ../src/guestfs-actions.pod:2419 ../src/guestfs-actions.pod:2431 ../src/guestfs-actions.pod:3595
msgid "This function returns a C truth value on success or -1 on error."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:481
msgid "guestfs_blockdev_getsize64"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:483
#, no-wrap
msgid ""
" int64_t guestfs_blockdev_getsize64 (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:486 ../fish/guestfish-actions.pod:400
msgid "This returns the size of the device in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:488
msgid "See also C<guestfs_blockdev_getsz>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:494
msgid "guestfs_blockdev_getss"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:496
#, no-wrap
msgid ""
" int guestfs_blockdev_getss (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:499 ../fish/guestfish-actions.pod:410
msgid ""
"This returns the size of sectors on a block device.  Usually 512, but can be "
"larger for modern devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:502
msgid ""
"(Note, this is not the size in sectors, use C<guestfs_blockdev_getsz> for "
"that)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:509
msgid "guestfs_blockdev_getsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:511
#, no-wrap
msgid ""
" int64_t guestfs_blockdev_getsz (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:514 ../fish/guestfish-actions.pod:422
msgid ""
"This returns the size of the device in units of 512-byte sectors (even if "
"the sectorsize isn't 512 bytes ... weird)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:517
msgid ""
"See also C<guestfs_blockdev_getss> for the real sector size of the device, "
"and C<guestfs_blockdev_getsize64> for the more useful I<size in bytes>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:525
msgid "guestfs_blockdev_rereadpt"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:527
#, no-wrap
msgid ""
" int guestfs_blockdev_rereadpt (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:530 ../fish/guestfish-actions.pod:435
msgid "Reread the partition table on C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:536
msgid "guestfs_blockdev_setbsz"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:538
#, no-wrap
msgid ""
" int guestfs_blockdev_setbsz (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint blocksize);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:542 ../fish/guestfish-actions.pod:443
msgid "This sets the block size of a device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:551
msgid "guestfs_blockdev_setro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:553
#, no-wrap
msgid ""
" int guestfs_blockdev_setro (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:556 ../fish/guestfish-actions.pod:454
msgid "Sets the block device named C<device> to read-only."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:562
msgid "guestfs_blockdev_setrw"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:564
#, no-wrap
msgid ""
" int guestfs_blockdev_setrw (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:567 ../fish/guestfish-actions.pod:462
msgid "Sets the block device named C<device> to read-write."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:573
msgid "guestfs_case_sensitive_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:575
#, no-wrap
msgid ""
" char *guestfs_case_sensitive_path (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:578 ../fish/guestfish-actions.pod:470
msgid ""
"This can be used to resolve case insensitive paths on a filesystem which is "
"case sensitive.  The use case is to resolve paths which you have read from "
"Windows configuration files or the Windows Registry, to the true path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:583 ../fish/guestfish-actions.pod:475
msgid ""
"The command handles a peculiarity of the Linux ntfs-3g filesystem driver "
"(and probably others), which is that although the underlying filesystem is "
"case-insensitive, the driver exports the filesystem to Linux as "
"case-sensitive."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:588 ../fish/guestfish-actions.pod:480
msgid ""
"One consequence of this is that special directories such as C<c:\\windows> "
"may appear as C</WINDOWS> or C</windows> (or other things) depending on the "
"precise details of how they were created.  In Windows itself this would not "
"be a problem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:594 ../fish/guestfish-actions.pod:486
msgid ""
"Bug or feature? You decide: "
"L<http://www.tuxera.com/community/ntfs-3g-faq/#posixfilenames1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:597 ../fish/guestfish-actions.pod:489
msgid ""
"This function resolves the true case of each element in the path and returns "
"the case-sensitive path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:600
msgid ""
"Thus C<guestfs_case_sensitive_path> (\"/Windows/System32\")  might return "
"C<\"/WINDOWS/system32\"> (the exact return value would depend on details of "
"how the directories were originally created under Windows)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:605 ../fish/guestfish-actions.pod:497
msgid "I<Note>: This function does not handle drive names, backslashes etc."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:608
msgid "See also C<guestfs_realpath>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:613
msgid "guestfs_cat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:615
#, no-wrap
msgid ""
" char *guestfs_cat (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:618 ../src/guestfs-actions.pod:4018 ../fish/guestfish-actions.pod:506 ../fish/guestfish-actions.pod:3100
msgid "Return the contents of the file named C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:620
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of string).  For "
"those you need to use the C<guestfs_read_file> or C<guestfs_download> "
"functions which have a more complex interface."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:628 ../src/guestfs-actions.pod:789 ../src/guestfs-actions.pod:806 ../src/guestfs-actions.pod:1085 ../src/guestfs-actions.pod:1101 ../src/guestfs-actions.pod:1189 ../src/guestfs-actions.pod:1205 ../src/guestfs-actions.pod:1436 ../src/guestfs-actions.pod:1783 ../src/guestfs-actions.pod:1799 ../src/guestfs-actions.pod:1836 ../src/guestfs-actions.pod:1857 ../src/guestfs-actions.pod:1871 ../src/guestfs-actions.pod:1897 ../src/guestfs-actions.pod:3835 ../src/guestfs-actions.pod:3858 ../src/guestfs-actions.pod:3966 ../src/guestfs-actions.pod:3989 ../src/guestfs-actions.pod:4010 ../src/guestfs-actions.pod:4736 ../src/guestfs-actions.pod:4788 ../src/guestfs-actions.pod:4904 ../src/guestfs-actions.pod:4925 ../src/guestfs-actions.pod:5470 ../src/guestfs-actions.pod:5493 ../src/guestfs-actions.pod:5516 ../src/guestfs-actions.pod:5532 ../src/guestfs-actions.pod:5605 ../src/guestfs-actions.pod:5621 ../src/guestfs-actions.pod:5661 ../src/guestfs-actions.pod:5677 ../fish/guestfish-actions.pod:513 ../fish/guestfish-actions.pod:648 ../fish/guestfish-actions.pod:660 ../fish/guestfish-actions.pod:861 ../fish/guestfish-actions.pod:871 ../fish/guestfish-actions.pod:938 ../fish/guestfish-actions.pod:948 ../fish/guestfish-actions.pod:1143 ../fish/guestfish-actions.pod:1418 ../fish/guestfish-actions.pod:1428 ../fish/guestfish-actions.pod:1456 ../fish/guestfish-actions.pod:1471 ../fish/guestfish-actions.pod:1481 ../fish/guestfish-actions.pod:1500 ../fish/guestfish-actions.pod:2970 ../fish/guestfish-actions.pod:2985 ../fish/guestfish-actions.pod:3061 ../fish/guestfish-actions.pod:3078 ../fish/guestfish-actions.pod:3093 ../fish/guestfish-actions.pod:3676 ../fish/guestfish-actions.pod:3722 ../fish/guestfish-actions.pod:3807 ../fish/guestfish-actions.pod:3822 ../fish/guestfish-actions.pod:4232 ../fish/guestfish-actions.pod:4250 ../fish/guestfish-actions.pod:4267 ../fish/guestfish-actions.pod:4277 ../fish/guestfish-actions.pod:4325 ../fish/guestfish-actions.pod:4335 ../fish/guestfish-actions.pod:4364 ../fish/guestfish-actions.pod:4374
msgid ""
"Because of the message protocol, there is a transfer limit of somewhere "
"between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:631
msgid "guestfs_checksum"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:633
#, no-wrap
msgid ""
" char *guestfs_checksum (guestfs_h *g,\n"
"\t\tconst char *csumtype,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:637 ../fish/guestfish-actions.pod:520
msgid "This call computes the MD5, SHAx or CRC checksum of the file named C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:640 ../fish/guestfish-actions.pod:523
msgid ""
"The type of checksum to compute is given by the C<csumtype> parameter which "
"must have one of the following values:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:645 ../fish/guestfish-actions.pod:528
msgid "C<crc>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:647 ../fish/guestfish-actions.pod:530
msgid ""
"Compute the cyclic redundancy check (CRC) specified by POSIX for the "
"C<cksum> command."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:650 ../fish/guestfish-actions.pod:533
msgid "C<md5>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:652 ../fish/guestfish-actions.pod:535
msgid "Compute the MD5 hash (using the C<md5sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:654 ../fish/guestfish-actions.pod:537
msgid "C<sha1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:656 ../fish/guestfish-actions.pod:539
msgid "Compute the SHA1 hash (using the C<sha1sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:658 ../fish/guestfish-actions.pod:541
msgid "C<sha224>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:660 ../fish/guestfish-actions.pod:543
msgid "Compute the SHA224 hash (using the C<sha224sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:662 ../fish/guestfish-actions.pod:545
msgid "C<sha256>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:664 ../fish/guestfish-actions.pod:547
msgid "Compute the SHA256 hash (using the C<sha256sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:666 ../fish/guestfish-actions.pod:549
msgid "C<sha384>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:668 ../fish/guestfish-actions.pod:551
msgid "Compute the SHA384 hash (using the C<sha384sum> program)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:670 ../fish/guestfish-actions.pod:553
msgid "C<sha512>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:672 ../fish/guestfish-actions.pod:555
msgid "Compute the SHA512 hash (using the C<sha512sum> program)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:676 ../fish/guestfish-actions.pod:559
msgid "The checksum is returned as a printable string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:678
msgid "To get the checksum for a device, use C<guestfs_checksum_device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:680
msgid "To get the checksums for many files, use C<guestfs_checksums_out>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:685
msgid "guestfs_checksum_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:687
#, no-wrap
msgid ""
" char *guestfs_checksum_device (guestfs_h *g,\n"
"\t\tconst char *csumtype,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:691
msgid ""
"This call computes the MD5, SHAx or CRC checksum of the contents of the "
"device named C<device>.  For the types of checksums supported see the "
"C<guestfs_checksum> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:698
msgid "guestfs_checksums_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:700
#, no-wrap
msgid ""
" int guestfs_checksums_out (guestfs_h *g,\n"
"\t\tconst char *csumtype,\n"
"\t\tconst char *directory,\n"
"\t\tconst char *sumsfile);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:705 ../fish/guestfish-actions.pod:577
msgid ""
"This command computes the checksums of all regular files in C<directory> and "
"then emits a list of those checksums to the local output file C<sumsfile>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:709 ../fish/guestfish-actions.pod:581
msgid ""
"This can be used for verifying the integrity of a virtual machine.  However "
"to be properly secure you should pay attention to the output of the checksum "
"command (it uses the ones from GNU coreutils).  In particular when the "
"filename is not printable, coreutils uses a special backslash syntax.  For "
"more information, see the GNU coreutils info file."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:719
msgid "guestfs_chmod"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:721
#, no-wrap
msgid ""
" int guestfs_chmod (guestfs_h *g,\n"
"\t\tint mode,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:725 ../fish/guestfish-actions.pod:595
msgid ""
"Change the mode (permissions) of C<path> to C<mode>.  Only numeric modes are "
"supported."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:728 ../fish/guestfish-actions.pod:598
msgid ""
"I<Note>: When using this command from guestfish, C<mode> by default would be "
"decimal, unless you prefix it with C<0> to get octal, ie. use C<0700> not "
"C<700>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:732 ../src/guestfs-actions.pod:3178 ../src/guestfs-actions.pod:3266 ../src/guestfs-actions.pod:3282 ../src/guestfs-actions.pod:3298 ../fish/guestfish-actions.pod:602 ../fish/guestfish-actions.pod:2475 ../fish/guestfish-actions.pod:2545 ../fish/guestfish-actions.pod:2555 ../fish/guestfish-actions.pod:2565
msgid "The mode actually set is affected by the umask."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:736
msgid "guestfs_chown"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:738
#, no-wrap
msgid ""
" int guestfs_chown (guestfs_h *g,\n"
"\t\tint owner,\n"
"\t\tint group,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:743 ../fish/guestfish-actions.pod:608
msgid "Change the file owner to C<owner> and group to C<group>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:745 ../src/guestfs-actions.pod:2464 ../fish/guestfish-actions.pod:610 ../fish/guestfish-actions.pod:1966
msgid ""
"Only numeric uid and gid are supported.  If you want to use names, you will "
"need to locate and parse the password file yourself (Augeas support makes "
"this relatively easy)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:751
msgid "guestfs_command"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:753
#, no-wrap
msgid ""
" char *guestfs_command (guestfs_h *g,\n"
"\t\tchar *const *arguments);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:756 ../fish/guestfish-actions.pod:618
msgid ""
"This call runs a command from the guest filesystem.  The filesystem must be "
"mounted, and must contain a compatible operating system (ie. something "
"Linux, with the same or compatible processor architecture)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:761
msgid ""
"The single parameter is an argv-style list of arguments.  The first element "
"is the name of the program to run.  Subsequent elements are parameters.  The "
"list must be non-empty (ie. must contain a program name).  Note that the "
"command runs directly, and is I<not> invoked via the shell (see "
"C<guestfs_sh>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:768 ../fish/guestfish-actions.pod:630
msgid "The return value is anything printed to I<stdout> by the command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:771 ../fish/guestfish-actions.pod:633
msgid ""
"If the command returns a non-zero exit status, then this function returns an "
"error message.  The error message string is the content of I<stderr> from "
"the command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:775 ../fish/guestfish-actions.pod:637
msgid ""
"The C<$PATH> environment variable will contain at least C</usr/bin> and "
"C</bin>.  If you require a program from another location, you should provide "
"the full path in the first parameter."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:780 ../fish/guestfish-actions.pod:642
msgid ""
"Shared libraries and data files required by the program must be available on "
"filesystems which are mounted in the correct places.  It is the caller's "
"responsibility to ensure all filesystems that are needed are mounted at the "
"right locations."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:792
msgid "guestfs_command_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:794
#, no-wrap
msgid ""
" char **guestfs_command_lines (guestfs_h *g,\n"
"\t\tchar *const *arguments);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:797
msgid ""
"This is the same as C<guestfs_command>, but splits the result into a list of "
"lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:800
msgid "See also: C<guestfs_sh_lines>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:809
msgid "guestfs_config"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:811
#, no-wrap
msgid ""
" int guestfs_config (guestfs_h *g,\n"
"\t\tconst char *qemuparam,\n"
"\t\tconst char *qemuvalue);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:815 ../fish/guestfish-actions.pod:667
msgid ""
"This can be used to add arbitrary qemu command line parameters of the form "
"C<-param value>.  Actually it's not quite arbitrary - we prevent you from "
"setting some parameters which would interfere with parameters that we use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:820 ../fish/guestfish-actions.pod:672
msgid "The first character of C<param> string must be a C<-> (dash)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:822 ../fish/guestfish-actions.pod:674
msgid "C<value> can be NULL."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:826
msgid "guestfs_copy_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:828
#, no-wrap
msgid ""
" int guestfs_copy_size (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:833 ../fish/guestfish-actions.pod:680
msgid ""
"This command copies exactly C<size> bytes from one source device or file "
"C<src> to another destination device or file C<dest>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:836 ../fish/guestfish-actions.pod:683
msgid ""
"Note this will fail if the source is too short or if the destination is not "
"large enough."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:841 ../src/guestfs-actions.pod:976 ../src/guestfs-actions.pod:1004 ../src/guestfs-actions.pod:1376 ../src/guestfs-actions.pod:1395 ../src/guestfs-actions.pod:5550 ../src/guestfs-actions.pod:5566
msgid ""
"This long-running command can generate progress notification messages so "
"that the caller can display a progress bar or indicator.  To receive these "
"messages, the caller must register a progress callback.  See "
"L<guestfs(3)/guestfs_set_progress_callback>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:846
msgid "guestfs_cp"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:848
#, no-wrap
msgid ""
" int guestfs_cp (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:852 ../fish/guestfish-actions.pod:690
msgid ""
"This copies a file from C<src> to C<dest> where C<dest> is either a "
"destination filename or destination directory."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:857
msgid "guestfs_cp_a"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:859
#, no-wrap
msgid ""
" int guestfs_cp_a (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:863 ../fish/guestfish-actions.pod:697
msgid ""
"This copies a file or directory from C<src> to C<dest> recursively using the "
"C<cp -a> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:868
msgid "guestfs_dd"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:870
#, no-wrap
msgid ""
" int guestfs_dd (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:874 ../fish/guestfish-actions.pod:704
msgid ""
"This command copies from one source device or file C<src> to another "
"destination device or file C<dest>.  Normally you would use this to copy to "
"or from a device or partition, for example to duplicate a filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:879
msgid ""
"If the destination is a device, it must be as large or larger than the "
"source file or device, otherwise the copy will fail.  This command cannot do "
"partial copies (see C<guestfs_copy_size>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:885
msgid "guestfs_debug"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:887
#, no-wrap
msgid ""
" char *guestfs_debug (guestfs_h *g,\n"
"\t\tconst char *subcmd,\n"
"\t\tchar *const *extraargs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:891
msgid ""
"The C<guestfs_debug> command exposes some internals of C<guestfsd> (the "
"guestfs daemon) that runs inside the qemu subprocess."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:895 ../fish/guestfish-actions.pod:721
msgid ""
"There is no comprehensive help for this command.  You have to look at the "
"file C<daemon/debug.c> in the libguestfs source to find out what you can do."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:902
msgid "guestfs_debug_upload"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:904
#, no-wrap
msgid ""
" int guestfs_debug_upload (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *tmpname,\n"
"\t\tint mode);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:909
msgid ""
"The C<guestfs_debug_upload> command uploads a file to the libguestfs "
"appliance."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:912 ../fish/guestfish-actions.pod:732
msgid ""
"There is no comprehensive help for this command.  You have to look at the "
"file C<daemon/debug.c> in the libguestfs source to find out what it is for."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:918
msgid "guestfs_df"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:920
#, no-wrap
msgid ""
" char *guestfs_df (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:922 ../fish/guestfish-actions.pod:742
msgid "This command runs the C<df> command to report disk space used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:924 ../src/guestfs-actions.pod:938 ../fish/guestfish-actions.pod:744 ../fish/guestfish-actions.pod:755
msgid ""
"This command is mostly useful for interactive sessions.  It is I<not> "
"intended that you try to parse the output string.  Use C<statvfs> from "
"programs."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:931
msgid "guestfs_df_h"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:933
#, no-wrap
msgid ""
" char *guestfs_df_h (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:935 ../fish/guestfish-actions.pod:752
msgid ""
"This command runs the C<df -h> command to report disk space used in "
"human-readable format."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:945
msgid "guestfs_dmesg"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:947
#, no-wrap
msgid ""
" char *guestfs_dmesg (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:949 ../fish/guestfish-actions.pod:763
msgid ""
"This returns the kernel messages (C<dmesg> output) from the guest kernel.  "
"This is sometimes useful for extended debugging of problems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:953
msgid ""
"Another way to get the same information is to enable verbose messages with "
"C<guestfs_set_verbose> or by setting the environment variable "
"C<LIBGUESTFS_DEBUG=1> before running the program."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:961
msgid "guestfs_download"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:963
#, no-wrap
msgid ""
" int guestfs_download (guestfs_h *g,\n"
"\t\tconst char *remotefilename,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:967 ../src/guestfs-actions.pod:989 ../fish/guestfish-actions.pod:776 ../fish/guestfish-actions.pod:789
msgid ""
"Download file C<remotefilename> and save it as C<filename> on the local "
"machine."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:970 ../src/guestfs-actions.pod:5118 ../fish/guestfish-actions.pod:779 ../fish/guestfish-actions.pod:3980
msgid "C<filename> can also be a named pipe."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:972
msgid "See also C<guestfs_upload>, C<guestfs_cat>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:981
msgid "guestfs_download_offset"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:983
#, no-wrap
msgid ""
" int guestfs_download_offset (guestfs_h *g,\n"
"\t\tconst char *remotefilename,\n"
"\t\tconst char *filename,\n"
"\t\tint64_t offset,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:992 ../fish/guestfish-actions.pod:792
msgid ""
"C<remotefilename> is read for C<size> bytes starting at C<offset> (this "
"region must be within the file or device)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:995
msgid ""
"Note that there is no limit on the amount of data that can be downloaded "
"with this call, unlike with C<guestfs_pread>, and this call always reads the "
"full amount unless an error occurs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1000
msgid "See also C<guestfs_download>, C<guestfs_pread>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1009
msgid "guestfs_drop_caches"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1011
#, no-wrap
msgid ""
" int guestfs_drop_caches (guestfs_h *g,\n"
"\t\tint whattodrop);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1014 ../fish/guestfish-actions.pod:808
msgid ""
"This instructs the guest kernel to drop its page cache, and/or dentries and "
"inode caches.  The parameter C<whattodrop> tells the kernel what precisely "
"to drop, see L<http://linux-mm.org/Drop_Caches>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1019 ../fish/guestfish-actions.pod:813
msgid "Setting C<whattodrop> to 3 should drop everything."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1021 ../fish/guestfish-actions.pod:815
msgid ""
"This automatically calls L<sync(2)> before the operation, so that the "
"maximum guest memory is freed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1026
msgid "guestfs_du"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1028
#, no-wrap
msgid ""
" int64_t guestfs_du (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1031 ../fish/guestfish-actions.pod:822
msgid ""
"This command runs the C<du -s> command to estimate file space usage for "
"C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1034 ../fish/guestfish-actions.pod:825
msgid ""
"C<path> can be a file or a directory.  If C<path> is a directory then the "
"estimate includes the contents of the directory and all subdirectories "
"(recursively)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1038 ../fish/guestfish-actions.pod:829
msgid "The result is the estimated size in I<kilobytes> (ie. units of 1024 bytes)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1043
msgid "guestfs_e2fsck_f"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1045
#, no-wrap
msgid ""
" int guestfs_e2fsck_f (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1048 ../fish/guestfish-actions.pod:836
msgid ""
"This runs C<e2fsck -p -f device>, ie. runs the ext2/ext3 filesystem checker "
"on C<device>, noninteractively (C<-p>), even if the filesystem appears to be "
"clean (C<-f>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1052
msgid ""
"This command is only needed because of C<guestfs_resize2fs> (q.v.).  "
"Normally you should use C<guestfs_fsck>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1057
msgid "guestfs_echo_daemon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1059
#, no-wrap
msgid ""
" char *guestfs_echo_daemon (guestfs_h *g,\n"
"\t\tchar *const *words);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1062 ../fish/guestfish-actions.pod:847
msgid ""
"This command concatenates the list of C<words> passed with single spaces "
"between them and returns the resulting string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1065 ../fish/guestfish-actions.pod:850
msgid "You can use this command to test the connection through to the daemon."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1067
msgid "See also C<guestfs_ping_daemon>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1072
msgid "guestfs_egrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1074
#, no-wrap
msgid ""
" char **guestfs_egrep (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1078 ../fish/guestfish-actions.pod:858
msgid "This calls the external C<egrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1088
msgid "guestfs_egrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1090
#, no-wrap
msgid ""
" char **guestfs_egrepi (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1094 ../fish/guestfish-actions.pod:868
msgid "This calls the external C<egrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1104
msgid "guestfs_equal"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1106
#, no-wrap
msgid ""
" int guestfs_equal (guestfs_h *g,\n"
"\t\tconst char *file1,\n"
"\t\tconst char *file2);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1110 ../fish/guestfish-actions.pod:878
msgid ""
"This compares the two files C<file1> and C<file2> and returns true if their "
"content is exactly equal, or false otherwise."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1113 ../fish/guestfish-actions.pod:881
msgid "The external L<cmp(1)> program is used for the comparison."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1117
msgid "guestfs_exists"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1119
#, no-wrap
msgid ""
" int guestfs_exists (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1122 ../fish/guestfish-actions.pod:887
msgid ""
"This returns C<true> if and only if there is a file, directory (or anything) "
"with the given C<path> name."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1125
msgid "See also C<guestfs_is_file>, C<guestfs_is_dir>, C<guestfs_stat>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1129
msgid "guestfs_fallocate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1131
#, no-wrap
msgid ""
" int guestfs_fallocate (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint len);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1135 ../src/guestfs-actions.pod:1158 ../fish/guestfish-actions.pod:896 ../fish/guestfish-actions.pod:915
msgid ""
"This command preallocates a file (containing zero bytes) named C<path> of "
"size C<len> bytes.  If the file exists already, it is overwritten."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1139 ../fish/guestfish-actions.pod:900
msgid ""
"Do not confuse this with the guestfish-specific C<alloc> command which "
"allocates a file in the host and attaches it as a device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1145 ../fish/guestfish-actions.pod:904
msgid ""
"This function is deprecated.  In new code, use the C<fallocate64> call "
"instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1148 ../src/guestfs-actions.pod:1583 ../src/guestfs-actions.pod:1601 ../src/guestfs-actions.pod:5499 ../src/guestfs-actions.pod:5644 ../fish/guestfish-actions.pod:907 ../fish/guestfish-actions.pod:1264 ../fish/guestfish-actions.pod:1278 ../fish/guestfish-actions.pod:4256 ../fish/guestfish-actions.pod:4353
msgid ""
"Deprecated functions will not be removed from the API, but the fact that "
"they are deprecated indicates that there are problems with correct use of "
"these functions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1152
msgid "guestfs_fallocate64"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1154
#, no-wrap
msgid ""
" int guestfs_fallocate64 (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint64_t len);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1162
msgid ""
"Note that this call allocates disk blocks for the file.  To create a sparse "
"file use C<guestfs_truncate_size> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1165
msgid ""
"The deprecated call C<guestfs_fallocate> does the same, but owing to an "
"oversight it only allowed 30 bit lengths to be specified, effectively "
"limiting the maximum size of files created through that call to 1GB."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1170 ../fish/guestfish-actions.pod:927
msgid ""
"Do not confuse this with the guestfish-specific C<alloc> and C<sparse> "
"commands which create a file in the host and attach it as a device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1176
msgid "guestfs_fgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1178
#, no-wrap
msgid ""
" char **guestfs_fgrep (guestfs_h *g,\n"
"\t\tconst char *pattern,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1182 ../fish/guestfish-actions.pod:935
msgid "This calls the external C<fgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1192
msgid "guestfs_fgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1194
#, no-wrap
msgid ""
" char **guestfs_fgrepi (guestfs_h *g,\n"
"\t\tconst char *pattern,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1198 ../fish/guestfish-actions.pod:945
msgid "This calls the external C<fgrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1208
msgid "guestfs_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1210
#, no-wrap
msgid ""
" char *guestfs_file (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1213 ../fish/guestfish-actions.pod:955
msgid ""
"This call uses the standard L<file(1)> command to determine the type or "
"contents of the file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1216 ../fish/guestfish-actions.pod:958
msgid ""
"This call will also transparently look inside various types of compressed "
"file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1219 ../fish/guestfish-actions.pod:961
msgid ""
"The exact command which runs is C<file -zb path>.  Note in particular that "
"the filename is not prepended to the output (the C<-b> option)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1223
msgid ""
"This command can also be used on C</dev/> devices (and partitions, LV "
"names).  You can for example use this to determine if a device contains a "
"filesystem, although it's usually better to use C<guestfs_vfs_type>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1228 ../fish/guestfish-actions.pod:970
msgid ""
"If the C<path> does not begin with C</dev/> then this command only works for "
"the content of regular files.  For other file types (directory, symbolic "
"link etc) it will just return the string C<directory> etc."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1236
msgid "guestfs_file_architecture"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1238
#, no-wrap
msgid ""
" char *guestfs_file_architecture (guestfs_h *g,\n"
"\t\tconst char *filename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1241 ../fish/guestfish-actions.pod:979
msgid ""
"This detects the architecture of the binary C<filename>, and returns it if "
"known."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1244 ../fish/guestfish-actions.pod:982
msgid "Currently defined architectures are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1248 ../fish/guestfish-actions.pod:986
msgid "\"i386\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1250 ../fish/guestfish-actions.pod:988
msgid ""
"This string is returned for all 32 bit i386, i486, i586, i686 binaries "
"irrespective of the precise processor requirements of the binary."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1253 ../fish/guestfish-actions.pod:991
msgid "\"x86_64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1255 ../fish/guestfish-actions.pod:993
msgid "64 bit x86-64."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1257 ../fish/guestfish-actions.pod:995
msgid "\"sparc\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1259 ../fish/guestfish-actions.pod:997
msgid "32 bit SPARC."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1261 ../fish/guestfish-actions.pod:999
msgid "\"sparc64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1263 ../fish/guestfish-actions.pod:1001
msgid "64 bit SPARC V9 and above."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1265 ../fish/guestfish-actions.pod:1003
msgid "\"ia64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1267 ../fish/guestfish-actions.pod:1005
msgid "Intel Itanium."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1269 ../fish/guestfish-actions.pod:1007
msgid "\"ppc\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1271 ../fish/guestfish-actions.pod:1009
msgid "32 bit Power PC."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:1273 ../fish/guestfish-actions.pod:1011
msgid "\"ppc64\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1275 ../fish/guestfish-actions.pod:1013
msgid "64 bit Power PC."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1279 ../fish/guestfish-actions.pod:1017
msgid "Libguestfs may return other architecture strings in future."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1281 ../fish/guestfish-actions.pod:1019
msgid "The function works on at least the following types of files:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1287 ../fish/guestfish-actions.pod:1025
msgid "many types of Un*x and Linux binary"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1291 ../fish/guestfish-actions.pod:1029
msgid "many types of Un*x and Linux shared library"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1295 ../fish/guestfish-actions.pod:1033
msgid "Windows Win32 and Win64 binaries"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1299 ../fish/guestfish-actions.pod:1037
msgid "Windows Win32 and Win64 DLLs"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1301 ../fish/guestfish-actions.pod:1039
msgid "Win32 binaries and DLLs return C<i386>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1303 ../fish/guestfish-actions.pod:1041
msgid "Win64 binaries and DLLs return C<x86_64>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1307 ../fish/guestfish-actions.pod:1045
msgid "Linux kernel modules"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1311 ../fish/guestfish-actions.pod:1049
msgid "Linux new-style initrd images"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1315 ../fish/guestfish-actions.pod:1053
msgid "some non-x86 Linux vmlinuz kernels"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1319 ../fish/guestfish-actions.pod:1057
msgid "What it can't do currently:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1325 ../fish/guestfish-actions.pod:1063
msgid "static libraries (libfoo.a)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1329 ../fish/guestfish-actions.pod:1067
msgid "Linux old-style initrd as compressed ext2 filesystem (RHEL 3)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1333 ../fish/guestfish-actions.pod:1071
msgid "x86 Linux vmlinuz kernels"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1335 ../fish/guestfish-actions.pod:1073
msgid ""
"x86 vmlinuz images (bzImage format) consist of a mix of 16-, 32- and "
"compressed code, and are horribly hard to unpack.  If you want to find the "
"architecture of a kernel, use the architecture of the associated initrd or "
"kernel module(s) instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1345
msgid "guestfs_filesize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1347
#, no-wrap
msgid ""
" int64_t guestfs_filesize (guestfs_h *g,\n"
"\t\tconst char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1350 ../fish/guestfish-actions.pod:1084
msgid "This command returns the size of C<file> in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1352
msgid ""
"To get other stats about a file, use C<guestfs_stat>, C<guestfs_lstat>, "
"C<guestfs_is_dir>, C<guestfs_is_file> etc.  To get the size of block "
"devices, use C<guestfs_blockdev_getsize64>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1358
msgid "guestfs_fill"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1360
#, no-wrap
msgid ""
" int guestfs_fill (guestfs_h *g,\n"
"\t\tint c,\n"
"\t\tint len,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1365 ../fish/guestfish-actions.pod:1094
msgid ""
"This command creates a new file called C<path>.  The initial content of the "
"file is C<len> octets of C<c>, where C<c> must be a number in the range "
"C<[0..255]>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1369
msgid ""
"To fill a file with zero bytes (sparsely), it is much more efficient to use "
"C<guestfs_truncate_size>.  To create a file with a pattern of repeating "
"bytes use C<guestfs_fill_pattern>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1381
msgid "guestfs_fill_pattern"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1383
#, no-wrap
msgid ""
" int guestfs_fill_pattern (guestfs_h *g,\n"
"\t\tconst char *pattern,\n"
"\t\tint len,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1388
msgid ""
"This function is like C<guestfs_fill> except that it creates a new file of "
"length C<len> containing the repeating pattern of bytes in C<pattern>.  The "
"pattern is truncated if necessary to ensure the length of the file is "
"exactly C<len> bytes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1400
msgid "guestfs_find"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1402
#, no-wrap
msgid ""
" char **guestfs_find (guestfs_h *g,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1405 ../fish/guestfish-actions.pod:1116
msgid ""
"This command lists out all files and directories, recursively, starting at "
"C<directory>.  It is essentially equivalent to running the shell command "
"C<find directory -print> but some post-processing happens on the output, "
"described below."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1410 ../fish/guestfish-actions.pod:1121
msgid ""
"This returns a list of strings I<without any prefix>.  Thus if the directory "
"structure was:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1413 ../fish/guestfish-actions.pod:1124
#, no-wrap
msgid ""
" /tmp/a\n"
" /tmp/b\n"
" /tmp/c/d\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1417
msgid "then the returned list from C<guestfs_find> C</tmp> would be 4 elements:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1420 ../fish/guestfish-actions.pod:1131
#, no-wrap
msgid ""
" a\n"
" b\n"
" c\n"
" c/d\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1425 ../fish/guestfish-actions.pod:1136
msgid "If C<directory> is not a directory, then this command returns an error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1428 ../fish/guestfish-actions.pod:1139
msgid "The returned list is sorted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1430
msgid "See also C<guestfs_find0>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1439
msgid "guestfs_find0"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1441
#, no-wrap
msgid ""
" int guestfs_find0 (guestfs_h *g,\n"
"\t\tconst char *directory,\n"
"\t\tconst char *files);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1445 ../fish/guestfish-actions.pod:1150
msgid ""
"This command lists out all files and directories, recursively, starting at "
"C<directory>, placing the resulting list in the external file called "
"C<files>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1449
msgid ""
"This command works the same way as C<guestfs_find> with the following "
"exceptions:"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1456 ../fish/guestfish-actions.pod:1161
msgid "The resulting list is written to an external file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1460 ../fish/guestfish-actions.pod:1165
msgid ""
"Items (filenames) in the result are separated by C<\\0> characters.  See "
"L<find(1)> option I<-print0>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1465 ../fish/guestfish-actions.pod:1170
msgid "This command is not limited in the number of names that it can return."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1470 ../fish/guestfish-actions.pod:1175
msgid "The result list is not sorted."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1476
msgid "guestfs_findfs_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1478
#, no-wrap
msgid ""
" char *guestfs_findfs_label (guestfs_h *g,\n"
"\t\tconst char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1481 ../fish/guestfish-actions.pod:1185
msgid ""
"This command searches the filesystems and returns the one which has the "
"given label.  An error is returned if no such filesystem can be found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1485
msgid "To find the label of a filesystem, use C<guestfs_vfs_label>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1490
msgid "guestfs_findfs_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1492
#, no-wrap
msgid ""
" char *guestfs_findfs_uuid (guestfs_h *g,\n"
"\t\tconst char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1495 ../fish/guestfish-actions.pod:1195
msgid ""
"This command searches the filesystems and returns the one which has the "
"given UUID.  An error is returned if no such filesystem can be found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1499
msgid "To find the UUID of a filesystem, use C<guestfs_vfs_uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1504
msgid "guestfs_fsck"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1506
#, no-wrap
msgid ""
" int guestfs_fsck (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1510 ../fish/guestfish-actions.pod:1205
msgid ""
"This runs the filesystem checker (fsck) on C<device> which should have "
"filesystem type C<fstype>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1513 ../fish/guestfish-actions.pod:1208
msgid ""
"The returned integer is the status.  See L<fsck(8)> for the list of status "
"codes from C<fsck>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1522 ../fish/guestfish-actions.pod:1217
msgid "Multiple status codes can be summed together."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1526 ../fish/guestfish-actions.pod:1221
msgid ""
"A non-zero return code can mean \"success\", for example if errors have been "
"corrected on the filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1531 ../fish/guestfish-actions.pod:1226
msgid "Checking or repairing NTFS volumes is not supported (by linux-ntfs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1536 ../fish/guestfish-actions.pod:1231
msgid "This command is entirely equivalent to running C<fsck -a -t fstype device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1540
msgid "guestfs_get_append"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1542
#, no-wrap
msgid ""
" const char *guestfs_get_append (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1544 ../fish/guestfish-actions.pod:1237
msgid ""
"Return the additional kernel options which are added to the guest kernel "
"command line."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1547 ../fish/guestfish-actions.pod:1240
msgid "If C<NULL> then no options are added."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1549
msgid ""
"This function returns a string which may be NULL.  There is no way to return "
"an error from this function.  The string is owned by the guest handle and "
"must I<not> be freed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1553
msgid "guestfs_get_autosync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1555
#, no-wrap
msgid ""
" int guestfs_get_autosync (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1557 ../fish/guestfish-actions.pod:1246
msgid "Get the autosync flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1561
msgid "guestfs_get_direct"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1563
#, no-wrap
msgid ""
" int guestfs_get_direct (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1565 ../fish/guestfish-actions.pod:1252
msgid "Return the direct appliance mode flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1569
msgid "guestfs_get_e2label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1571
#, no-wrap
msgid ""
" char *guestfs_get_e2label (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1574 ../fish/guestfish-actions.pod:1258
msgid "This returns the ext2/3/4 filesystem label of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1580 ../fish/guestfish-actions.pod:1261
msgid ""
"This function is deprecated.  In new code, use the C<vfs_label> call "
"instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1587
msgid "guestfs_get_e2uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1589
#, no-wrap
msgid ""
" char *guestfs_get_e2uuid (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1592 ../fish/guestfish-actions.pod:1272
msgid "This returns the ext2/3/4 filesystem UUID of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1598 ../fish/guestfish-actions.pod:1275
msgid "This function is deprecated.  In new code, use the C<vfs_uuid> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1605
msgid "guestfs_get_memsize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1607
#, no-wrap
msgid ""
" int guestfs_get_memsize (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1609 ../fish/guestfish-actions.pod:1286
msgid "This gets the memory size in megabytes allocated to the qemu subprocess."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1612
msgid ""
"If C<guestfs_set_memsize> was not called on this handle, and if "
"C<LIBGUESTFS_MEMSIZE> was not set, then this returns the compiled-in default "
"value for memsize."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1616 ../src/guestfs-actions.pod:1679 ../src/guestfs-actions.pod:4371 ../src/guestfs-actions.pod:4463 ../fish/guestfish-actions.pod:1293 ../fish/guestfish-actions.pod:1344 ../fish/guestfish-actions.pod:3387 ../fish/guestfish-actions.pod:3474
msgid "For more information on the architecture of libguestfs, see L<guestfs(3)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1621
msgid "guestfs_get_network"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1623
#, no-wrap
msgid ""
" int guestfs_get_network (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1625 ../fish/guestfish-actions.pod:1300
msgid "This returns the enable network flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1629
msgid "guestfs_get_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1631
#, no-wrap
msgid ""
" const char *guestfs_get_path (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1633 ../fish/guestfish-actions.pod:1306
msgid "Return the current search path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1635 ../fish/guestfish-actions.pod:1308
msgid ""
"This is always non-NULL.  If it wasn't set already, then this will return "
"the default path."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1638 ../src/guestfs-actions.pod:1661
msgid ""
"This function returns a string, or NULL on error.  The string is owned by "
"the guest handle and must I<not> be freed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1641
msgid "guestfs_get_pid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1643
#, no-wrap
msgid ""
" int guestfs_get_pid (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1645 ../fish/guestfish-actions.pod:1317
msgid ""
"Return the process ID of the qemu subprocess.  If there is no qemu "
"subprocess, then this will return an error."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1648 ../fish/guestfish-actions.pod:1320
msgid "This is an internal call used for debugging and testing."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1652
msgid "guestfs_get_qemu"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1654
#, no-wrap
msgid ""
" const char *guestfs_get_qemu (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1656 ../fish/guestfish-actions.pod:1326
msgid "Return the current qemu binary."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1658 ../fish/guestfish-actions.pod:1328
msgid ""
"This is always non-NULL.  If it wasn't set already, then this will return "
"the default qemu binary name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1664
msgid "guestfs_get_recovery_proc"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1666
#, no-wrap
msgid ""
" int guestfs_get_recovery_proc (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1668 ../fish/guestfish-actions.pod:1335
msgid "Return the recovery process enabled flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1672
msgid "guestfs_get_selinux"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1674
#, no-wrap
msgid ""
" int guestfs_get_selinux (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1676
msgid ""
"This returns the current setting of the selinux flag which is passed to the "
"appliance at boot time.  See C<guestfs_set_selinux>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1684
msgid "guestfs_get_state"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1686
#, no-wrap
msgid ""
" int guestfs_get_state (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1688 ../fish/guestfish-actions.pod:1351
msgid ""
"This returns the current state as an opaque integer.  This is only useful "
"for printing debug and internal error messages."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1691 ../src/guestfs-actions.pod:2312 ../src/guestfs-actions.pod:2335 ../src/guestfs-actions.pod:2384 ../src/guestfs-actions.pod:2405 ../fish/guestfish-actions.pod:1354 ../fish/guestfish-actions.pod:1848 ../fish/guestfish-actions.pod:1866 ../fish/guestfish-actions.pod:1904 ../fish/guestfish-actions.pod:1920
msgid "For more information on states, see L<guestfs(3)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1695
msgid "guestfs_get_trace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1697
#, no-wrap
msgid ""
" int guestfs_get_trace (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1699 ../fish/guestfish-actions.pod:1360
msgid "Return the command trace flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1703
msgid "guestfs_get_umask"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1705
#, no-wrap
msgid ""
" int guestfs_get_umask (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1707
msgid ""
"Return the current umask.  By default the umask is C<022> unless it has been "
"set by calling C<guestfs_umask>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1712
msgid "guestfs_get_verbose"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1714
#, no-wrap
msgid ""
" int guestfs_get_verbose (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1716 ../fish/guestfish-actions.pod:1373
msgid "This returns the verbose messages flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1720
msgid "guestfs_getcon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1722
#, no-wrap
msgid ""
" char *guestfs_getcon (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1724 ../fish/guestfish-actions.pod:1379
msgid "This gets the SELinux security context of the daemon."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1726
msgid "See the documentation about SELINUX in L<guestfs(3)>, and C<guestfs_setcon>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1732
msgid "guestfs_getxattrs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1734
#, no-wrap
msgid ""
" struct guestfs_xattr_list *guestfs_getxattrs (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1737 ../fish/guestfish-actions.pod:1388
msgid "This call lists the extended attributes of the file or directory C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1740 ../fish/guestfish-actions.pod:1391
msgid ""
"At the system call level, this is a combination of the L<listxattr(2)> and "
"L<getxattr(2)> calls."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1743
msgid "See also: C<guestfs_lgetxattrs>, L<attr(5)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1745 ../src/guestfs-actions.pod:2479 ../src/guestfs-actions.pod:3017
msgid ""
"This function returns a C<struct guestfs_xattr_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_xattr_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1750
msgid "guestfs_glob_expand"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1752
#, no-wrap
msgid ""
" char **guestfs_glob_expand (guestfs_h *g,\n"
"\t\tconst char *pattern);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1755 ../fish/guestfish-actions.pod:1400
msgid ""
"This command searches for all the pathnames matching C<pattern> according to "
"the wildcard expansion rules used by the shell."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1759 ../fish/guestfish-actions.pod:1404
msgid "If no paths match, then this returns an empty list (note: not an error)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1762 ../fish/guestfish-actions.pod:1407
msgid ""
"It is just a wrapper around the C L<glob(3)> function with flags "
"C<GLOB_MARK|GLOB_BRACE>.  See that manual page for more details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1770
msgid "guestfs_grep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1772
#, no-wrap
msgid ""
" char **guestfs_grep (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1776 ../fish/guestfish-actions.pod:1415
msgid "This calls the external C<grep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1786
msgid "guestfs_grepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1788
#, no-wrap
msgid ""
" char **guestfs_grepi (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1792 ../fish/guestfish-actions.pod:1425
msgid "This calls the external C<grep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1802
msgid "guestfs_grub_install"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1804
#, no-wrap
msgid ""
" int guestfs_grub_install (guestfs_h *g,\n"
"\t\tconst char *root,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1808 ../fish/guestfish-actions.pod:1435
msgid ""
"This command installs GRUB (the Grand Unified Bootloader) on C<device>, with "
"the root directory being C<root>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1811 ../fish/guestfish-actions.pod:1438
msgid ""
"Note: If grub-install reports the error \"No suitable drive was found in the "
"generated device map.\" it may be that you need to create a "
"C</boot/grub/device.map> file first that contains the mapping between grub "
"device names and Linux device names.  It is usually sufficient to create a "
"file containing:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1818 ../fish/guestfish-actions.pod:1445
#, no-wrap
msgid ""
" (hd0) /dev/vda\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1820 ../fish/guestfish-actions.pod:1447
msgid "replacing C</dev/vda> with the name of the installation device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1824
msgid "guestfs_head"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1826
#, no-wrap
msgid ""
" char **guestfs_head (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1829 ../fish/guestfish-actions.pod:1453
msgid ""
"This command returns up to the first 10 lines of a file as a list of "
"strings."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1839
msgid "guestfs_head_n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1841
#, no-wrap
msgid ""
" char **guestfs_head_n (guestfs_h *g,\n"
"\t\tint nrlines,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1845 ../fish/guestfish-actions.pod:1463
msgid ""
"If the parameter C<nrlines> is a positive number, this returns the first "
"C<nrlines> lines of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1848 ../fish/guestfish-actions.pod:1466
msgid ""
"If the parameter C<nrlines> is a negative number, this returns lines from "
"the file C<path>, excluding the last C<nrlines> lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1851 ../src/guestfs-actions.pod:4919 ../fish/guestfish-actions.pod:1469 ../fish/guestfish-actions.pod:3820
msgid "If the parameter C<nrlines> is zero, this returns an empty list."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1860
msgid "guestfs_hexdump"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1862
#, no-wrap
msgid ""
" char *guestfs_hexdump (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1865 ../fish/guestfish-actions.pod:1478
msgid ""
"This runs C<hexdump -C> on the given C<path>.  The result is the "
"human-readable, canonical hex dump of the file."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1874
msgid "guestfs_initrd_cat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1876
#, no-wrap
msgid ""
" char *guestfs_initrd_cat (guestfs_h *g,\n"
"\t\tconst char *initrdpath,\n"
"\t\tconst char *filename,\n"
"\t\tsize_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1881 ../fish/guestfish-actions.pod:1488
msgid ""
"This command unpacks the file C<filename> from the initrd file called "
"C<initrdpath>.  The filename must be given I<without> the initial C</> "
"character."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1885 ../fish/guestfish-actions.pod:1492
msgid ""
"For example, in guestfish you could use the following command to examine the "
"boot script (usually called C</init>)  contained in a Linux initrd or "
"initramfs image:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1889 ../fish/guestfish-actions.pod:1496
#, no-wrap
msgid ""
" initrd-cat /boot/initrd-<version>.img init\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1891
msgid "See also C<guestfs_initrd_list>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1893 ../src/guestfs-actions.pod:3831 ../src/guestfs-actions.pod:3854 ../src/guestfs-actions.pod:4006
msgid ""
"This function returns a buffer, or NULL on error.  The size of the returned "
"buffer is written to C<*size_r>.  I<The caller must free the returned buffer "
"after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1900
msgid "guestfs_initrd_list"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1902
#, no-wrap
msgid ""
" char **guestfs_initrd_list (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1905 ../fish/guestfish-actions.pod:1507
msgid "This command lists out files contained in an initrd."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1907 ../fish/guestfish-actions.pod:1509
msgid ""
"The files are listed without any initial C</> character.  The files are "
"listed in the order they appear (not necessarily alphabetical).  Directory "
"names are listed as separate items."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1911 ../fish/guestfish-actions.pod:1513
msgid ""
"Old Linux kernels (2.4 and earlier) used a compressed ext2 filesystem as "
"initrd.  We I<only> support the newer initramfs format (compressed cpio "
"files)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1919
msgid "guestfs_inotify_add_watch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1921
#, no-wrap
msgid ""
" int64_t guestfs_inotify_add_watch (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint mask);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1925 ../fish/guestfish-actions.pod:1521
msgid "Watch C<path> for the events listed in C<mask>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1927 ../fish/guestfish-actions.pod:1523
msgid ""
"Note that if C<path> is a directory then events within that directory are "
"watched, but this does I<not> happen recursively (in subdirectories)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1931 ../fish/guestfish-actions.pod:1527
msgid ""
"Note for non-C or non-Linux callers: the inotify events are defined by the "
"Linux kernel ABI and are listed in C</usr/include/sys/inotify.h>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1937
msgid "guestfs_inotify_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1939
#, no-wrap
msgid ""
" int guestfs_inotify_close (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1941 ../fish/guestfish-actions.pod:1535
msgid ""
"This closes the inotify handle which was previously opened by inotify_init.  "
"It removes all watches, throws away any pending events, and deallocates all "
"resources."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1947
msgid "guestfs_inotify_files"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1949
#, no-wrap
msgid ""
" char **guestfs_inotify_files (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1951
msgid ""
"This function is a helpful wrapper around C<guestfs_inotify_read> which just "
"returns a list of pathnames of objects that were touched.  The returned "
"pathnames are sorted and deduplicated."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:1959
msgid "guestfs_inotify_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:1961
#, no-wrap
msgid ""
" int guestfs_inotify_init (guestfs_h *g,\n"
"\t\tint maxevents);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1964 ../fish/guestfish-actions.pod:1551
msgid ""
"This command creates a new inotify handle.  The inotify subsystem can be "
"used to notify events which happen to objects in the guest filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1968
msgid ""
"C<maxevents> is the maximum number of events which will be queued up between "
"calls to C<guestfs_inotify_read> or C<guestfs_inotify_files>.  If this is "
"passed as C<0>, then the kernel (or previously set)  default is used.  For "
"Linux 2.6.29 the default was 16384 events.  Beyond this limit, the kernel "
"throws away events, but records the fact that it threw them away by setting "
"a flag C<IN_Q_OVERFLOW> in the returned structure list (see "
"C<guestfs_inotify_read>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1978
msgid ""
"Before any events are generated, you have to add some watches to the "
"internal watch list.  See: C<guestfs_inotify_add_watch>, "
"C<guestfs_inotify_rm_watch> and C<guestfs_inotify_watch_all>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1984
msgid ""
"Queued up events should be read periodically by calling "
"C<guestfs_inotify_read> (or C<guestfs_inotify_files> which is just a helpful "
"wrapper around C<guestfs_inotify_read>).  If you don't read the events out "
"often enough then you risk the internal queue overflowing."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1991
msgid ""
"The handle should be closed after use by calling C<guestfs_inotify_close>.  "
"This also removes any watches automatically."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:1995 ../fish/guestfish-actions.pod:1582
msgid ""
"See also L<inotify(7)> for an overview of the inotify interface as exposed "
"by the Linux kernel, which is roughly what we expose via libguestfs.  Note "
"that there is one global inotify handle per libguestfs instance."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2002
msgid "guestfs_inotify_read"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2004
#, no-wrap
msgid ""
" struct guestfs_inotify_event_list *guestfs_inotify_read (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2006 ../fish/guestfish-actions.pod:1591
msgid ""
"Return the complete queue of events that have happened since the previous "
"read call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2009 ../fish/guestfish-actions.pod:1594
msgid "If no events have happened, this returns an empty list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2011 ../fish/guestfish-actions.pod:1596
msgid ""
"I<Note>: In order to make sure that all events have been read, you must call "
"this function repeatedly until it returns an empty list.  The reason is that "
"the call will read events up to the maximum appliance-to-host message size "
"and leave remaining events in the queue."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2017
msgid ""
"This function returns a C<struct guestfs_inotify_event_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_inotify_event_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2022
msgid "guestfs_inotify_rm_watch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2024
#, no-wrap
msgid ""
" int guestfs_inotify_rm_watch (guestfs_h *g,\n"
"\t\tint wd);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2027
msgid ""
"Remove a previously defined inotify watch.  See "
"C<guestfs_inotify_add_watch>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2032
msgid "guestfs_inspect_get_arch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2034
#, no-wrap
msgid ""
" char *guestfs_inspect_get_arch (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2037 ../src/guestfs-actions.pod:2057 ../src/guestfs-actions.pod:2107 ../src/guestfs-actions.pod:2130 ../src/guestfs-actions.pod:2154 ../src/guestfs-actions.pod:2172 ../src/guestfs-actions.pod:2202 ../src/guestfs-actions.pod:2223
msgid ""
"This function should only be called with a root device string as returned by "
"C<guestfs_inspect_os>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2040
msgid ""
"This returns the architecture of the inspected operating system.  The "
"possible return values are listed under C<guestfs_file_architecture>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2044 ../fish/guestfish-actions.pod:1620
msgid ""
"If the architecture could not be determined, then the string C<unknown> is "
"returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2047 ../src/guestfs-actions.pod:2097 ../src/guestfs-actions.pod:2145 ../src/guestfs-actions.pod:2213 ../src/guestfs-actions.pod:2248 ../src/guestfs-actions.pod:2285 ../fish/guestfish-actions.pod:1623 ../fish/guestfish-actions.pod:1669 ../fish/guestfish-actions.pod:1708 ../fish/guestfish-actions.pod:1763 ../fish/guestfish-actions.pod:1794 ../fish/guestfish-actions.pod:1828
msgid "Please read L<guestfs(3)/INSPECTION> for more details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2052
msgid "guestfs_inspect_get_distro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2054
#, no-wrap
msgid ""
" char *guestfs_inspect_get_distro (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2060 ../fish/guestfish-actions.pod:1632
msgid "This returns the distro (distribution) of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2063 ../fish/guestfish-actions.pod:1635
msgid "Currently defined distros are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2067 ../fish/guestfish-actions.pod:1639
msgid "\"debian\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2069 ../fish/guestfish-actions.pod:1641
msgid "Debian or a Debian-derived distro such as Ubuntu."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2071 ../fish/guestfish-actions.pod:1643
msgid "\"fedora\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2073 ../fish/guestfish-actions.pod:1645
msgid "Fedora."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2075 ../fish/guestfish-actions.pod:1647
msgid "\"redhat-based\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2077 ../fish/guestfish-actions.pod:1649
msgid "Some Red Hat-derived distro."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2079 ../fish/guestfish-actions.pod:1651
msgid "\"rhel\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2081 ../fish/guestfish-actions.pod:1653
msgid "Red Hat Enterprise Linux and some derivatives."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2083 ../src/guestfs-actions.pod:2235 ../fish/guestfish-actions.pod:1655 ../fish/guestfish-actions.pod:1781
msgid "\"windows\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2085 ../fish/guestfish-actions.pod:1657
msgid ""
"Windows does not have distributions.  This string is returned if the OS type "
"is Windows."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2088 ../src/guestfs-actions.pod:2239 ../fish/guestfish-actions.pod:1660 ../fish/guestfish-actions.pod:1785
msgid "\"unknown\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2090 ../fish/guestfish-actions.pod:1662
msgid "The distro could not be determined."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2094 ../src/guestfs-actions.pod:2245 ../fish/guestfish-actions.pod:1666 ../fish/guestfish-actions.pod:1791
msgid ""
"Future versions of libguestfs may return other strings here.  The caller "
"should be prepared to handle any string."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2102
msgid "guestfs_inspect_get_filesystems"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2104
#, no-wrap
msgid ""
" char **guestfs_inspect_get_filesystems (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2110 ../fish/guestfish-actions.pod:1678
msgid ""
"This returns a list of all the filesystems that we think are associated with "
"this operating system.  This includes the root filesystem, other ordinary "
"filesystems, and non-mounted devices like swap partitions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2115 ../fish/guestfish-actions.pod:1683
msgid ""
"In the case of a multi-boot virtual machine, it is possible for a filesystem "
"to be shared between operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2118
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_mountpoints>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2125
msgid "guestfs_inspect_get_major_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2127
#, no-wrap
msgid ""
" int guestfs_inspect_get_major_version (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2133 ../fish/guestfish-actions.pod:1696
msgid "This returns the major version number of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2136 ../fish/guestfish-actions.pod:1699
msgid ""
"Windows uses a consistent versioning scheme which is I<not> reflected in the "
"popular public names used by the operating system.  Notably the operating "
"system known as \"Windows 7\" is really version 6.1 (ie. major = 6, minor = "
"1).  You can find out the real versions corresponding to releases of Windows "
"by consulting Wikipedia or MSDN."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2143 ../src/guestfs-actions.pod:2160 ../fish/guestfish-actions.pod:1706 ../fish/guestfish-actions.pod:1720
msgid "If the version could not be determined, then C<0> is returned."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2149
msgid "guestfs_inspect_get_minor_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2151
#, no-wrap
msgid ""
" int guestfs_inspect_get_minor_version (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2157 ../fish/guestfish-actions.pod:1717
msgid "This returns the minor version number of the inspected operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2162
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_major_version>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2167
msgid "guestfs_inspect_get_mountpoints"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2169
#, no-wrap
msgid ""
" char **guestfs_inspect_get_mountpoints (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2175 ../fish/guestfish-actions.pod:1732
msgid ""
"This returns a hash of where we think the filesystems associated with this "
"operating system should be mounted.  Callers should note that this is at "
"best an educated guess made by reading configuration files such as "
"C</etc/fstab>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2180 ../fish/guestfish-actions.pod:1737
msgid ""
"Each element in the returned hashtable has a key which is the path of the "
"mountpoint (eg. C</boot>) and a value which is the filesystem that would be "
"mounted there (eg. C</dev/sda1>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2185 ../fish/guestfish-actions.pod:1742
msgid "Non-mounted devices such as swap devices are I<not> returned in this list."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2188
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"C<guestfs_inspect_get_filesystems>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2191 ../src/guestfs-actions.pod:2531 ../src/guestfs-actions.pod:3453 ../src/guestfs-actions.pod:5036
msgid ""
"This function returns a NULL-terminated array of strings, or NULL if there "
"was an error.  The array of strings will always have length C<2n+1>, where "
"C<n> keys and values alternate, followed by the trailing NULL entry.  I<The "
"caller must free the strings and the array after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2197
msgid "guestfs_inspect_get_product_name"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2199
#, no-wrap
msgid ""
" char *guestfs_inspect_get_product_name (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2205 ../fish/guestfish-actions.pod:1755
msgid ""
"This returns the product name of the inspected operating system.  The "
"product name is generally some freeform string which can be displayed to the "
"user, but should not be parsed by programs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2210 ../fish/guestfish-actions.pod:1760
msgid ""
"If the product name could not be determined, then the string C<unknown> is "
"returned."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2218
msgid "guestfs_inspect_get_type"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2220
#, no-wrap
msgid ""
" char *guestfs_inspect_get_type (guestfs_h *g,\n"
"\t\tconst char *root);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2226 ../fish/guestfish-actions.pod:1772
msgid ""
"This returns the type of the inspected operating system.  Currently defined "
"types are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:2231 ../fish/guestfish-actions.pod:1777
msgid "\"linux\""
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2233 ../fish/guestfish-actions.pod:1779
msgid "Any Linux-based operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2237 ../fish/guestfish-actions.pod:1783
msgid "Any Microsoft Windows operating system."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2241 ../fish/guestfish-actions.pod:1787
msgid "The operating system type could not be determined."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2253
msgid "guestfs_inspect_os"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2255
#, no-wrap
msgid ""
" char **guestfs_inspect_os (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2257 ../fish/guestfish-actions.pod:1800
msgid ""
"This function uses other libguestfs functions and certain heuristics to "
"inspect the disk(s) (usually disks belonging to a virtual machine), looking "
"for operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2261 ../fish/guestfish-actions.pod:1804
msgid "The list returned is empty if no operating systems were found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2263 ../fish/guestfish-actions.pod:1806
msgid ""
"If one operating system was found, then this returns a list with a single "
"element, which is the name of the root filesystem of this operating system.  "
"It is also possible for this function to return a list containing more than "
"one element, indicating a dual-boot or multi-boot virtual machine, with each "
"element being the root filesystem of one of the operating systems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2270
msgid ""
"You can pass the root string(s) returned to other C<guestfs_inspect_get_*> "
"functions in order to query further information about each operating system, "
"such as the name and version."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2275
msgid ""
"This function uses other libguestfs features such as C<guestfs_mount_ro> and "
"C<guestfs_umount_all> in order to mount and unmount filesystems and look at "
"the contents.  This should be called with no disks currently mounted.  The "
"function may also use Augeas, so any existing Augeas handle will be closed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2281 ../fish/guestfish-actions.pod:1824
msgid ""
"This function cannot decrypt encrypted disks.  The caller must do that first "
"(supplying the necessary keys) if the disk is encrypted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2287 ../src/guestfs-actions.pod:2492 ../src/guestfs-actions.pod:2548
msgid "See also C<guestfs_list_filesystems>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2293
msgid "guestfs_is_blockdev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2295
#, no-wrap
msgid ""
" int guestfs_is_blockdev (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2298 ../fish/guestfish-actions.pod:1836
msgid ""
"This returns C<true> if and only if there is a block device with the given "
"C<path> name."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2301 ../src/guestfs-actions.pod:2324 ../src/guestfs-actions.pod:2348 ../src/guestfs-actions.pod:2360 ../src/guestfs-actions.pod:2373 ../src/guestfs-actions.pod:2417 ../src/guestfs-actions.pod:2429
msgid "See also C<guestfs_stat>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2305
msgid "guestfs_is_busy"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2307
#, no-wrap
msgid ""
" int guestfs_is_busy (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2309 ../fish/guestfish-actions.pod:1845
msgid ""
"This returns true iff this handle is busy processing a command (in the "
"C<BUSY> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2316
msgid "guestfs_is_chardev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2318
#, no-wrap
msgid ""
" int guestfs_is_chardev (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2321 ../fish/guestfish-actions.pod:1854
msgid ""
"This returns C<true> if and only if there is a character device with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2328
msgid "guestfs_is_config"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2330
#, no-wrap
msgid ""
" int guestfs_is_config (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2332 ../fish/guestfish-actions.pod:1863
msgid ""
"This returns true iff this handle is being configured (in the C<CONFIG> "
"state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2339
msgid "guestfs_is_dir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2341
#, no-wrap
msgid ""
" int guestfs_is_dir (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2344 ../fish/guestfish-actions.pod:1872
msgid ""
"This returns C<true> if and only if there is a directory with the given "
"C<path> name.  Note that it returns false for other objects like files."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2352
msgid "guestfs_is_fifo"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2354
#, no-wrap
msgid ""
" int guestfs_is_fifo (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2357 ../fish/guestfish-actions.pod:1882
msgid ""
"This returns C<true> if and only if there is a FIFO (named pipe)  with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2364
msgid "guestfs_is_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2366
#, no-wrap
msgid ""
" int guestfs_is_file (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2369 ../fish/guestfish-actions.pod:1891
msgid ""
"This returns C<true> if and only if there is a regular file with the given "
"C<path> name.  Note that it returns false for other objects like "
"directories."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2377
msgid "guestfs_is_launching"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2379
#, no-wrap
msgid ""
" int guestfs_is_launching (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2381 ../fish/guestfish-actions.pod:1901
msgid ""
"This returns true iff this handle is launching the subprocess (in the "
"C<LAUNCHING> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2388
msgid "guestfs_is_lv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2390
#, no-wrap
msgid ""
" int guestfs_is_lv (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2393 ../fish/guestfish-actions.pod:1910
msgid ""
"This command tests whether C<device> is a logical volume, and returns true "
"iff this is the case."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2398
msgid "guestfs_is_ready"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2400
#, no-wrap
msgid ""
" int guestfs_is_ready (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2402 ../fish/guestfish-actions.pod:1917
msgid ""
"This returns true iff this handle is ready to accept commands (in the "
"C<READY> state)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2409
msgid "guestfs_is_socket"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2411
#, no-wrap
msgid ""
" int guestfs_is_socket (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2414 ../fish/guestfish-actions.pod:1926
msgid ""
"This returns C<true> if and only if there is a Unix domain socket with the "
"given C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2421
msgid "guestfs_is_symlink"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2423
#, no-wrap
msgid ""
" int guestfs_is_symlink (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2426 ../fish/guestfish-actions.pod:1935
msgid ""
"This returns C<true> if and only if there is a symbolic link with the given "
"C<path> name."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2433
msgid "guestfs_kill_subprocess"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2435
#, no-wrap
msgid ""
" int guestfs_kill_subprocess (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2437 ../fish/guestfish-actions.pod:1944
msgid "This kills the qemu subprocess.  You should never need to call this."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2441
msgid "guestfs_launch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2443
#, no-wrap
msgid ""
" int guestfs_launch (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2445 ../fish/guestfish-actions.pod:1952
msgid ""
"Internally libguestfs is implemented by running a virtual machine using "
"L<qemu(1)>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2448 ../fish/guestfish-actions.pod:1955
msgid ""
"You should call this after configuring the handle (eg. adding drives) but "
"before performing any actions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2453
msgid "guestfs_lchown"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2455
#, no-wrap
msgid ""
" int guestfs_lchown (guestfs_h *g,\n"
"\t\tint owner,\n"
"\t\tint group,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2460
msgid ""
"Change the file owner to C<owner> and group to C<group>.  This is like "
"C<guestfs_chown> but if C<path> is a symlink then the link itself is "
"changed, not the target."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2470
msgid "guestfs_lgetxattrs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2472
#, no-wrap
msgid ""
" struct guestfs_xattr_list *guestfs_lgetxattrs (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2475
msgid ""
"This is the same as C<guestfs_getxattrs>, but if C<path> is a symbolic link, "
"then it returns the extended attributes of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2484
msgid "guestfs_list_devices"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2486
#, no-wrap
msgid ""
" char **guestfs_list_devices (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2488 ../fish/guestfish-actions.pod:1982
msgid "List all the block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2490 ../fish/guestfish-actions.pod:1984
msgid "The full block device names are returned, eg. C</dev/sda>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2498
msgid "guestfs_list_filesystems"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2500
#, no-wrap
msgid ""
" char **guestfs_list_filesystems (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2502 ../fish/guestfish-actions.pod:1992
msgid ""
"This inspection command looks for filesystems on partitions, block devices "
"and logical volumes, returning a list of devices containing filesystems and "
"their type."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2506 ../fish/guestfish-actions.pod:1996
msgid ""
"The return value is a hash, where the keys are the devices containing "
"filesystems, and the values are the filesystem types.  For example:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2510 ../fish/guestfish-actions.pod:2000
#, no-wrap
msgid ""
" \"/dev/sda1\" => \"ntfs\"\n"
" \"/dev/sda2\" => \"ext2\"\n"
" \"/dev/vg_guest/lv_root\" => \"ext4\"\n"
" \"/dev/vg_guest/lv_swap\" => \"swap\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2515 ../fish/guestfish-actions.pod:2005
msgid ""
"The value can have the special value \"unknown\", meaning the content of the "
"device is undetermined or empty.  \"swap\" means a Linux swap partition."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2519
msgid ""
"This command runs other libguestfs commands, which might include "
"C<guestfs_mount> and C<guestfs_umount>, and therefore you should use this "
"soon after launch and only when nothing is mounted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2523
msgid ""
"Not all of the filesystems returned will be mountable.  In particular, swap "
"partitions are returned in the list.  Also this command does not check that "
"each filesystem found is valid and mountable, and some filesystems might be "
"mountable but require special options.  Filesystems may not all belong to a "
"single logical operating system (use C<guestfs_inspect_os> to look for "
"OSes)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2537
msgid "guestfs_list_partitions"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2539
#, no-wrap
msgid ""
" char **guestfs_list_partitions (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2541 ../fish/guestfish-actions.pod:2025
msgid "List all the partitions detected on all block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2543 ../fish/guestfish-actions.pod:2027
msgid "The full partition device names are returned, eg. C</dev/sda1>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2545
msgid ""
"This does not return logical volumes.  For that you will need to call "
"C<guestfs_lvs>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2554
msgid "guestfs_ll"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2556
#, no-wrap
msgid ""
" char *guestfs_ll (guestfs_h *g,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2559 ../fish/guestfish-actions.pod:2038
msgid ""
"List the files in C<directory> (relative to the root directory, there is no "
"cwd) in the format of 'ls -la'."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2562 ../fish/guestfish-actions.pod:2041
msgid ""
"This command is mostly useful for interactive sessions.  It is I<not> "
"intended that you try to parse the output string."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2568
msgid "guestfs_ln"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2570
#, no-wrap
msgid ""
" int guestfs_ln (guestfs_h *g,\n"
"\t\tconst char *target,\n"
"\t\tconst char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2574 ../fish/guestfish-actions.pod:2048
msgid "This command creates a hard link using the C<ln> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2578
msgid "guestfs_ln_f"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2580
#, no-wrap
msgid ""
" int guestfs_ln_f (guestfs_h *g,\n"
"\t\tconst char *target,\n"
"\t\tconst char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2584 ../fish/guestfish-actions.pod:2054
msgid ""
"This command creates a hard link using the C<ln -f> command.  The C<-f> "
"option removes the link (C<linkname>) if it exists already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2589
msgid "guestfs_ln_s"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2591
#, no-wrap
msgid ""
" int guestfs_ln_s (guestfs_h *g,\n"
"\t\tconst char *target,\n"
"\t\tconst char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2595 ../fish/guestfish-actions.pod:2061
msgid "This command creates a symbolic link using the C<ln -s> command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2599
msgid "guestfs_ln_sf"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2601
#, no-wrap
msgid ""
" int guestfs_ln_sf (guestfs_h *g,\n"
"\t\tconst char *target,\n"
"\t\tconst char *linkname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2605 ../fish/guestfish-actions.pod:2067
msgid ""
"This command creates a symbolic link using the C<ln -sf> command, The C<-f> "
"option removes the link (C<linkname>) if it exists already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2610
msgid "guestfs_lremovexattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2612
#, no-wrap
msgid ""
" int guestfs_lremovexattr (guestfs_h *g,\n"
"\t\tconst char *xattr,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2616
msgid ""
"This is the same as C<guestfs_removexattr>, but if C<path> is a symbolic "
"link, then it removes an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2622
msgid "guestfs_ls"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2624
#, no-wrap
msgid ""
" char **guestfs_ls (guestfs_h *g,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2627 ../fish/guestfish-actions.pod:2082
msgid ""
"List the files in C<directory> (relative to the root directory, there is no "
"cwd).  The '.' and '..' entries are not returned, but hidden files are "
"shown."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2631
msgid ""
"This command is mostly useful for interactive sessions.  Programs should "
"probably use C<guestfs_readdir> instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2638
msgid "guestfs_lsetxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2640
#, no-wrap
msgid ""
" int guestfs_lsetxattr (guestfs_h *g,\n"
"\t\tconst char *xattr,\n"
"\t\tconst char *val,\n"
"\t\tint vallen,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2646
msgid ""
"This is the same as C<guestfs_setxattr>, but if C<path> is a symbolic link, "
"then it sets an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2652
msgid "guestfs_lstat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2654
#, no-wrap
msgid ""
" struct guestfs_stat *guestfs_lstat (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2657 ../src/guestfs-actions.pod:4701 ../fish/guestfish-actions.pod:2101 ../fish/guestfish-actions.pod:3655
msgid "Returns file information for the given C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2659
msgid ""
"This is the same as C<guestfs_stat> except that if C<path> is a symbolic "
"link, then the link is stat-ed, not the file it refers to."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2663 ../fish/guestfish-actions.pod:2107
msgid "This is the same as the C<lstat(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2665 ../src/guestfs-actions.pod:4705
msgid ""
"This function returns a C<struct guestfs_stat *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_stat> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2669
msgid "guestfs_lstatlist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2671
#, no-wrap
msgid ""
" struct guestfs_stat_list *guestfs_lstatlist (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tchar *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2675
msgid ""
"This call allows you to perform the C<guestfs_lstat> operation on multiple "
"files, where all files are in the directory C<path>.  C<names> is the list "
"of files from this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2679 ../fish/guestfish-actions.pod:2117
msgid ""
"On return you get a list of stat structs, with a one-to-one correspondence "
"to the C<names> list.  If any name did not exist or could not be lstat'd, "
"then the C<ino> field of that structure is set to C<-1>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2684
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also C<guestfs_lxattrlist> "
"for a similarly efficient call for getting extended attributes.  Very long "
"directory listings might cause the protocol message size to be exceeded, "
"causing this call to fail.  The caller must split up such requests into "
"smaller groups of names."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2692
msgid ""
"This function returns a C<struct guestfs_stat_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_stat_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2697
msgid "guestfs_luks_add_key"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2699
#, no-wrap
msgid ""
" int guestfs_luks_add_key (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tconst char *newkey,\n"
"\t\tint keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2705 ../fish/guestfish-actions.pod:2134
msgid ""
"This command adds a new key on LUKS device C<device>.  C<key> is any "
"existing key, and is used to access the device.  C<newkey> is the new key to "
"add.  C<keyslot> is the key slot that will be replaced."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2710
msgid ""
"Note that if C<keyslot> already contains a key, then this command will "
"fail.  You have to use C<guestfs_luks_kill_slot> first to remove that key."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2716 ../src/guestfs-actions.pod:2750 ../src/guestfs-actions.pod:2770 ../src/guestfs-actions.pod:2787 ../src/guestfs-actions.pod:2816 ../src/guestfs-actions.pod:2832
msgid ""
"This function takes a key or passphrase parameter which could contain "
"sensitive material.  Read the section L</KEYS AND PASSPHRASES> for more "
"information."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2720
msgid "guestfs_luks_close"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2722
#, no-wrap
msgid ""
" int guestfs_luks_close (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2725
msgid ""
"This closes a LUKS device that was created earlier by C<guestfs_luks_open> "
"or C<guestfs_luks_open_ro>.  The C<device> parameter must be the name of the "
"LUKS mapping device (ie. C</dev/mapper/mapname>) and I<not> the name of the "
"underlying block device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2733
msgid "guestfs_luks_format"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2735
#, no-wrap
msgid ""
" int guestfs_luks_format (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tint keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2740 ../fish/guestfish-actions.pod:2160
msgid ""
"This command erases existing data on C<device> and formats the device as a "
"LUKS encrypted device.  C<key> is the initial key, which is added to key "
"slot C<slot>.  (LUKS supports 8 key slots, numbered 0-7)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2747 ../src/guestfs-actions.pod:2767 ../src/guestfs-actions.pod:2869 ../src/guestfs-actions.pod:3581 ../src/guestfs-actions.pod:4242 ../src/guestfs-actions.pod:4563 ../src/guestfs-actions.pod:4583 ../src/guestfs-actions.pod:4606 ../src/guestfs-actions.pod:5571 ../fish/guestfish-actions.pod:2168 ../fish/guestfish-actions.pod:2181 ../fish/guestfish-actions.pod:2252 ../fish/guestfish-actions.pod:2767 ../fish/guestfish-actions.pod:3274 ../fish/guestfish-actions.pod:3554 ../fish/guestfish-actions.pod:3570 ../fish/guestfish-actions.pod:3585 ../fish/guestfish-actions.pod:4300
msgid ""
"B<This command is dangerous.  Without careful use you can easily destroy all "
"your data>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2754
msgid "guestfs_luks_format_cipher"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2756
#, no-wrap
msgid ""
" int guestfs_luks_format_cipher (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tint keyslot,\n"
"\t\tconst char *cipher);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2762
msgid ""
"This command is the same as C<guestfs_luks_format> but it also allows you to "
"set the C<cipher> used."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2774
msgid "guestfs_luks_kill_slot"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2776
#, no-wrap
msgid ""
" int guestfs_luks_kill_slot (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tint keyslot);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2781 ../fish/guestfish-actions.pod:2188
msgid ""
"This command deletes the key in key slot C<keyslot> from the encrypted LUKS "
"device C<device>.  C<key> must be one of the I<other> keys."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2791
msgid "guestfs_luks_open"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2793
#, no-wrap
msgid ""
" int guestfs_luks_open (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tconst char *mapname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2798 ../fish/guestfish-actions.pod:2199
msgid ""
"This command opens a block device which has been encrypted according to the "
"Linux Unified Key Setup (LUKS) standard."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2801 ../fish/guestfish-actions.pod:2202
msgid "C<device> is the encrypted block device or partition."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2803 ../fish/guestfish-actions.pod:2204
msgid ""
"The caller must supply one of the keys associated with the LUKS block "
"device, in the C<key> parameter."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2806 ../fish/guestfish-actions.pod:2207
msgid ""
"This creates a new block device called C</dev/mapper/mapname>.  Reads and "
"writes to this block device are decrypted from and encrypted to the "
"underlying C<device> respectively."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2810
msgid ""
"If this block device contains LVM volume groups, then calling "
"C<guestfs_vgscan> followed by C<guestfs_vg_activate_all> will make them "
"visible."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2820
msgid "guestfs_luks_open_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2822
#, no-wrap
msgid ""
" int guestfs_luks_open_ro (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *key,\n"
"\t\tconst char *mapname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2827
msgid ""
"This is the same as C<guestfs_luks_open> except that a read-only mapping is "
"created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2836
msgid "guestfs_lvcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2838
#, no-wrap
msgid ""
" int guestfs_lvcreate (guestfs_h *g,\n"
"\t\tconst char *logvol,\n"
"\t\tconst char *volgroup,\n"
"\t\tint mbytes);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2843 ../fish/guestfish-actions.pod:2232
msgid ""
"This creates an LVM logical volume called C<logvol> on the volume group "
"C<volgroup>, with C<size> megabytes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2848
msgid "guestfs_lvm_clear_filter"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2850
#, no-wrap
msgid ""
" int guestfs_lvm_clear_filter (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2852
msgid ""
"This undoes the effect of C<guestfs_lvm_set_filter>.  LVM will be able to "
"see every block device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2855 ../src/guestfs-actions.pod:2891 ../fish/guestfish-actions.pod:2242 ../fish/guestfish-actions.pod:2273
msgid "This command also clears the LVM cache and performs a volume group scan."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2860
msgid "guestfs_lvm_remove_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2862
#, no-wrap
msgid ""
" int guestfs_lvm_remove_all (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2864 ../fish/guestfish-actions.pod:2249
msgid ""
"This command removes all LVM logical volumes, volume groups and physical "
"volumes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2872
msgid "guestfs_lvm_set_filter"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2874
#, no-wrap
msgid ""
" int guestfs_lvm_set_filter (guestfs_h *g,\n"
"\t\tchar *const *devices);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2877 ../fish/guestfish-actions.pod:2259
msgid ""
"This sets the LVM device filter so that LVM will only be able to \"see\" the "
"block devices in the list C<devices>, and will ignore all other attached "
"block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2881 ../fish/guestfish-actions.pod:2263
msgid ""
"Where disk image(s) contain duplicate PVs or VGs, this command is useful to "
"get LVM to ignore the duplicates, otherwise LVM can get confused.  Note also "
"there are two types of duplication possible: either cloned PVs/VGs which "
"have identical UUIDs; or VGs that are not cloned but just happen to have the "
"same name.  In normal operation you cannot create this situation, but you "
"can do it outside LVM, eg.  by cloning disk images or by bit twiddling "
"inside the LVM metadata."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2894 ../fish/guestfish-actions.pod:2276
msgid "You can filter whole block devices or individual partitions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2896 ../fish/guestfish-actions.pod:2278
msgid ""
"You cannot use this if any VG is currently in use (eg.  contains a mounted "
"filesystem), even if you are not filtering out that VG."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2902
msgid "guestfs_lvremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2904
#, no-wrap
msgid ""
" int guestfs_lvremove (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2907 ../fish/guestfish-actions.pod:2286
msgid ""
"Remove an LVM logical volume C<device>, where C<device> is the path to the "
"LV, such as C</dev/VG/LV>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2910 ../fish/guestfish-actions.pod:2289
msgid ""
"You can also remove all LVs in a volume group by specifying the VG name, "
"C</dev/VG>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2915
msgid "guestfs_lvrename"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2917
#, no-wrap
msgid ""
" int guestfs_lvrename (guestfs_h *g,\n"
"\t\tconst char *logvol,\n"
"\t\tconst char *newlogvol);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2921 ../fish/guestfish-actions.pod:2296
msgid "Rename a logical volume C<logvol> with the new name C<newlogvol>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2925
msgid "guestfs_lvresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2927
#, no-wrap
msgid ""
" int guestfs_lvresize (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint mbytes);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2931 ../fish/guestfish-actions.pod:2302
msgid ""
"This resizes (expands or shrinks) an existing LVM logical volume to "
"C<mbytes>.  When reducing, data in the reduced part is lost."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2937
msgid "guestfs_lvresize_free"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2939
#, no-wrap
msgid ""
" int guestfs_lvresize_free (guestfs_h *g,\n"
"\t\tconst char *lv,\n"
"\t\tint percent);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2943 ../fish/guestfish-actions.pod:2310
msgid ""
"This expands an existing logical volume C<lv> so that it fills C<pc>% of the "
"remaining free space in the volume group.  Commonly you would call this with "
"pc = 100 which expands the logical volume as much as possible, using all "
"remaining free space in the volume group."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2951
msgid "guestfs_lvs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2953
#, no-wrap
msgid ""
" char **guestfs_lvs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2955 ../fish/guestfish-actions.pod:2320
msgid ""
"List all the logical volumes detected.  This is the equivalent of the "
"L<lvs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2958 ../fish/guestfish-actions.pod:2323
msgid ""
"This returns a list of the logical volume device names "
"(eg. C</dev/VolGroup00/LogVol00>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2961
msgid "See also C<guestfs_lvs_full>, C<guestfs_list_filesystems>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2967
msgid "guestfs_lvs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2969
#, no-wrap
msgid ""
" struct guestfs_lvm_lv_list *guestfs_lvs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2971 ../fish/guestfish-actions.pod:2332
msgid ""
"List all the logical volumes detected.  This is the equivalent of the "
"L<lvs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2974
msgid ""
"This function returns a C<struct guestfs_lvm_lv_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_lvm_lv_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2979
msgid "guestfs_lvuuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2981
#, no-wrap
msgid ""
" char *guestfs_lvuuid (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2984 ../fish/guestfish-actions.pod:2339
msgid "This command returns the UUID of the LVM LV C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:2989
msgid "guestfs_lxattrlist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:2991
#, no-wrap
msgid ""
" struct guestfs_xattr_list *guestfs_lxattrlist (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tchar *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2995 ../fish/guestfish-actions.pod:2345
msgid ""
"This call allows you to get the extended attributes of multiple files, where "
"all files are in the directory C<path>.  C<names> is the list of files from "
"this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:2999 ../fish/guestfish-actions.pod:2349
msgid ""
"On return you get a flat list of xattr structs which must be interpreted "
"sequentially.  The first xattr struct always has a zero-length C<attrname>.  "
"C<attrval> in this struct is zero-length to indicate there was an error "
"doing C<lgetxattr> for this file, I<or> is a C string which is a decimal "
"number (the number of following attributes for this file, which could be "
"C<\"0\">).  Then after the first xattr struct are the zero or more "
"attributes for the first named file.  This repeats for the second and "
"subsequent files."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3009
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also C<guestfs_lstatlist> for "
"a similarly efficient call for getting standard stats.  Very long directory "
"listings might cause the protocol message size to be exceeded, causing this "
"call to fail.  The caller must split up such requests into smaller groups of "
"names."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3022
msgid "guestfs_mkdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3024
#, no-wrap
msgid ""
" int guestfs_mkdir (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3027 ../fish/guestfish-actions.pod:2371
msgid "Create a directory named C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3031
msgid "guestfs_mkdir_mode"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3033
#, no-wrap
msgid ""
" int guestfs_mkdir_mode (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint mode);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3037 ../fish/guestfish-actions.pod:2377
msgid ""
"This command creates a directory, setting the initial permissions of the "
"directory to C<mode>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3040 ../fish/guestfish-actions.pod:2380
msgid ""
"For common Linux filesystems, the actual mode which is set will be C<mode & "
"~umask & 01777>.  Non-native-Linux filesystems may interpret the mode in "
"other ways."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3044
msgid "See also C<guestfs_mkdir>, C<guestfs_umask>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3048
msgid "guestfs_mkdir_p"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3050
#, no-wrap
msgid ""
" int guestfs_mkdir_p (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3053 ../fish/guestfish-actions.pod:2390
msgid ""
"Create a directory named C<path>, creating any parent directories as "
"necessary.  This is like the C<mkdir -p> shell command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3058
msgid "guestfs_mkdtemp"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3060
#, no-wrap
msgid ""
" char *guestfs_mkdtemp (guestfs_h *g,\n"
"\t\tconst char *template);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3063 ../fish/guestfish-actions.pod:2397
msgid ""
"This command creates a temporary directory.  The C<template> parameter "
"should be a full pathname for the temporary directory name with the final "
"six characters being \"XXXXXX\"."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3068 ../fish/guestfish-actions.pod:2402
msgid ""
"For example: \"/tmp/myprogXXXXXX\" or \"/Temp/myprogXXXXXX\", the second one "
"being suitable for Windows filesystems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3071 ../fish/guestfish-actions.pod:2405
msgid "The name of the temporary directory that was created is returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3074 ../fish/guestfish-actions.pod:2408
msgid "The temporary directory is created with mode 0700 and is owned by root."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3077 ../fish/guestfish-actions.pod:2411
msgid ""
"The caller is responsible for deleting the temporary directory and its "
"contents after use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3080 ../fish/guestfish-actions.pod:2414
msgid "See also: L<mkdtemp(3)>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3085
msgid "guestfs_mke2fs_J"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3087
#, no-wrap
msgid ""
" int guestfs_mke2fs_J (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tint blocksize,\n"
"\t\tconst char *device,\n"
"\t\tconst char *journal);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3093 ../fish/guestfish-actions.pod:2420
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"C<journal>.  It is equivalent to the command:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3097 ../fish/guestfish-actions.pod:2424
#, no-wrap
msgid ""
" mke2fs -t fstype -b blocksize -J device=<journal> <device>\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3099
msgid "See also C<guestfs_mke2journal>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3103
msgid "guestfs_mke2fs_JL"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3105
#, no-wrap
msgid ""
" int guestfs_mke2fs_JL (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tint blocksize,\n"
"\t\tconst char *device,\n"
"\t\tconst char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3111 ../fish/guestfish-actions.pod:2432
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"the journal labeled C<label>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3114
msgid "See also C<guestfs_mke2journal_L>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3118
msgid "guestfs_mke2fs_JU"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3120
#, no-wrap
msgid ""
" int guestfs_mke2fs_JU (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tint blocksize,\n"
"\t\tconst char *device,\n"
"\t\tconst char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3126 ../fish/guestfish-actions.pod:2441
msgid ""
"This creates an ext2/3/4 filesystem on C<device> with an external journal on "
"the journal with UUID C<uuid>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3129
msgid "See also C<guestfs_mke2journal_U>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3133
msgid "guestfs_mke2journal"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3135
#, no-wrap
msgid ""
" int guestfs_mke2journal (guestfs_h *g,\n"
"\t\tint blocksize,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3139 ../fish/guestfish-actions.pod:2450
msgid ""
"This creates an ext2 external journal on C<device>.  It is equivalent to the "
"command:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3142 ../fish/guestfish-actions.pod:2453
#, no-wrap
msgid ""
" mke2fs -O journal_dev -b blocksize device\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3146
msgid "guestfs_mke2journal_L"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3148
#, no-wrap
msgid ""
" int guestfs_mke2journal_L (guestfs_h *g,\n"
"\t\tint blocksize,\n"
"\t\tconst char *label,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3153 ../fish/guestfish-actions.pod:2459
msgid "This creates an ext2 external journal on C<device> with label C<label>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3157
msgid "guestfs_mke2journal_U"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3159
#, no-wrap
msgid ""
" int guestfs_mke2journal_U (guestfs_h *g,\n"
"\t\tint blocksize,\n"
"\t\tconst char *uuid,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3164 ../fish/guestfish-actions.pod:2465
msgid "This creates an ext2 external journal on C<device> with UUID C<uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3168
msgid "guestfs_mkfifo"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3170
#, no-wrap
msgid ""
" int guestfs_mkfifo (guestfs_h *g,\n"
"\t\tint mode,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3174
msgid ""
"This call creates a FIFO (named pipe) called C<path> with mode C<mode>.  It "
"is just a convenient wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3182
msgid "guestfs_mkfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3184
#, no-wrap
msgid ""
" int guestfs_mkfs (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3188 ../fish/guestfish-actions.pod:2481
msgid ""
"This creates a filesystem on C<device> (usually a partition or LVM logical "
"volume).  The filesystem type is C<fstype>, for example C<ext3>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3194
msgid "guestfs_mkfs_b"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3196
#, no-wrap
msgid ""
" int guestfs_mkfs_b (guestfs_h *g,\n"
"\t\tconst char *fstype,\n"
"\t\tint blocksize,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3201
msgid ""
"This call is similar to C<guestfs_mkfs>, but it allows you to control the "
"block size of the resulting filesystem.  Supported block sizes depend on the "
"filesystem type, but typically they are C<1024>, C<2048> or C<4096> only."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3206 ../fish/guestfish-actions.pod:2494
msgid ""
"For VFAT and NTFS the C<blocksize> parameter is treated as the requested "
"cluster size."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3211
msgid "guestfs_mkmountpoint"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3213
#, no-wrap
msgid ""
" int guestfs_mkmountpoint (guestfs_h *g,\n"
"\t\tconst char *exemptpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3216
msgid ""
"C<guestfs_mkmountpoint> and C<guestfs_rmmountpoint> are specialized calls "
"that can be used to create extra mountpoints before mounting the first "
"filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3220 ../fish/guestfish-actions.pod:2505
msgid ""
"These calls are I<only> necessary in some very limited circumstances, mainly "
"the case where you want to mount a mix of unrelated and/or read-only "
"filesystems together."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3224 ../fish/guestfish-actions.pod:2509
msgid ""
"For example, live CDs often contain a \"Russian doll\" nest of filesystems, "
"an ISO outer layer, with a squashfs image inside, with an ext2/3 image "
"inside that.  You can unpack this as follows in guestfish:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3229 ../fish/guestfish-actions.pod:2514
#, no-wrap
msgid ""
" add-ro Fedora-11-i686-Live.iso\n"
" run\n"
" mkmountpoint /cd\n"
" mkmountpoint /squash\n"
" mkmountpoint /ext3\n"
" mount /dev/sda /cd\n"
" mount-loop /cd/LiveOS/squashfs.img /squash\n"
" mount-loop /squash/LiveOS/ext3fs.img /ext3\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3238 ../fish/guestfish-actions.pod:2523
msgid "The inner filesystem is now unpacked under the /ext3 mountpoint."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3242
msgid "guestfs_mknod"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3244
#, no-wrap
msgid ""
" int guestfs_mknod (guestfs_h *g,\n"
"\t\tint mode,\n"
"\t\tint devmajor,\n"
"\t\tint devminor,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3250 ../fish/guestfish-actions.pod:2529
msgid ""
"This call creates block or character special devices, or named pipes "
"(FIFOs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3253 ../fish/guestfish-actions.pod:2532
msgid ""
"The C<mode> parameter should be the mode, using the standard constants.  "
"C<devmajor> and C<devminor> are the device major and minor numbers, only "
"used when creating block and character special devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3258
msgid ""
"Note that, just like L<mknod(2)>, the mode must be bitwise OR'd with "
"S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a "
"regular file).  These constants are available in the standard Linux header "
"files, or you can use C<guestfs_mknod_b>, C<guestfs_mknod_c> or "
"C<guestfs_mkfifo> which are wrappers around this command which bitwise OR in "
"the appropriate constant for you."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3270
msgid "guestfs_mknod_b"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3272
#, no-wrap
msgid ""
" int guestfs_mknod_b (guestfs_h *g,\n"
"\t\tint mode,\n"
"\t\tint devmajor,\n"
"\t\tint devminor,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3278
msgid ""
"This call creates a block device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3286
msgid "guestfs_mknod_c"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3288
#, no-wrap
msgid ""
" int guestfs_mknod_c (guestfs_h *g,\n"
"\t\tint mode,\n"
"\t\tint devmajor,\n"
"\t\tint devminor,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3294
msgid ""
"This call creates a char device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around C<guestfs_mknod>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3302
msgid "guestfs_mkswap"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3304
#, no-wrap
msgid ""
" int guestfs_mkswap (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3307 ../fish/guestfish-actions.pod:2571
msgid "Create a swap partition on C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3311
msgid "guestfs_mkswap_L"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3313
#, no-wrap
msgid ""
" int guestfs_mkswap_L (guestfs_h *g,\n"
"\t\tconst char *label,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3317 ../fish/guestfish-actions.pod:2577
msgid "Create a swap partition on C<device> with label C<label>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3319 ../fish/guestfish-actions.pod:2579
msgid ""
"Note that you cannot attach a swap label to a block device "
"(eg. C</dev/sda>), just to a partition.  This appears to be a limitation of "
"the kernel or swap tools."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3325
msgid "guestfs_mkswap_U"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3327
#, no-wrap
msgid ""
" int guestfs_mkswap_U (guestfs_h *g,\n"
"\t\tconst char *uuid,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3331 ../fish/guestfish-actions.pod:2587
msgid "Create a swap partition on C<device> with UUID C<uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3335
msgid "guestfs_mkswap_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3337
#, no-wrap
msgid ""
" int guestfs_mkswap_file (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3340 ../fish/guestfish-actions.pod:2593
msgid "Create a swap file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3342
msgid ""
"This command just writes a swap file signature to an existing file.  To "
"create the file itself, use something like C<guestfs_fallocate>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3347
msgid "guestfs_modprobe"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3349
#, no-wrap
msgid ""
" int guestfs_modprobe (guestfs_h *g,\n"
"\t\tconst char *modulename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3352 ../fish/guestfish-actions.pod:2602
msgid "This loads a kernel module in the appliance."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3354 ../fish/guestfish-actions.pod:2604
msgid ""
"The kernel module must have been whitelisted when libguestfs was built (see "
"C<appliance/kmod.whitelist.in> in the source)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3359
msgid "guestfs_mount"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3361
#, no-wrap
msgid ""
" int guestfs_mount (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3365 ../fish/guestfish-actions.pod:2611
msgid ""
"Mount a guest disk at a position in the filesystem.  Block devices are named "
"C</dev/sda>, C</dev/sdb> and so on, as they were added to the guest.  If "
"those block devices contain partitions, they will have the usual names "
"(eg. C</dev/sda1>).  Also LVM C</dev/VG/LV>-style names can be used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3371 ../fish/guestfish-actions.pod:2617
msgid ""
"The rules are the same as for L<mount(2)>: A filesystem must first be "
"mounted on C</> before others can be mounted.  Other filesystems can only be "
"mounted on directories which already exist."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3376 ../fish/guestfish-actions.pod:2622
msgid ""
"The mounted filesystem is writable, if we have sufficient permissions on the "
"underlying device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3379
msgid ""
"B<Important note:> When you use this call, the filesystem options C<sync> "
"and C<noatime> are set implicitly.  This was originally done because we "
"thought it would improve reliability, but it turns out that I<-o sync> has a "
"very large negative performance impact and negligible effect on "
"reliability.  Therefore we recommend that you avoid using C<guestfs_mount> "
"in any code that needs performance, and instead use C<guestfs_mount_options> "
"(use an empty string for the first parameter if you don't want any options)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3391
msgid "guestfs_mount_loop"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3393
#, no-wrap
msgid ""
" int guestfs_mount_loop (guestfs_h *g,\n"
"\t\tconst char *file,\n"
"\t\tconst char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3397 ../fish/guestfish-actions.pod:2639
msgid ""
"This command lets you mount C<file> (a filesystem image in a file) on a "
"mount point.  It is entirely equivalent to the command C<mount -o loop file "
"mountpoint>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3403
msgid "guestfs_mount_options"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3405
#, no-wrap
msgid ""
" int guestfs_mount_options (guestfs_h *g,\n"
"\t\tconst char *options,\n"
"\t\tconst char *device,\n"
"\t\tconst char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3410
msgid ""
"This is the same as the C<guestfs_mount> command, but it allows you to set "
"the mount options as for the L<mount(8)> I<-o> flag."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3414 ../fish/guestfish-actions.pod:2651
msgid ""
"If the C<options> parameter is an empty string, then no options are passed "
"(all options default to whatever the filesystem uses)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3420
msgid "guestfs_mount_ro"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3422
#, no-wrap
msgid ""
" int guestfs_mount_ro (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3426
msgid ""
"This is the same as the C<guestfs_mount> command, but it mounts the "
"filesystem with the read-only (I<-o ro>) flag."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3431
msgid "guestfs_mount_vfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3433
#, no-wrap
msgid ""
" int guestfs_mount_vfs (guestfs_h *g,\n"
"\t\tconst char *options,\n"
"\t\tconst char *vfstype,\n"
"\t\tconst char *device,\n"
"\t\tconst char *mountpoint);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3439
msgid ""
"This is the same as the C<guestfs_mount> command, but it allows you to set "
"both the mount options and the vfstype as for the L<mount(8)> I<-o> and "
"I<-t> flags."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3445
msgid "guestfs_mountpoints"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3447
#, no-wrap
msgid ""
" char **guestfs_mountpoints (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3449
msgid ""
"This call is similar to C<guestfs_mounts>.  That call returns a list of "
"devices.  This one returns a hash table (map) of device name to directory "
"where the device is mounted."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3459
msgid "guestfs_mounts"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3461
#, no-wrap
msgid ""
" char **guestfs_mounts (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3463 ../fish/guestfish-actions.pod:2682
msgid ""
"This returns the list of currently mounted filesystems.  It returns the list "
"of devices (eg. C</dev/sda1>, C</dev/VG/LV>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3466 ../fish/guestfish-actions.pod:2685
msgid "Some internal mounts are not shown."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3468
msgid "See also: C<guestfs_mountpoints>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3474
msgid "guestfs_mv"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3476
#, no-wrap
msgid ""
" int guestfs_mv (guestfs_h *g,\n"
"\t\tconst char *src,\n"
"\t\tconst char *dest);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3480 ../fish/guestfish-actions.pod:2693
msgid ""
"This moves a file from C<src> to C<dest> where C<dest> is either a "
"destination filename or destination directory."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3485
msgid "guestfs_ntfs_3g_probe"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3487
#, no-wrap
msgid ""
" int guestfs_ntfs_3g_probe (guestfs_h *g,\n"
"\t\tint rw,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3491 ../fish/guestfish-actions.pod:2700
msgid ""
"This command runs the L<ntfs-3g.probe(8)> command which probes an NTFS "
"C<device> for mountability.  (Not all NTFS volumes can be mounted "
"read-write, and some cannot be mounted at all)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3495 ../fish/guestfish-actions.pod:2704
msgid ""
"C<rw> is a boolean flag.  Set it to true if you want to test if the volume "
"can be mounted read-write.  Set it to false if you want to test if the "
"volume can be mounted read-only."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3499 ../fish/guestfish-actions.pod:2708
msgid ""
"The return value is an integer which C<0> if the operation would succeed, or "
"some non-zero value documented in the L<ntfs-3g.probe(8)> manual page."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3505
msgid "guestfs_ntfsresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3507
#, no-wrap
msgid ""
" int guestfs_ntfsresize (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3510 ../fish/guestfish-actions.pod:2716
msgid ""
"This command resizes an NTFS filesystem, expanding or shrinking it to the "
"size of the underlying device.  See also L<ntfsresize(8)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3516
msgid "guestfs_ntfsresize_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3518
#, no-wrap
msgid ""
" int guestfs_ntfsresize_size (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3522
msgid ""
"This command is the same as C<guestfs_ntfsresize> except that it allows you "
"to specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3527
msgid "guestfs_part_add"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3529
#, no-wrap
msgid ""
" int guestfs_part_add (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *prlogex,\n"
"\t\tint64_t startsect,\n"
"\t\tint64_t endsect);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3535
msgid ""
"This command adds a partition to C<device>.  If there is no partition table "
"on the device, call C<guestfs_part_init> first."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3538 ../fish/guestfish-actions.pod:2734
msgid ""
"The C<prlogex> parameter is the type of partition.  Normally you should pass "
"C<p> or C<primary> here, but MBR partition tables also support C<l> (or "
"C<logical>) and C<e> (or C<extended>) partition types."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3543 ../fish/guestfish-actions.pod:2739
msgid ""
"C<startsect> and C<endsect> are the start and end of the partition in "
"I<sectors>.  C<endsect> may be negative, which means it counts backwards "
"from the end of the disk (C<-1> is the last sector)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3547
msgid ""
"Creating a partition which covers the whole disk is not so easy.  Use "
"C<guestfs_part_disk> to do that."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3552
msgid "guestfs_part_del"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3554
#, no-wrap
msgid ""
" int guestfs_part_del (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3558 ../fish/guestfish-actions.pod:2750
msgid "This command deletes the partition numbered C<partnum> on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3560 ../fish/guestfish-actions.pod:2752
msgid ""
"Note that in the case of MBR partitioning, deleting an extended partition "
"also deletes any logical partitions it contains."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3566
msgid "guestfs_part_disk"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3568
#, no-wrap
msgid ""
" int guestfs_part_disk (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3572
msgid ""
"This command is simply a combination of C<guestfs_part_init> followed by "
"C<guestfs_part_add> to create a single primary partition covering the whole "
"disk."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3576
msgid ""
"C<parttype> is the partition table type, usually C<mbr> or C<gpt>, but other "
"possible values are described in C<guestfs_part_init>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3584
msgid "guestfs_part_get_bootable"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3586
#, no-wrap
msgid ""
" int guestfs_part_get_bootable (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3590 ../fish/guestfish-actions.pod:2774
msgid ""
"This command returns true if the partition C<partnum> on C<device> has the "
"bootable flag set."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3593
msgid "See also C<guestfs_part_set_bootable>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3597
msgid "guestfs_part_get_mbr_id"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3599
#, no-wrap
msgid ""
" int guestfs_part_get_mbr_id (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3603 ../fish/guestfish-actions.pod:2783
msgid ""
"Returns the MBR type byte (also known as the ID byte) from the numbered "
"partition C<partnum>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3606 ../src/guestfs-actions.pod:3768
msgid ""
"Note that only MBR (old DOS-style) partitions have type bytes.  You will get "
"undefined results for other partition table types (see "
"C<guestfs_part_get_parttype>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3612
msgid "guestfs_part_get_parttype"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3614
#, no-wrap
msgid ""
" char *guestfs_part_get_parttype (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3617 ../fish/guestfish-actions.pod:2794
msgid ""
"This command examines the partition table on C<device> and returns the "
"partition table type (format) being used."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3620
msgid ""
"Common return values include: C<msdos> (a DOS/Windows style MBR partition "
"table), C<gpt> (a GPT/EFI-style partition table).  Other values are "
"possible, although unusual.  See C<guestfs_part_init> for a full list."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3628
msgid "guestfs_part_init"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3630
#, no-wrap
msgid ""
" int guestfs_part_init (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *parttype);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3634 ../fish/guestfish-actions.pod:2806
msgid ""
"This creates an empty partition table on C<device> of one of the partition "
"types listed below.  Usually C<parttype> should be either C<msdos> or C<gpt> "
"(for large disks)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3638
msgid ""
"Initially there are no partitions.  Following this, you should call "
"C<guestfs_part_add> for each partition required."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3641 ../fish/guestfish-actions.pod:2813
msgid "Possible values for C<parttype> are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3645 ../fish/guestfish-actions.pod:2817
msgid "B<efi> | B<gpt>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3647 ../fish/guestfish-actions.pod:2819
msgid "Intel EFI / GPT partition table."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3649 ../fish/guestfish-actions.pod:2821
msgid ""
"This is recommended for >= 2 TB partitions that will be accessed from Linux "
"and Intel-based Mac OS X.  It also has limited backwards compatibility with "
"the C<mbr> format."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3653 ../fish/guestfish-actions.pod:2825
msgid "B<mbr> | B<msdos>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3655 ../fish/guestfish-actions.pod:2827
msgid ""
"The standard PC \"Master Boot Record\" (MBR) format used by MS-DOS and "
"Windows.  This partition type will B<only> work for device sizes up to 2 "
"TB.  For large disks we recommend using C<gpt>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3662 ../fish/guestfish-actions.pod:2834
msgid "Other partition table types that may work but are not supported include:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3667 ../fish/guestfish-actions.pod:2839
msgid "B<aix>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3669 ../fish/guestfish-actions.pod:2841
msgid "AIX disk labels."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3671 ../fish/guestfish-actions.pod:2843
msgid "B<amiga> | B<rdb>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3673 ../fish/guestfish-actions.pod:2845
msgid "Amiga \"Rigid Disk Block\" format."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3675 ../fish/guestfish-actions.pod:2847
msgid "B<bsd>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3677 ../fish/guestfish-actions.pod:2849
msgid "BSD disk labels."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3679 ../fish/guestfish-actions.pod:2851
msgid "B<dasd>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3681 ../fish/guestfish-actions.pod:2853
msgid "DASD, used on IBM mainframes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3683 ../fish/guestfish-actions.pod:2855
msgid "B<dvh>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3685 ../fish/guestfish-actions.pod:2857
msgid "MIPS/SGI volumes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3687 ../fish/guestfish-actions.pod:2859
msgid "B<mac>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3689 ../fish/guestfish-actions.pod:2861
msgid "Old Mac partition format.  Modern Macs use C<gpt>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3691 ../fish/guestfish-actions.pod:2863
msgid "B<pc98>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3693 ../fish/guestfish-actions.pod:2865
msgid "NEC PC-98 format, common in Japan apparently."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3695 ../fish/guestfish-actions.pod:2867
msgid "B<sun>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3697 ../fish/guestfish-actions.pod:2869
msgid "Sun disk labels."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3703
msgid "guestfs_part_list"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3705
#, no-wrap
msgid ""
" struct guestfs_partition_list *guestfs_part_list (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3708 ../fish/guestfish-actions.pod:2877
msgid ""
"This command parses the partition table on C<device> and returns the list of "
"partitions found."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3711 ../fish/guestfish-actions.pod:2880
msgid "The fields in the returned structure are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3715 ../fish/guestfish-actions.pod:2884
msgid "B<part_num>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3717 ../fish/guestfish-actions.pod:2886
msgid "Partition number, counting from 1."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3719 ../fish/guestfish-actions.pod:2888
msgid "B<part_start>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3721
msgid ""
"Start of the partition I<in bytes>.  To get sectors you have to divide by "
"the device's sector size, see C<guestfs_blockdev_getss>."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3724 ../fish/guestfish-actions.pod:2893
msgid "B<part_end>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3726 ../fish/guestfish-actions.pod:2895
msgid "End of the partition in bytes."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:3728 ../fish/guestfish-actions.pod:2897
msgid "B<part_size>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3730 ../fish/guestfish-actions.pod:2899
msgid "Size of the partition in bytes."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3734
msgid ""
"This function returns a C<struct guestfs_partition_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_partition_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3739
msgid "guestfs_part_set_bootable"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3741
#, no-wrap
msgid ""
" int guestfs_part_set_bootable (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum,\n"
"\t\tint bootable);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3746 ../fish/guestfish-actions.pod:2907
msgid ""
"This sets the bootable flag on partition numbered C<partnum> on device "
"C<device>.  Note that partitions are numbered from 1."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3749 ../fish/guestfish-actions.pod:2910
msgid ""
"The bootable flag is used by some operating systems (notably Windows) to "
"determine which partition to boot from.  It is by no means universally "
"recognized."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3755
msgid "guestfs_part_set_mbr_id"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3757
#, no-wrap
msgid ""
" int guestfs_part_set_mbr_id (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum,\n"
"\t\tint idbyte);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3762 ../fish/guestfish-actions.pod:2918
msgid ""
"Sets the MBR type byte (also known as the ID byte) of the numbered partition "
"C<partnum> to C<idbyte>.  Note that the type bytes quoted in most "
"documentation are in fact hexadecimal numbers, but usually documented "
"without any leading \"0x\" which might be confusing."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3774
msgid "guestfs_part_set_name"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3776
#, no-wrap
msgid ""
" int guestfs_part_set_name (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum,\n"
"\t\tconst char *name);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3781 ../fish/guestfish-actions.pod:2932
msgid ""
"This sets the partition name on partition numbered C<partnum> on device "
"C<device>.  Note that partitions are numbered from 1."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3784 ../fish/guestfish-actions.pod:2935
msgid ""
"The partition name can only be set on certain types of partition table.  "
"This works on C<gpt> but not on C<mbr> partitions."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3789
msgid "guestfs_part_to_dev"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3791
#, no-wrap
msgid ""
" char *guestfs_part_to_dev (guestfs_h *g,\n"
"\t\tconst char *partition);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3794 ../fish/guestfish-actions.pod:2942
msgid ""
"This function takes a partition name (eg. \"/dev/sdb1\") and removes the "
"partition number, returning the device name (eg. \"/dev/sdb\")."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3798
msgid ""
"The named partition must exist, for example as a string returned from "
"C<guestfs_list_partitions>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3804
msgid "guestfs_ping_daemon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3806
#, no-wrap
msgid ""
" int guestfs_ping_daemon (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3808 ../fish/guestfish-actions.pod:2953
msgid ""
"This is a test probe into the guestfs daemon running inside the qemu "
"subprocess.  Calling this function checks that the daemon responds to the "
"ping message, without affecting the daemon or attached block device(s) in "
"any other way."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3815
msgid "guestfs_pread"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3817
#, no-wrap
msgid ""
" char *guestfs_pread (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint count,\n"
"\t\tint64_t offset,\n"
"\t\tsize_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3823 ../fish/guestfish-actions.pod:2962
msgid ""
"This command lets you read part of a file.  It reads C<count> bytes of the "
"file, starting at C<offset>, from file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3826 ../src/guestfs-actions.pod:3849 ../fish/guestfish-actions.pod:2965 ../fish/guestfish-actions.pod:2980
msgid ""
"This may read fewer bytes than requested.  For further details see the "
"L<pread(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3829
msgid "See also C<guestfs_pwrite>, C<guestfs_pread_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3838
msgid "guestfs_pread_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3840
#, no-wrap
msgid ""
" char *guestfs_pread_device (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint count,\n"
"\t\tint64_t offset,\n"
"\t\tsize_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3846 ../fish/guestfish-actions.pod:2977
msgid ""
"This command lets you read part of a file.  It reads C<count> bytes of "
"C<device>, starting at C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3852
msgid "See also C<guestfs_pread>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3861
msgid "guestfs_pvcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3863
#, no-wrap
msgid ""
" int guestfs_pvcreate (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3866 ../fish/guestfish-actions.pod:2992
msgid ""
"This creates an LVM physical volume on the named C<device>, where C<device> "
"should usually be a partition name such as C</dev/sda1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3872
msgid "guestfs_pvremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3874
#, no-wrap
msgid ""
" int guestfs_pvremove (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3877 ../fish/guestfish-actions.pod:3000
msgid ""
"This wipes a physical volume C<device> so that LVM will no longer recognise "
"it."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3880 ../fish/guestfish-actions.pod:3003
msgid ""
"The implementation uses the C<pvremove> command which refuses to wipe "
"physical volumes that contain any volume groups, so you have to remove those "
"first."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3886
msgid "guestfs_pvresize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3888
#, no-wrap
msgid ""
" int guestfs_pvresize (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3891 ../fish/guestfish-actions.pod:3011
msgid ""
"This resizes (expands or shrinks) an existing LVM physical volume to match "
"the new size of the underlying device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3896
msgid "guestfs_pvresize_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3898
#, no-wrap
msgid ""
" int guestfs_pvresize_size (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3902
msgid ""
"This command is the same as C<guestfs_pvresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3907
msgid "guestfs_pvs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3909
#, no-wrap
msgid ""
" char **guestfs_pvs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3911 ../fish/guestfish-actions.pod:3025
msgid ""
"List all the physical volumes detected.  This is the equivalent of the "
"L<pvs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3914 ../fish/guestfish-actions.pod:3028
msgid ""
"This returns a list of just the device names that contain PVs "
"(eg. C</dev/sda2>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3917
msgid "See also C<guestfs_pvs_full>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3923
msgid "guestfs_pvs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3925
#, no-wrap
msgid ""
" struct guestfs_lvm_pv_list *guestfs_pvs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3927 ../fish/guestfish-actions.pod:3037
msgid ""
"List all the physical volumes detected.  This is the equivalent of the "
"L<pvs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3930
msgid ""
"This function returns a C<struct guestfs_lvm_pv_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_lvm_pv_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3935
msgid "guestfs_pvuuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3937
#, no-wrap
msgid ""
" char *guestfs_pvuuid (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3940 ../fish/guestfish-actions.pod:3044
msgid "This command returns the UUID of the LVM PV C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3945
msgid "guestfs_pwrite"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3947
#, no-wrap
msgid ""
" int guestfs_pwrite (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tconst char *content,\n"
"\t\tsize_t content_size,\n"
"\t\tint64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3953 ../fish/guestfish-actions.pod:3050
msgid ""
"This command writes to part of a file.  It writes the data buffer C<content> "
"to the file C<path> starting at offset C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3956 ../fish/guestfish-actions.pod:3053
msgid ""
"This command implements the L<pwrite(2)> system call, and like that system "
"call it may not write the full data requested.  The return value is the "
"number of bytes that were actually written to the file.  This could even be "
"0, although short writes are unlikely for regular files in ordinary "
"circumstances."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3962
msgid "See also C<guestfs_pread>, C<guestfs_pwrite_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3969
msgid "guestfs_pwrite_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3971
#, no-wrap
msgid ""
" int guestfs_pwrite_device (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *content,\n"
"\t\tsize_t content_size,\n"
"\t\tint64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3977 ../fish/guestfish-actions.pod:3068
msgid ""
"This command writes to part of a device.  It writes the data buffer "
"C<content> to C<device> starting at offset C<offset>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3980 ../fish/guestfish-actions.pod:3071
msgid ""
"This command implements the L<pwrite(2)> system call, and like that system "
"call it may not write the full data requested (although short writes to disk "
"devices and partitions are probably impossible with standard Linux kernels)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3985
msgid "See also C<guestfs_pwrite>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:3992
msgid "guestfs_read_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:3994
#, no-wrap
msgid ""
" char *guestfs_read_file (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tsize_t *size_r);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:3998 ../fish/guestfish-actions.pod:3085
msgid "This calls returns the contents of the file C<path> as a buffer."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4001
msgid ""
"Unlike C<guestfs_cat>, this function can correctly handle files that contain "
"embedded ASCII NUL characters.  However unlike C<guestfs_download>, this "
"function is limited in the total size of file that can be handled."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4013
msgid "guestfs_read_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4015
#, no-wrap
msgid ""
" char **guestfs_read_lines (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4020 ../fish/guestfish-actions.pod:3102
msgid ""
"The file contents are returned as a list of lines.  Trailing C<LF> and "
"C<CRLF> character sequences are I<not> returned."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4023
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of line).  For "
"those you need to use the C<guestfs_read_file> function which has a more "
"complex interface."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4032
msgid "guestfs_readdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4034
#, no-wrap
msgid ""
" struct guestfs_dirent_list *guestfs_readdir (guestfs_h *g,\n"
"\t\tconst char *dir);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4037 ../fish/guestfish-actions.pod:3114
msgid "This returns the list of directory entries in directory C<dir>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4039 ../fish/guestfish-actions.pod:3116
msgid ""
"All entries in the directory are returned, including C<.> and C<..>.  The "
"entries are I<not> sorted, but returned in the same order as the underlying "
"filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4043 ../fish/guestfish-actions.pod:3120
msgid ""
"Also this call returns basic file type information about each file.  The "
"C<ftyp> field will contain one of the following characters:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4048 ../fish/guestfish-actions.pod:3125
msgid "'b'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4050 ../fish/guestfish-actions.pod:3127
msgid "Block special"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4052 ../fish/guestfish-actions.pod:3129
msgid "'c'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4054 ../fish/guestfish-actions.pod:3131
msgid "Char special"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4056 ../fish/guestfish-actions.pod:3133
msgid "'d'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4058 ../fish/guestfish-actions.pod:3135
msgid "Directory"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4060 ../fish/guestfish-actions.pod:3137
msgid "'f'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4062 ../fish/guestfish-actions.pod:3139
msgid "FIFO (named pipe)"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4064 ../fish/guestfish-actions.pod:3141
msgid "'l'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4066 ../fish/guestfish-actions.pod:3143
msgid "Symbolic link"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4068 ../fish/guestfish-actions.pod:3145
msgid "'r'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4070 ../fish/guestfish-actions.pod:3147
msgid "Regular file"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4072 ../fish/guestfish-actions.pod:3149
msgid "'s'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4074 ../fish/guestfish-actions.pod:3151
msgid "Socket"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4076 ../fish/guestfish-actions.pod:3153
msgid "'u'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4078 ../fish/guestfish-actions.pod:3155
msgid "Unknown file type"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4080 ../fish/guestfish-actions.pod:3157
msgid "'?'"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4082 ../fish/guestfish-actions.pod:3159
msgid "The L<readdir(3)> call returned a C<d_type> field with an unexpected value"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4087
msgid ""
"This function is primarily intended for use by programs.  To get a simple "
"list of names, use C<guestfs_ls>.  To get a printable directory for human "
"consumption, use C<guestfs_ll>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4091
msgid ""
"This function returns a C<struct guestfs_dirent_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_dirent_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4096
msgid "guestfs_readlink"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4098
#, no-wrap
msgid ""
" char *guestfs_readlink (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4101 ../fish/guestfish-actions.pod:3172
msgid "This command reads the target of a symbolic link."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4106
msgid "guestfs_readlinklist"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4108
#, no-wrap
msgid ""
" char **guestfs_readlinklist (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tchar *const *names);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4112 ../fish/guestfish-actions.pod:3178
msgid ""
"This call allows you to do a C<readlink> operation on multiple files, where "
"all files are in the directory C<path>.  C<names> is the list of files from "
"this directory."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4116 ../fish/guestfish-actions.pod:3182
msgid ""
"On return you get a list of strings, with a one-to-one correspondence to the "
"C<names> list.  Each string is the value of the symbolic link."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4120 ../fish/guestfish-actions.pod:3186
msgid ""
"If the C<readlink(2)> operation fails on any name, then the corresponding "
"result string is the empty string C<\"\">.  However the whole operation is "
"completed even if there were C<readlink(2)> errors, and so you can call this "
"function with names where you don't know if they are symbolic links already "
"(albeit slightly less efficient)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4127 ../fish/guestfish-actions.pod:3193
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  Very long directory listings "
"might cause the protocol message size to be exceeded, causing this call to "
"fail.  The caller must split up such requests into smaller groups of names."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4138
msgid "guestfs_realpath"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4140
#, no-wrap
msgid ""
" char *guestfs_realpath (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4143 ../fish/guestfish-actions.pod:3204
msgid ""
"Return the canonicalized absolute pathname of C<path>.  The returned path "
"has no C<.>, C<..> or symbolic link path elements."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4149
msgid "guestfs_removexattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4151
#, no-wrap
msgid ""
" int guestfs_removexattr (guestfs_h *g,\n"
"\t\tconst char *xattr,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4155 ../fish/guestfish-actions.pod:3211
msgid "This call removes the extended attribute named C<xattr> of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4158
msgid "See also: C<guestfs_lremovexattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4162
msgid "guestfs_resize2fs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4164
#, no-wrap
msgid ""
" int guestfs_resize2fs (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4167 ../fish/guestfish-actions.pod:3220
msgid ""
"This resizes an ext2, ext3 or ext4 filesystem to match the size of the "
"underlying device."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4170
msgid ""
"I<Note:> It is sometimes required that you run C<guestfs_e2fsck_f> on the "
"C<device> before calling this command.  For unknown reasons C<resize2fs> "
"sometimes gives an error about this and sometimes not.  In any case, it is "
"always safe to call C<guestfs_e2fsck_f> before calling this function."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4178
msgid "guestfs_resize2fs_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4180
#, no-wrap
msgid ""
" int guestfs_resize2fs_size (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4184
msgid ""
"This command is the same as C<guestfs_resize2fs> except that it allows you "
"to specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4189
msgid "guestfs_rm"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4191
#, no-wrap
msgid ""
" int guestfs_rm (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4194 ../fish/guestfish-actions.pod:3240
msgid "Remove the single file C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4198
msgid "guestfs_rm_rf"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4200
#, no-wrap
msgid ""
" int guestfs_rm_rf (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4203 ../fish/guestfish-actions.pod:3246
msgid ""
"Remove the file or directory C<path>, recursively removing the contents if "
"its a directory.  This is like the C<rm -rf> shell command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4209
msgid "guestfs_rmdir"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4211
#, no-wrap
msgid ""
" int guestfs_rmdir (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4214 ../fish/guestfish-actions.pod:3254
msgid "Remove the single directory C<path>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4218
msgid "guestfs_rmmountpoint"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4220
#, no-wrap
msgid ""
" int guestfs_rmmountpoint (guestfs_h *g,\n"
"\t\tconst char *exemptpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4223
msgid ""
"This calls removes a mountpoint that was previously created with "
"C<guestfs_mkmountpoint>.  See C<guestfs_mkmountpoint> for full details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4229
msgid "guestfs_scrub_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4231
#, no-wrap
msgid ""
" int guestfs_scrub_device (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4234 ../fish/guestfish-actions.pod:3268
msgid ""
"This command writes patterns over C<device> to make data retrieval more "
"difficult."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4237 ../src/guestfs-actions.pod:4255 ../src/guestfs-actions.pod:4271 ../fish/guestfish-actions.pod:3271 ../fish/guestfish-actions.pod:3286 ../fish/guestfish-actions.pod:3299
msgid ""
"It is an interface to the L<scrub(1)> program.  See that manual page for "
"more details."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4245
msgid "guestfs_scrub_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4247
#, no-wrap
msgid ""
" int guestfs_scrub_file (guestfs_h *g,\n"
"\t\tconst char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4250 ../fish/guestfish-actions.pod:3281
msgid ""
"This command writes patterns over a file to make data retrieval more "
"difficult."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4253 ../fish/guestfish-actions.pod:3284
msgid "The file is I<removed> after scrubbing."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4260
msgid "guestfs_scrub_freespace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4262
#, no-wrap
msgid ""
" int guestfs_scrub_freespace (guestfs_h *g,\n"
"\t\tconst char *dir);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4265
msgid ""
"This command creates the directory C<dir> and then fills it with files until "
"the filesystem is full, and scrubs the files as for C<guestfs_scrub_file>, "
"and deletes them.  The intention is to scrub any free space on the partition "
"containing C<dir>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4276
msgid "guestfs_set_append"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4278
#, no-wrap
msgid ""
" int guestfs_set_append (guestfs_h *g,\n"
"\t\tconst char *append);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4281 ../fish/guestfish-actions.pod:3308
msgid ""
"This function is used to add additional options to the guest kernel command "
"line."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4284 ../fish/guestfish-actions.pod:3311
msgid ""
"The default is C<NULL> unless overridden by setting C<LIBGUESTFS_APPEND> "
"environment variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4287 ../fish/guestfish-actions.pod:3314
msgid ""
"Setting C<append> to C<NULL> means I<no> additional options are passed "
"(libguestfs always adds a few of its own)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4292
msgid "guestfs_set_autosync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4294
#, no-wrap
msgid ""
" int guestfs_set_autosync (guestfs_h *g,\n"
"\t\tint autosync);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4297
msgid ""
"If C<autosync> is true, this enables autosync.  Libguestfs will make a best "
"effort attempt to run C<guestfs_umount_all> followed by C<guestfs_sync> when "
"the handle is closed (also if the program exits without closing handles)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4302 ../fish/guestfish-actions.pod:3328
msgid ""
"This is disabled by default (except in guestfish where it is enabled by "
"default)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4307
msgid "guestfs_set_direct"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4309
#, no-wrap
msgid ""
" int guestfs_set_direct (guestfs_h *g,\n"
"\t\tint direct);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4312 ../fish/guestfish-actions.pod:3337
msgid ""
"If the direct appliance mode flag is enabled, then stdin and stdout are "
"passed directly through to the appliance once it is launched."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4316
msgid ""
"One consequence of this is that log messages aren't caught by the library "
"and handled by C<guestfs_set_log_message_callback>, but go straight to "
"stdout."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4320 ../fish/guestfish-actions.pod:3345
msgid "You probably don't want to use this unless you know what you are doing."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4323 ../fish/guestfish-actions.pod:3348
msgid "The default is disabled."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4327
msgid "guestfs_set_e2label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4329
#, no-wrap
msgid ""
" int guestfs_set_e2label (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4333 ../fish/guestfish-actions.pod:3354
msgid ""
"This sets the ext2/3/4 filesystem label of the filesystem on C<device> to "
"C<label>.  Filesystem labels are limited to 16 characters."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4337
msgid ""
"You can use either C<guestfs_tune2fs_l> or C<guestfs_get_e2label> to return "
"the existing label on a filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4342
msgid "guestfs_set_e2uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4344
#, no-wrap
msgid ""
" int guestfs_set_e2uuid (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tconst char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4348 ../fish/guestfish-actions.pod:3365
msgid ""
"This sets the ext2/3/4 filesystem UUID of the filesystem on C<device> to "
"C<uuid>.  The format of the UUID and alternatives such as C<clear>, "
"C<random> and C<time> are described in the L<tune2fs(8)> manpage."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4353
msgid ""
"You can use either C<guestfs_tune2fs_l> or C<guestfs_get_e2uuid> to return "
"the existing UUID of a filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4358
msgid "guestfs_set_memsize"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4360
#, no-wrap
msgid ""
" int guestfs_set_memsize (guestfs_h *g,\n"
"\t\tint memsize);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4363
msgid ""
"This sets the memory size in megabytes allocated to the qemu subprocess.  "
"This only has any effect if called before C<guestfs_launch>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4367 ../fish/guestfish-actions.pod:3383
msgid ""
"You can also change this by setting the environment variable "
"C<LIBGUESTFS_MEMSIZE> before the handle is created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4376
msgid "guestfs_set_network"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4378
#, no-wrap
msgid ""
" int guestfs_set_network (guestfs_h *g,\n"
"\t\tint network);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4381 ../fish/guestfish-actions.pod:3396
msgid ""
"If C<network> is true, then the network is enabled in the libguestfs "
"appliance.  The default is false."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4384 ../fish/guestfish-actions.pod:3399
msgid ""
"This affects whether commands are able to access the network (see "
"L<guestfs(3)/RUNNING COMMANDS>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4387
msgid ""
"You must call this before calling C<guestfs_launch>, otherwise it has no "
"effect."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4392
msgid "guestfs_set_path"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4394
#, no-wrap
msgid ""
" int guestfs_set_path (guestfs_h *g,\n"
"\t\tconst char *searchpath);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4397 ../fish/guestfish-actions.pod:3411
msgid "Set the path that libguestfs searches for kernel and initrd.img."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4399 ../fish/guestfish-actions.pod:3413
msgid ""
"The default is C<$libdir/guestfs> unless overridden by setting "
"C<LIBGUESTFS_PATH> environment variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4402 ../fish/guestfish-actions.pod:3416
msgid "Setting C<path> to C<NULL> restores the default path."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4406
msgid "guestfs_set_qemu"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4408
#, no-wrap
msgid ""
" int guestfs_set_qemu (guestfs_h *g,\n"
"\t\tconst char *qemu);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4411 ../fish/guestfish-actions.pod:3424
msgid "Set the qemu binary that we will use."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4413 ../fish/guestfish-actions.pod:3426
msgid "The default is chosen when the library was compiled by the configure script."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4416 ../fish/guestfish-actions.pod:3429
msgid ""
"You can also override this by setting the C<LIBGUESTFS_QEMU> environment "
"variable."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4419 ../fish/guestfish-actions.pod:3432
msgid "Setting C<qemu> to C<NULL> restores the default qemu binary."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4421 ../fish/guestfish-actions.pod:3434
msgid ""
"Note that you should call this function as early as possible after creating "
"the handle.  This is because some pre-launch operations depend on testing "
"qemu features (by running C<qemu -help>).  If the qemu binary changes, we "
"don't retest features, and so you might see inconsistent results.  Using the "
"environment variable C<LIBGUESTFS_QEMU> is safest of all since that picks "
"the qemu binary at the same time as the handle is created."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4431
msgid "guestfs_set_recovery_proc"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4433
#, no-wrap
msgid ""
" int guestfs_set_recovery_proc (guestfs_h *g,\n"
"\t\tint recoveryproc);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4436
msgid ""
"If this is called with the parameter C<false> then C<guestfs_launch> does "
"not create a recovery process.  The purpose of the recovery process is to "
"stop runaway qemu processes in the case where the main program aborts "
"abruptly."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4441
msgid ""
"This only has any effect if called before C<guestfs_launch>, and the default "
"is true."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4444 ../fish/guestfish-actions.pod:3456
msgid ""
"About the only time when you would want to disable this is if the main "
"process will fork itself into the background (\"daemonize\" itself).  In "
"this case the recovery process thinks that the main program has disappeared "
"and so kills qemu, which is not very helpful."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4452
msgid "guestfs_set_selinux"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4454
#, no-wrap
msgid ""
" int guestfs_set_selinux (guestfs_h *g,\n"
"\t\tint selinux);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4457 ../fish/guestfish-actions.pod:3468
msgid ""
"This sets the selinux flag that is passed to the appliance at boot time.  "
"The default is C<selinux=0> (disabled)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4460 ../fish/guestfish-actions.pod:3471
msgid ""
"Note that if SELinux is enabled, it is always in Permissive mode "
"(C<enforcing=0>)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4468
msgid "guestfs_set_trace"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4470
#, no-wrap
msgid ""
" int guestfs_set_trace (guestfs_h *g,\n"
"\t\tint trace);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4473 ../fish/guestfish-actions.pod:3483
msgid ""
"If the command trace flag is set to 1, then commands are printed on stderr "
"before they are executed in a format which is very similar to the one used "
"by guestfish.  In other words, you can run a program with this enabled, and "
"you will get out a script which you can feed to guestfish to perform the "
"same set of actions."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4480 ../fish/guestfish-actions.pod:3490
msgid ""
"If you want to trace C API calls into libguestfs (and other libraries) then "
"possibly a better way is to use the external ltrace(1) command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4484 ../fish/guestfish-actions.pod:3494
msgid ""
"Command traces are disabled unless the environment variable "
"C<LIBGUESTFS_TRACE> is defined and set to C<1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4489
msgid "guestfs_set_verbose"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4491
#, no-wrap
msgid ""
" int guestfs_set_verbose (guestfs_h *g,\n"
"\t\tint verbose);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4494 ../fish/guestfish-actions.pod:3503
msgid "If C<verbose> is true, this turns on verbose messages (to C<stderr>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4496 ../fish/guestfish-actions.pod:3505
msgid ""
"Verbose messages are disabled unless the environment variable "
"C<LIBGUESTFS_DEBUG> is defined and set to C<1>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4501
msgid "guestfs_setcon"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4503
#, no-wrap
msgid ""
" int guestfs_setcon (guestfs_h *g,\n"
"\t\tconst char *context);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4506 ../fish/guestfish-actions.pod:3512
msgid ""
"This sets the SELinux security context of the daemon to the string "
"C<context>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4509 ../fish/guestfish-actions.pod:3515
msgid "See the documentation about SELINUX in L<guestfs(3)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4513
msgid "guestfs_setxattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4515
#, no-wrap
msgid ""
" int guestfs_setxattr (guestfs_h *g,\n"
"\t\tconst char *xattr,\n"
"\t\tconst char *val,\n"
"\t\tint vallen,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4521 ../fish/guestfish-actions.pod:3521
msgid ""
"This call sets the extended attribute named C<xattr> of the file C<path> to "
"the value C<val> (of length C<vallen>).  The value is arbitrary 8 bit data."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4525
msgid "See also: C<guestfs_lsetxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4529
msgid "guestfs_sfdisk"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4531
#, no-wrap
msgid ""
" int guestfs_sfdisk (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint cyls,\n"
"\t\tint heads,\n"
"\t\tint sectors,\n"
"\t\tchar *const *lines);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4538 ../fish/guestfish-actions.pod:3531
msgid ""
"This is a direct interface to the L<sfdisk(8)> program for creating "
"partitions on block devices."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4541 ../fish/guestfish-actions.pod:3534
msgid "C<device> should be a block device, for example C</dev/sda>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4543 ../fish/guestfish-actions.pod:3536
msgid ""
"C<cyls>, C<heads> and C<sectors> are the number of cylinders, heads and "
"sectors on the device, which are passed directly to sfdisk as the I<-C>, "
"I<-H> and I<-S> parameters.  If you pass C<0> for any of these, then the "
"corresponding parameter is omitted.  Usually for 'large' disks, you can just "
"pass C<0> for these, but for small (floppy-sized) disks, sfdisk (or rather, "
"the kernel) cannot work out the right geometry and you will need to tell it."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4551 ../fish/guestfish-actions.pod:3544
msgid ""
"C<lines> is a list of lines that we feed to C<sfdisk>.  For more information "
"refer to the L<sfdisk(8)> manpage."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4554 ../fish/guestfish-actions.pod:3547
msgid ""
"To create a single partition occupying the whole disk, you would pass "
"C<lines> as a single element list, when the single element being the string "
"C<,> (comma)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4558
msgid "See also: C<guestfs_sfdisk_l>, C<guestfs_sfdisk_N>, C<guestfs_part_init>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4566
msgid "guestfs_sfdiskM"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4568
#, no-wrap
msgid ""
" int guestfs_sfdiskM (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tchar *const *lines);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4572
msgid ""
"This is a simplified interface to the C<guestfs_sfdisk> command, where "
"partition sizes are specified in megabytes only (rounded to the nearest "
"cylinder) and you don't need to specify the cyls, heads and sectors "
"parameters which were rarely if ever used anyway."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4578
msgid ""
"See also: C<guestfs_sfdisk>, the L<sfdisk(8)> manpage and "
"C<guestfs_part_disk>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4586
msgid "guestfs_sfdisk_N"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4588
#, no-wrap
msgid ""
" int guestfs_sfdisk_N (guestfs_h *g,\n"
"\t\tconst char *device,\n"
"\t\tint partnum,\n"
"\t\tint cyls,\n"
"\t\tint heads,\n"
"\t\tint sectors,\n"
"\t\tconst char *line);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4596 ../fish/guestfish-actions.pod:3577
msgid ""
"This runs L<sfdisk(8)> option to modify just the single partition C<n> "
"(note: C<n> counts from 1)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4599
msgid ""
"For other parameters, see C<guestfs_sfdisk>.  You should usually pass C<0> "
"for the cyls/heads/sectors parameters."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4602
msgid "See also: C<guestfs_part_add>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4609
msgid "guestfs_sfdisk_disk_geometry"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4611
#, no-wrap
msgid ""
" char *guestfs_sfdisk_disk_geometry (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4614
msgid ""
"This displays the disk geometry of C<device> read from the partition table.  "
"Especially in the case where the underlying block device has been resized, "
"this can be different from the kernel's idea of the geometry (see "
"C<guestfs_sfdisk_kernel_geometry>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4619 ../src/guestfs-actions.pod:4632 ../fish/guestfish-actions.pod:3597 ../fish/guestfish-actions.pod:3606
msgid "The result is in human-readable format, and not designed to be parsed."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4625
msgid "guestfs_sfdisk_kernel_geometry"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4627
#, no-wrap
msgid ""
" char *guestfs_sfdisk_kernel_geometry (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4630 ../fish/guestfish-actions.pod:3604
msgid "This displays the kernel's idea of the geometry of C<device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4638
msgid "guestfs_sfdisk_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4640
#, no-wrap
msgid ""
" char *guestfs_sfdisk_l (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4643 ../fish/guestfish-actions.pod:3613
msgid ""
"This displays the partition table on C<device>, in the human-readable output "
"of the L<sfdisk(8)> command.  It is not intended to be parsed."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4647
msgid "See also: C<guestfs_part_list>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4652
msgid "guestfs_sh"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4654
#, no-wrap
msgid ""
" char *guestfs_sh (guestfs_h *g,\n"
"\t\tconst char *command);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4657 ../fish/guestfish-actions.pod:3623
msgid ""
"This call runs a command from the guest filesystem via the guest's "
"C</bin/sh>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4660
msgid "This is like C<guestfs_command>, but passes the command to:"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4662 ../fish/guestfish-actions.pod:3628
#, no-wrap
msgid ""
" /bin/sh -c \"command\"\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4664 ../fish/guestfish-actions.pod:3630
msgid ""
"Depending on the guest's shell, this usually results in wildcards being "
"expanded, shell expressions being interpolated and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4668
msgid "All the provisos about C<guestfs_command> apply to this call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4673
msgid "guestfs_sh_lines"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4675
#, no-wrap
msgid ""
" char **guestfs_sh_lines (guestfs_h *g,\n"
"\t\tconst char *command);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4678
msgid ""
"This is the same as C<guestfs_sh>, but splits the result into a list of "
"lines."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4681
msgid "See also: C<guestfs_command_lines>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4687
msgid "guestfs_sleep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4689
#, no-wrap
msgid ""
" int guestfs_sleep (guestfs_h *g,\n"
"\t\tint secs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4692 ../fish/guestfish-actions.pod:3649
msgid "Sleep for C<secs> seconds."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4696 ../src/guestfs-structs.pod:109
msgid "guestfs_stat"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4698
#, no-wrap
msgid ""
" struct guestfs_stat *guestfs_stat (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4703 ../fish/guestfish-actions.pod:3657
msgid "This is the same as the C<stat(2)> system call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4709 ../src/guestfs-structs.pod:135
msgid "guestfs_statvfs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4711
#, no-wrap
msgid ""
" struct guestfs_statvfs *guestfs_statvfs (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4714 ../fish/guestfish-actions.pod:3663
msgid ""
"Returns file system statistics for any mounted file system.  C<path> should "
"be a file or directory in the mounted file system (typically it is the mount "
"point itself, but it doesn't need to be)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4718 ../fish/guestfish-actions.pod:3667
msgid "This is the same as the C<statvfs(2)> system call."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4720
msgid ""
"This function returns a C<struct guestfs_statvfs *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_statvfs> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4724
msgid "guestfs_strings"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4726
#, no-wrap
msgid ""
" char **guestfs_strings (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4729 ../fish/guestfish-actions.pod:3673
msgid ""
"This runs the L<strings(1)> command on a file and returns the list of "
"printable strings found."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4739
msgid "guestfs_strings_e"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4741
#, no-wrap
msgid ""
" char **guestfs_strings_e (guestfs_h *g,\n"
"\t\tconst char *encoding,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4745
msgid ""
"This is like the C<guestfs_strings> command, but allows you to specify the "
"encoding of strings that are looked for in the source file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4749 ../fish/guestfish-actions.pod:3687
msgid "Allowed encodings are:"
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4753 ../fish/guestfish-actions.pod:3691
msgid "s"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4755
msgid ""
"Single 7-bit-byte characters like ASCII and the ASCII-compatible parts of "
"ISO-8859-X (this is what C<guestfs_strings> uses)."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4758 ../fish/guestfish-actions.pod:3696
msgid "S"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4760 ../fish/guestfish-actions.pod:3698
msgid "Single 8-bit-byte characters."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4762 ../fish/guestfish-actions.pod:3700
msgid "b"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4764 ../fish/guestfish-actions.pod:3702
msgid "16-bit big endian strings such as those encoded in UTF-16BE or UCS-2BE."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4767 ../fish/guestfish-actions.pod:3705
msgid "l (lower case letter L)"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4769 ../fish/guestfish-actions.pod:3707
msgid ""
"16-bit little endian such as UTF-16LE and UCS-2LE.  This is useful for "
"examining binaries in Windows guests."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4772 ../fish/guestfish-actions.pod:3710
msgid "B"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4774 ../fish/guestfish-actions.pod:3712
msgid "32-bit big endian such as UCS-4BE."
msgstr ""

# type: =item
#: ../src/guestfs-actions.pod:4776 ../fish/guestfish-actions.pod:3714
msgid "L"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4778 ../fish/guestfish-actions.pod:3716
msgid "32-bit little endian such as UCS-4LE."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4782 ../fish/guestfish-actions.pod:3720
msgid "The returned strings are transcoded to UTF-8."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4791
msgid "guestfs_swapoff_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4793
#, no-wrap
msgid ""
" int guestfs_swapoff_device (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4796
msgid ""
"This command disables the libguestfs appliance swap device or partition "
"named C<device>.  See C<guestfs_swapon_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4802
msgid "guestfs_swapoff_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4804
#, no-wrap
msgid ""
" int guestfs_swapoff_file (guestfs_h *g,\n"
"\t\tconst char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4807 ../fish/guestfish-actions.pod:3737
msgid "This command disables the libguestfs appliance swap on file."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4811
msgid "guestfs_swapoff_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4813
#, no-wrap
msgid ""
" int guestfs_swapoff_label (guestfs_h *g,\n"
"\t\tconst char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4816 ../fish/guestfish-actions.pod:3743
msgid ""
"This command disables the libguestfs appliance swap on labeled swap "
"partition."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4821
msgid "guestfs_swapoff_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4823
#, no-wrap
msgid ""
" int guestfs_swapoff_uuid (guestfs_h *g,\n"
"\t\tconst char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4826 ../fish/guestfish-actions.pod:3750
msgid ""
"This command disables the libguestfs appliance swap partition with the given "
"UUID."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4831
msgid "guestfs_swapon_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4833
#, no-wrap
msgid ""
" int guestfs_swapon_device (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4836
msgid ""
"This command enables the libguestfs appliance to use the swap device or "
"partition named C<device>.  The increased memory is made available for all "
"commands, for example those run using C<guestfs_command> or C<guestfs_sh>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4841 ../fish/guestfish-actions.pod:3762
msgid ""
"Note that you should not swap to existing guest swap partitions unless you "
"know what you are doing.  They may contain hibernation information, or other "
"information that the guest doesn't want you to trash.  You also risk leaking "
"information about the host to the guest this way.  Instead, attach a new "
"host device to the guest and swap on that."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4850
msgid "guestfs_swapon_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4852
#, no-wrap
msgid ""
" int guestfs_swapon_file (guestfs_h *g,\n"
"\t\tconst char *file);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4855
msgid ""
"This command enables swap to a file.  See C<guestfs_swapon_device> for other "
"notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4860
msgid "guestfs_swapon_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4862
#, no-wrap
msgid ""
" int guestfs_swapon_label (guestfs_h *g,\n"
"\t\tconst char *label);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4865
msgid ""
"This command enables swap to a labeled swap partition.  See "
"C<guestfs_swapon_device> for other notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4870
msgid "guestfs_swapon_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4872
#, no-wrap
msgid ""
" int guestfs_swapon_uuid (guestfs_h *g,\n"
"\t\tconst char *uuid);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4875
msgid ""
"This command enables swap to a swap partition with the given UUID.  See "
"C<guestfs_swapon_device> for other notes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4880
msgid "guestfs_sync"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4882
#, no-wrap
msgid ""
" int guestfs_sync (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4884 ../fish/guestfish-actions.pod:3794
msgid ""
"This syncs the disk, so that any writes are flushed through to the "
"underlying disk image."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4887 ../fish/guestfish-actions.pod:3797
msgid ""
"You should always call this if you have modified a disk image, before "
"closing the handle."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4892
msgid "guestfs_tail"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4894
#, no-wrap
msgid ""
" char **guestfs_tail (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4897 ../fish/guestfish-actions.pod:3804
msgid "This command returns up to the last 10 lines of a file as a list of strings."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4907
msgid "guestfs_tail_n"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4909
#, no-wrap
msgid ""
" char **guestfs_tail_n (guestfs_h *g,\n"
"\t\tint nrlines,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4913 ../fish/guestfish-actions.pod:3814
msgid ""
"If the parameter C<nrlines> is a positive number, this returns the last "
"C<nrlines> lines of the file C<path>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4916 ../fish/guestfish-actions.pod:3817
msgid ""
"If the parameter C<nrlines> is a negative number, this returns lines from "
"the file C<path>, starting with the C<-nrlines>th line."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4928
msgid "guestfs_tar_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4930
#, no-wrap
msgid ""
" int guestfs_tar_in (guestfs_h *g,\n"
"\t\tconst char *tarfile,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4934 ../fish/guestfish-actions.pod:3829
msgid ""
"This command uploads and unpacks local file C<tarfile> (an I<uncompressed> "
"tar file) into C<directory>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4937
msgid "To upload a compressed tarball, use C<guestfs_tgz_in> or C<guestfs_txz_in>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4942
msgid "guestfs_tar_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4944
#, no-wrap
msgid ""
" int guestfs_tar_out (guestfs_h *g,\n"
"\t\tconst char *directory,\n"
"\t\tconst char *tarfile);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4948 ../fish/guestfish-actions.pod:3841
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarfile>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4951
msgid ""
"To download a compressed tarball, use C<guestfs_tgz_out> or "
"C<guestfs_txz_out>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4956
msgid "guestfs_tgz_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4958
#, no-wrap
msgid ""
" int guestfs_tgz_in (guestfs_h *g,\n"
"\t\tconst char *tarball,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4962 ../fish/guestfish-actions.pod:3853
msgid ""
"This command uploads and unpacks local file C<tarball> (a I<gzip compressed> "
"tar file) into C<directory>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4965
msgid "To upload an uncompressed tarball, use C<guestfs_tar_in>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4969
msgid "guestfs_tgz_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4971
#, no-wrap
msgid ""
" int guestfs_tgz_out (guestfs_h *g,\n"
"\t\tconst char *directory,\n"
"\t\tconst char *tarball);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4975 ../fish/guestfish-actions.pod:3864
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarball>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4978
msgid "To download an uncompressed tarball, use C<guestfs_tar_out>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4982
msgid "guestfs_touch"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4984
#, no-wrap
msgid ""
" int guestfs_touch (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4987 ../fish/guestfish-actions.pod:3875
msgid ""
"Touch acts like the L<touch(1)> command.  It can be used to update the "
"timestamps on a file, or, if the file does not exist, to create a new "
"zero-length file."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:4991 ../fish/guestfish-actions.pod:3879
msgid ""
"This command only works on regular files, and will fail on other file types "
"such as directories, symbolic links, block special etc."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:4996
msgid "guestfs_truncate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:4998
#, no-wrap
msgid ""
" int guestfs_truncate (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5001 ../fish/guestfish-actions.pod:3886
msgid ""
"This command truncates C<path> to a zero-length file.  The file must exist "
"already."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5006
msgid "guestfs_truncate_size"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5008
#, no-wrap
msgid ""
" int guestfs_truncate_size (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint64_t size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5012 ../fish/guestfish-actions.pod:3893
msgid ""
"This command truncates C<path> to size C<size> bytes.  The file must exist "
"already."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5015
msgid ""
"If the current file size is less than C<size> then the file is extended to "
"the required size with zero bytes.  This creates a sparse file (ie. disk "
"blocks are not allocated for the file until you write to it).  To create a "
"non-sparse file of zeroes, use C<guestfs_fallocate64> instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5023
msgid "guestfs_tune2fs_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5025
#, no-wrap
msgid ""
" char **guestfs_tune2fs_l (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5028 ../fish/guestfish-actions.pod:3906
msgid ""
"This returns the contents of the ext2, ext3 or ext4 filesystem superblock on "
"C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5031 ../fish/guestfish-actions.pod:3909
msgid ""
"It is the same as running C<tune2fs -l device>.  See L<tune2fs(8)> manpage "
"for more details.  The list of fields returned isn't clearly defined, and "
"depends on both the version of C<tune2fs> that libguestfs was built against, "
"and the filesystem itself."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5042
msgid "guestfs_txz_in"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5044
#, no-wrap
msgid ""
" int guestfs_txz_in (guestfs_h *g,\n"
"\t\tconst char *tarball,\n"
"\t\tconst char *directory);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5048 ../fish/guestfish-actions.pod:3918
msgid ""
"This command uploads and unpacks local file C<tarball> (an I<xz compressed> "
"tar file) into C<directory>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5053
msgid "guestfs_txz_out"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5055
#, no-wrap
msgid ""
" int guestfs_txz_out (guestfs_h *g,\n"
"\t\tconst char *directory,\n"
"\t\tconst char *tarball);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5059 ../fish/guestfish-actions.pod:3927
msgid ""
"This command packs the contents of C<directory> and downloads it to local "
"file C<tarball> (as an xz compressed tar archive)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5064
msgid "guestfs_umask"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5066
#, no-wrap
msgid ""
" int guestfs_umask (guestfs_h *g,\n"
"\t\tint mask);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5069 ../fish/guestfish-actions.pod:3936
msgid ""
"This function sets the mask used for creating new files and device nodes to "
"C<mask & 0777>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5072 ../fish/guestfish-actions.pod:3939
msgid ""
"Typical umask values would be C<022> which creates new files with "
"permissions like \"-rw-r--r--\" or \"-rwxr-xr-x\", and C<002> which creates "
"new files with permissions like \"-rw-rw-r--\" or \"-rwxrwxr-x\"."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5077 ../fish/guestfish-actions.pod:3944
msgid ""
"The default umask is C<022>.  This is important because it means that "
"directories and device nodes will be created with C<0644> or C<0755> mode "
"even if you specify C<0777>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5081
msgid ""
"See also C<guestfs_get_umask>, L<umask(2)>, C<guestfs_mknod>, "
"C<guestfs_mkdir>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5084 ../fish/guestfish-actions.pod:3951
msgid "This call returns the previous umask."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5088
msgid "guestfs_umount"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5090
#, no-wrap
msgid ""
" int guestfs_umount (guestfs_h *g,\n"
"\t\tconst char *pathordevice);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5093 ../fish/guestfish-actions.pod:3959
msgid ""
"This unmounts the given filesystem.  The filesystem may be specified either "
"by its mountpoint (path) or the device which contains the filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5099
msgid "guestfs_umount_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5101
#, no-wrap
msgid ""
" int guestfs_umount_all (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5103 ../fish/guestfish-actions.pod:3969
msgid "This unmounts all mounted filesystems."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5105 ../fish/guestfish-actions.pod:3971
msgid "Some internal mounts are not unmounted by this call."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5109
msgid "guestfs_upload"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5111
#, no-wrap
msgid ""
" int guestfs_upload (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *remotefilename);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5115 ../src/guestfs-actions.pod:5131 ../fish/guestfish-actions.pod:3977 ../fish/guestfish-actions.pod:3990
msgid "Upload local file C<filename> to C<remotefilename> on the filesystem."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5120
msgid "See also C<guestfs_download>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5124
msgid "guestfs_upload_offset"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5126
#, no-wrap
msgid ""
" int guestfs_upload_offset (guestfs_h *g,\n"
"\t\tconst char *filename,\n"
"\t\tconst char *remotefilename,\n"
"\t\tint64_t offset);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5134 ../fish/guestfish-actions.pod:3993
msgid ""
"C<remotefilename> is overwritten starting at the byte C<offset> specified.  "
"The intention is to overwrite parts of existing files or devices, although "
"if a non-existant file is specified then it is created with a \"hole\" "
"before C<offset>.  The size of the data written is implicit in the size of "
"the source C<filename>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5141
msgid ""
"Note that there is no limit on the amount of data that can be uploaded with "
"this call, unlike with C<guestfs_pwrite>, and this call always writes the "
"full amount unless an error occurs."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5146
msgid "See also C<guestfs_upload>, C<guestfs_pwrite>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5150
msgid "guestfs_utimens"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5152
#, no-wrap
msgid ""
" int guestfs_utimens (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tint64_t atsecs,\n"
"\t\tint64_t atnsecs,\n"
"\t\tint64_t mtsecs,\n"
"\t\tint64_t mtnsecs);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5159 ../fish/guestfish-actions.pod:4013
msgid "This command sets the timestamps of a file with nanosecond precision."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5162 ../fish/guestfish-actions.pod:4016
msgid ""
"C<atsecs, atnsecs> are the last access time (atime) in secs and nanoseconds "
"from the epoch."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5165 ../fish/guestfish-actions.pod:4019
msgid ""
"C<mtsecs, mtnsecs> are the last modification time (mtime) in secs and "
"nanoseconds from the epoch."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5168 ../fish/guestfish-actions.pod:4022
msgid ""
"If the C<*nsecs> field contains the special value C<-1> then the "
"corresponding timestamp is set to the current time.  (The C<*secs> field is "
"ignored in this case)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5172 ../fish/guestfish-actions.pod:4026
msgid ""
"If the C<*nsecs> field contains the special value C<-2> then the "
"corresponding timestamp is left unchanged.  (The C<*secs> field is ignored "
"in this case)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5178 ../src/guestfs-structs.pod:175
msgid "guestfs_version"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5180
#, no-wrap
msgid ""
" struct guestfs_version *guestfs_version (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5182 ../fish/guestfish-actions.pod:4034
msgid "Return the libguestfs version number that the program is linked against."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5185 ../fish/guestfish-actions.pod:4037
msgid ""
"Note that because of dynamic linking this is not necessarily the version of "
"libguestfs that you compiled against.  You can compile the program, and then "
"at runtime dynamically link against a completely different C<libguestfs.so> "
"library."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5190 ../fish/guestfish-actions.pod:4042
msgid ""
"This call was added in version C<1.0.58>.  In previous versions of "
"libguestfs there was no way to get the version number.  From C code you can "
"use dynamic linker functions to find out if this symbol exists (if it "
"doesn't, then it's an earlier version)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5196 ../fish/guestfish-actions.pod:4048
msgid ""
"The call returns a structure with four elements.  The first three (C<major>, "
"C<minor> and C<release>) are numbers and correspond to the usual version "
"triplet.  The fourth element (C<extra>) is a string and is normally empty, "
"but may be used for distro-specific information."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5202 ../fish/guestfish-actions.pod:4054
msgid "To construct the original version string: C<$major.$minor.$release$extra>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5205 ../fish/guestfish-actions.pod:4057
msgid "See also: L<guestfs(3)/LIBGUESTFS VERSION NUMBERS>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5207
msgid ""
"I<Note:> Don't use this call to test for availability of features.  In "
"enterprise distributions we backport features from later versions into "
"earlier versions, making this an unreliable way to test for features.  Use "
"C<guestfs_available> instead."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5213
msgid ""
"This function returns a C<struct guestfs_version *>, or NULL if there was an "
"error.  I<The caller must call C<guestfs_free_version> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5217
msgid "guestfs_vfs_label"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5219
#, no-wrap
msgid ""
" char *guestfs_vfs_label (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5222 ../fish/guestfish-actions.pod:4069
msgid "This returns the filesystem label of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5225 ../fish/guestfish-actions.pod:4072
msgid "If the filesystem is unlabeled, this returns the empty string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5227
msgid "To find a filesystem from the label, use C<guestfs_findfs_label>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5232
msgid "guestfs_vfs_type"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5234
#, no-wrap
msgid ""
" char *guestfs_vfs_type (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5237 ../fish/guestfish-actions.pod:4080
msgid ""
"This command gets the filesystem type corresponding to the filesystem on "
"C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5240 ../fish/guestfish-actions.pod:4083
msgid ""
"For most filesystems, the result is the name of the Linux VFS module which "
"would be used to mount this filesystem if you mounted it without specifying "
"the filesystem type.  For example a string such as C<ext3> or C<ntfs>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5248
msgid "guestfs_vfs_uuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5250
#, no-wrap
msgid ""
" char *guestfs_vfs_uuid (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5253 ../fish/guestfish-actions.pod:4092
msgid "This returns the filesystem UUID of the filesystem on C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5256 ../fish/guestfish-actions.pod:4095
msgid "If the filesystem does not have a UUID, this returns the empty string."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5258
msgid "To find a filesystem from the UUID, use C<guestfs_findfs_uuid>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5263
msgid "guestfs_vg_activate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5265
#, no-wrap
msgid ""
" int guestfs_vg_activate (guestfs_h *g,\n"
"\t\tint activate,\n"
"\t\tchar *const *volgroups);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5269 ../fish/guestfish-actions.pod:4103
msgid ""
"This command activates or (if C<activate> is false) deactivates all logical "
"volumes in the listed volume groups C<volgroups>.  If activated, then they "
"are made known to the kernel, ie. they appear as C</dev/mapper> devices.  If "
"deactivated, then those devices disappear."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5275 ../fish/guestfish-actions.pod:4109
msgid "This command is the same as running C<vgchange -a y|n volgroups...>"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5277 ../fish/guestfish-actions.pod:4111
msgid ""
"Note that if C<volgroups> is an empty list then B<all> volume groups are "
"activated or deactivated."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5282
msgid "guestfs_vg_activate_all"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5284
#, no-wrap
msgid ""
" int guestfs_vg_activate_all (guestfs_h *g,\n"
"\t\tint activate);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5287 ../fish/guestfish-actions.pod:4118
msgid ""
"This command activates or (if C<activate> is false) deactivates all logical "
"volumes in all volume groups.  If activated, then they are made known to the "
"kernel, ie. they appear as C</dev/mapper> devices.  If deactivated, then "
"those devices disappear."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5293 ../fish/guestfish-actions.pod:4124
msgid "This command is the same as running C<vgchange -a y|n>"
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5297
msgid "guestfs_vgcreate"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5299
#, no-wrap
msgid ""
" int guestfs_vgcreate (guestfs_h *g,\n"
"\t\tconst char *volgroup,\n"
"\t\tchar *const *physvols);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5303 ../fish/guestfish-actions.pod:4130
msgid ""
"This creates an LVM volume group called C<volgroup> from the non-empty list "
"of physical volumes C<physvols>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5308
msgid "guestfs_vglvuuids"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5310
#, no-wrap
msgid ""
" char **guestfs_vglvuuids (guestfs_h *g,\n"
"\t\tconst char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5313 ../fish/guestfish-actions.pod:4137
msgid ""
"Given a VG called C<vgname>, this returns the UUIDs of all the logical "
"volumes created in this volume group."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5316
msgid ""
"You can use this along with C<guestfs_lvs> and C<guestfs_lvuuid> calls to "
"associate logical volumes and volume groups."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5319
msgid "See also C<guestfs_vgpvuuids>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5325
msgid "guestfs_vgpvuuids"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5327
#, no-wrap
msgid ""
" char **guestfs_vgpvuuids (guestfs_h *g,\n"
"\t\tconst char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5330 ../fish/guestfish-actions.pod:4149
msgid ""
"Given a VG called C<vgname>, this returns the UUIDs of all the physical "
"volumes that this volume group resides on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5333
msgid ""
"You can use this along with C<guestfs_pvs> and C<guestfs_pvuuid> calls to "
"associate physical volumes and volume groups."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5336
msgid "See also C<guestfs_vglvuuids>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5342
msgid "guestfs_vgremove"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5344
#, no-wrap
msgid ""
" int guestfs_vgremove (guestfs_h *g,\n"
"\t\tconst char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5347 ../fish/guestfish-actions.pod:4161
msgid "Remove an LVM volume group C<vgname>, (for example C<VG>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5349 ../fish/guestfish-actions.pod:4163
msgid "This also forcibly removes all logical volumes in the volume group (if any)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5354
msgid "guestfs_vgrename"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5356
#, no-wrap
msgid ""
" int guestfs_vgrename (guestfs_h *g,\n"
"\t\tconst char *volgroup,\n"
"\t\tconst char *newvolgroup);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5360 ../fish/guestfish-actions.pod:4170
msgid "Rename a volume group C<volgroup> with the new name C<newvolgroup>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5364
msgid "guestfs_vgs"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5366
#, no-wrap
msgid ""
" char **guestfs_vgs (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5368 ../fish/guestfish-actions.pod:4176
msgid ""
"List all the volumes groups detected.  This is the equivalent of the "
"L<vgs(8)> command."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5371 ../fish/guestfish-actions.pod:4179
msgid ""
"This returns a list of just the volume group names that were detected "
"(eg. C<VolGroup00>)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5374
msgid "See also C<guestfs_vgs_full>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5380
msgid "guestfs_vgs_full"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5382
#, no-wrap
msgid ""
" struct guestfs_lvm_vg_list *guestfs_vgs_full (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5384 ../fish/guestfish-actions.pod:4188
msgid ""
"List all the volumes groups detected.  This is the equivalent of the "
"L<vgs(8)> command.  The \"full\" version includes all fields."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5387
msgid ""
"This function returns a C<struct guestfs_lvm_vg_list *> (see "
"E<lt>guestfs-structs.hE<gt>), or NULL if there was an error.  I<The caller "
"must call C<guestfs_free_lvm_vg_list> after use>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5392
msgid "guestfs_vgscan"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5394
#, no-wrap
msgid ""
" int guestfs_vgscan (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5396 ../fish/guestfish-actions.pod:4195
msgid ""
"This rescans all block devices and rebuilds the list of LVM physical "
"volumes, volume groups and logical volumes."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5401
msgid "guestfs_vguuid"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5403
#, no-wrap
msgid ""
" char *guestfs_vguuid (guestfs_h *g,\n"
"\t\tconst char *vgname);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5406 ../fish/guestfish-actions.pod:4202
msgid "This command returns the UUID of the LVM VG named C<vgname>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5411
msgid "guestfs_wait_ready"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5413
#, no-wrap
msgid ""
" int guestfs_wait_ready (guestfs_h *g);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5415
msgid "This function is a no op."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5417
msgid ""
"In versions of the API E<lt> 1.0.71 you had to call this function just after "
"calling C<guestfs_launch> to wait for the launch to complete.  However this "
"is no longer necessary because C<guestfs_launch> now does the waiting."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5422
msgid ""
"If you see any calls to this function in code then you can just remove them, "
"unless you want to retain compatibility with older versions of the API."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5428
msgid "guestfs_wc_c"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5430
#, no-wrap
msgid ""
" int guestfs_wc_c (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5433 ../fish/guestfish-actions.pod:4208
msgid ""
"This command counts the characters in a file, using the C<wc -c> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5438
msgid "guestfs_wc_l"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5440
#, no-wrap
msgid ""
" int guestfs_wc_l (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5443 ../fish/guestfish-actions.pod:4215
msgid ""
"This command counts the lines in a file, using the C<wc -l> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5448
msgid "guestfs_wc_w"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5450
#, no-wrap
msgid ""
" int guestfs_wc_w (guestfs_h *g,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5453 ../fish/guestfish-actions.pod:4222
msgid ""
"This command counts the words in a file, using the C<wc -w> external "
"command."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5458
msgid "guestfs_write"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5460
#, no-wrap
msgid ""
" int guestfs_write (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tconst char *content,\n"
"\t\tsize_t content_size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5465 ../fish/guestfish-actions.pod:4229
msgid ""
"This call creates a file called C<path>.  The content of the file is the "
"string C<content> (which can contain any 8 bit data)."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5473
msgid "guestfs_write_file"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5475
#, no-wrap
msgid ""
" int guestfs_write_file (guestfs_h *g,\n"
"\t\tconst char *path,\n"
"\t\tconst char *content,\n"
"\t\tint size);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5480 ../fish/guestfish-actions.pod:4239
msgid ""
"This call creates a file called C<path>.  The contents of the file is the "
"string C<content> (which can contain any 8 bit data), with length C<size>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5484 ../fish/guestfish-actions.pod:4243
msgid ""
"As a special case, if C<size> is C<0> then the length is calculated using "
"C<strlen> (so in this case the content cannot contain embedded ASCII NULs)."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5488 ../fish/guestfish-actions.pod:4247
msgid ""
"I<NB.> Owing to a bug, writing content containing ASCII NUL characters does "
"I<not> work, even if the length is specified."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5496 ../fish/guestfish-actions.pod:4253
msgid "This function is deprecated.  In new code, use the C<write> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5503
msgid "guestfs_zegrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5505
#, no-wrap
msgid ""
" char **guestfs_zegrep (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5509 ../fish/guestfish-actions.pod:4264
msgid "This calls the external C<zegrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5519
msgid "guestfs_zegrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5521
#, no-wrap
msgid ""
" char **guestfs_zegrepi (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5525 ../fish/guestfish-actions.pod:4274
msgid "This calls the external C<zegrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5535
msgid "guestfs_zero"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5537
#, no-wrap
msgid ""
" int guestfs_zero (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5540 ../fish/guestfish-actions.pod:4284
msgid "This command writes zeroes over the first few blocks of C<device>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5542 ../fish/guestfish-actions.pod:4286
msgid ""
"How many blocks are zeroed isn't specified (but it's I<not> enough to "
"securely wipe the device).  It should be sufficient to remove any partition "
"tables, filesystem superblocks and so on."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5546
msgid "See also: C<guestfs_zero_device>, C<guestfs_scrub_device>."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5555
msgid "guestfs_zero_device"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5557
#, no-wrap
msgid ""
" int guestfs_zero_device (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5560
msgid ""
"This command writes zeroes over the entire C<device>.  Compare with "
"C<guestfs_zero> which just zeroes the first few blocks of a device."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5574
msgid "guestfs_zerofree"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5576
#, no-wrap
msgid ""
" int guestfs_zerofree (guestfs_h *g,\n"
"\t\tconst char *device);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5579 ../fish/guestfish-actions.pod:4307
msgid ""
"This runs the I<zerofree> program on C<device>.  This program claims to zero "
"unused inodes and disk blocks on an ext2/3 filesystem, thus making it "
"possible to compress the filesystem more effectively."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5584 ../fish/guestfish-actions.pod:4312
msgid "You should B<not> run this program if the filesystem is mounted."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5587 ../fish/guestfish-actions.pod:4315
msgid ""
"It is possible that using this program can damage the filesystem or data on "
"the filesystem."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5592
msgid "guestfs_zfgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5594
#, no-wrap
msgid ""
" char **guestfs_zfgrep (guestfs_h *g,\n"
"\t\tconst char *pattern,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5598 ../fish/guestfish-actions.pod:4322
msgid "This calls the external C<zfgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5608
msgid "guestfs_zfgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5610
#, no-wrap
msgid ""
" char **guestfs_zfgrepi (guestfs_h *g,\n"
"\t\tconst char *pattern,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5614 ../fish/guestfish-actions.pod:4332
msgid "This calls the external C<zfgrep -i> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5624
msgid "guestfs_zfile"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5626
#, no-wrap
msgid ""
" char *guestfs_zfile (guestfs_h *g,\n"
"\t\tconst char *meth,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5630 ../fish/guestfish-actions.pod:4342
msgid "This command runs C<file> after first decompressing C<path> using C<method>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5633 ../fish/guestfish-actions.pod:4345
msgid "C<method> must be one of C<gzip>, C<compress> or C<bzip2>."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5635
msgid ""
"Since 1.0.63, use C<guestfs_file> instead which can now process compressed "
"files."
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5641 ../fish/guestfish-actions.pod:4350
msgid "This function is deprecated.  In new code, use the C<file> call instead."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5648
msgid "guestfs_zgrep"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5650
#, no-wrap
msgid ""
" char **guestfs_zgrep (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5654 ../fish/guestfish-actions.pod:4361
msgid "This calls the external C<zgrep> program and returns the matching lines."
msgstr ""

# type: =head2
#: ../src/guestfs-actions.pod:5664
msgid "guestfs_zgrepi"
msgstr ""

# type: verbatim
#: ../src/guestfs-actions.pod:5666
#, no-wrap
msgid ""
" char **guestfs_zgrepi (guestfs_h *g,\n"
"\t\tconst char *regex,\n"
"\t\tconst char *path);\n"
"\n"
msgstr ""

# type: textblock
#: ../src/guestfs-actions.pod:5670 ../fish/guestfish-actions.pod:4371
msgid "This calls the external C<zgrep -i> program and returns the matching lines."
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:3
msgid "B<augeas>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:5
msgid ""
"The following functions: L</guestfs_aug_clear> L</guestfs_aug_close> "
"L</guestfs_aug_defnode> L</guestfs_aug_defvar> L</guestfs_aug_get> "
"L</guestfs_aug_init> L</guestfs_aug_insert> L</guestfs_aug_load> "
"L</guestfs_aug_ls> L</guestfs_aug_match> L</guestfs_aug_mv> "
"L</guestfs_aug_rm> L</guestfs_aug_save> L</guestfs_aug_set>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:21
msgid "B<inotify>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:23
msgid ""
"The following functions: L</guestfs_inotify_add_watch> "
"L</guestfs_inotify_close> L</guestfs_inotify_files> L</guestfs_inotify_init> "
"L</guestfs_inotify_read> L</guestfs_inotify_rm_watch>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:31
msgid "B<linuxfsuuid>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:33
msgid ""
"The following functions: L</guestfs_mke2fs_JU> L</guestfs_mke2journal_U> "
"L</guestfs_mkswap_U> L</guestfs_swapoff_uuid> L</guestfs_swapon_uuid>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:40
msgid "B<linuxmodules>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:42
msgid "The following functions: L</guestfs_modprobe>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:45
msgid "B<linuxxattrs>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:47
msgid ""
"The following functions: L</guestfs_getxattrs> L</guestfs_lgetxattrs> "
"L</guestfs_lremovexattr> L</guestfs_lsetxattr> L</guestfs_lxattrlist> "
"L</guestfs_removexattr> L</guestfs_setxattr>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:56
msgid "B<luks>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:58
msgid ""
"The following functions: L</guestfs_luks_add_key> L</guestfs_luks_close> "
"L</guestfs_luks_format> L</guestfs_luks_format_cipher> "
"L</guestfs_luks_kill_slot> L</guestfs_luks_open> L</guestfs_luks_open_ro>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:67
msgid "B<lvm2>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:69
msgid ""
"The following functions: L</guestfs_is_lv> L</guestfs_lvcreate> "
"L</guestfs_lvm_remove_all> L</guestfs_lvm_set_filter> L</guestfs_lvremove> "
"L</guestfs_lvresize> L</guestfs_lvresize_free> L</guestfs_lvs> "
"L</guestfs_lvs_full> L</guestfs_pvcreate> L</guestfs_pvremove> "
"L</guestfs_pvresize> L</guestfs_pvresize_size> L</guestfs_pvs> "
"L</guestfs_pvs_full> L</guestfs_vg_activate> L</guestfs_vg_activate_all> "
"L</guestfs_vgcreate> L</guestfs_vgremove> L</guestfs_vgs> "
"L</guestfs_vgs_full>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:92
msgid "B<mknod>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:94
msgid ""
"The following functions: L</guestfs_mkfifo> L</guestfs_mknod> "
"L</guestfs_mknod_b> L</guestfs_mknod_c>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:100
msgid "B<ntfs3g>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:102
msgid "The following functions: L</guestfs_ntfs_3g_probe>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:105
msgid "B<ntfsprogs>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:107
msgid "The following functions: L</guestfs_ntfsresize> L</guestfs_ntfsresize_size>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:111
msgid "B<realpath>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:113
msgid "The following functions: L</guestfs_realpath>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:116
msgid "B<scrub>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:118
msgid ""
"The following functions: L</guestfs_scrub_device> L</guestfs_scrub_file> "
"L</guestfs_scrub_freespace>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:123
msgid "B<selinux>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:125
msgid "The following functions: L</guestfs_getcon> L</guestfs_setcon>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:129
msgid "B<xz>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:131
msgid "The following functions: L</guestfs_txz_in> L</guestfs_txz_out>"
msgstr ""

# type: =item
#: ../src/guestfs-availability.pod:135
msgid "B<zerofree>"
msgstr ""

# type: textblock
#: ../src/guestfs-availability.pod:137
msgid "The following functions: L</guestfs_zerofree>"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:1
msgid "guestfs_int_bool"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:3
#, no-wrap
msgid ""
" struct guestfs_int_bool {\n"
"   int32_t i;\n"
"   int32_t b;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:8
#, no-wrap
msgid ""
" struct guestfs_int_bool_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_int_bool *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:13
#, no-wrap
msgid ""
" void guestfs_free_int_bool (struct guestfs_free_int_bool *);\n"
" void guestfs_free_int_bool_list (struct guestfs_free_int_bool_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:16
msgid "guestfs_lvm_pv"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:18
#, no-wrap
msgid ""
" struct guestfs_lvm_pv {\n"
"   char *pv_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char pv_uuid[32];\n"
"   char *pv_fmt;\n"
"   uint64_t pv_size;\n"
"   uint64_t dev_size;\n"
"   uint64_t pv_free;\n"
"   uint64_t pv_used;\n"
"   char *pv_attr;\n"
"   int64_t pv_pe_count;\n"
"   int64_t pv_pe_alloc_count;\n"
"   char *pv_tags;\n"
"   uint64_t pe_start;\n"
"   int64_t pv_mda_count;\n"
"   uint64_t pv_mda_free;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:36
#, no-wrap
msgid ""
" struct guestfs_lvm_pv_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_pv *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:41
#, no-wrap
msgid ""
" void guestfs_free_lvm_pv (struct guestfs_free_lvm_pv *);\n"
" void guestfs_free_lvm_pv_list (struct guestfs_free_lvm_pv_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:44
msgid "guestfs_lvm_vg"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:46
#, no-wrap
msgid ""
" struct guestfs_lvm_vg {\n"
"   char *vg_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char vg_uuid[32];\n"
"   char *vg_fmt;\n"
"   char *vg_attr;\n"
"   uint64_t vg_size;\n"
"   uint64_t vg_free;\n"
"   char *vg_sysid;\n"
"   uint64_t vg_extent_size;\n"
"   int64_t vg_extent_count;\n"
"   int64_t vg_free_count;\n"
"   int64_t max_lv;\n"
"   int64_t max_pv;\n"
"   int64_t pv_count;\n"
"   int64_t lv_count;\n"
"   int64_t snap_count;\n"
"   int64_t vg_seqno;\n"
"   char *vg_tags;\n"
"   int64_t vg_mda_count;\n"
"   uint64_t vg_mda_free;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:69
#, no-wrap
msgid ""
" struct guestfs_lvm_vg_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_vg *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:74
#, no-wrap
msgid ""
" void guestfs_free_lvm_vg (struct guestfs_free_lvm_vg *);\n"
" void guestfs_free_lvm_vg_list (struct guestfs_free_lvm_vg_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:77
msgid "guestfs_lvm_lv"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:79
#, no-wrap
msgid ""
" struct guestfs_lvm_lv {\n"
"   char *lv_name;\n"
"   /* The next field is NOT nul-terminated, be careful when printing it: "
"*/\n"
"   char lv_uuid[32];\n"
"   char *lv_attr;\n"
"   int64_t lv_major;\n"
"   int64_t lv_minor;\n"
"   int64_t lv_kernel_major;\n"
"   int64_t lv_kernel_minor;\n"
"   uint64_t lv_size;\n"
"   int64_t seg_count;\n"
"   char *origin;\n"
"   /* The next field is [0..100] or -1 meaning 'not present': */\n"
"   float snap_percent;\n"
"   /* The next field is [0..100] or -1 meaning 'not present': */\n"
"   float copy_percent;\n"
"   char *move_pv;\n"
"   char *lv_tags;\n"
"   char *mirror_log;\n"
"   char *modules;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:101
#, no-wrap
msgid ""
" struct guestfs_lvm_lv_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_lvm_lv *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:106
#, no-wrap
msgid ""
" void guestfs_free_lvm_lv (struct guestfs_free_lvm_lv *);\n"
" void guestfs_free_lvm_lv_list (struct guestfs_free_lvm_lv_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:111
#, no-wrap
msgid ""
" struct guestfs_stat {\n"
"   int64_t dev;\n"
"   int64_t ino;\n"
"   int64_t mode;\n"
"   int64_t nlink;\n"
"   int64_t uid;\n"
"   int64_t gid;\n"
"   int64_t rdev;\n"
"   int64_t size;\n"
"   int64_t blksize;\n"
"   int64_t blocks;\n"
"   int64_t atime;\n"
"   int64_t mtime;\n"
"   int64_t ctime;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:127
#, no-wrap
msgid ""
" struct guestfs_stat_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_stat *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:132
#, no-wrap
msgid ""
" void guestfs_free_stat (struct guestfs_free_stat *);\n"
" void guestfs_free_stat_list (struct guestfs_free_stat_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:137
#, no-wrap
msgid ""
" struct guestfs_statvfs {\n"
"   int64_t bsize;\n"
"   int64_t frsize;\n"
"   int64_t blocks;\n"
"   int64_t bfree;\n"
"   int64_t bavail;\n"
"   int64_t files;\n"
"   int64_t ffree;\n"
"   int64_t favail;\n"
"   int64_t fsid;\n"
"   int64_t flag;\n"
"   int64_t namemax;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:151
#, no-wrap
msgid ""
" struct guestfs_statvfs_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_statvfs *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:156
#, no-wrap
msgid ""
" void guestfs_free_statvfs (struct guestfs_free_statvfs *);\n"
" void guestfs_free_statvfs_list (struct guestfs_free_statvfs_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:159
msgid "guestfs_dirent"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:161
#, no-wrap
msgid ""
" struct guestfs_dirent {\n"
"   int64_t ino;\n"
"   char ftyp;\n"
"   char *name;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:167
#, no-wrap
msgid ""
" struct guestfs_dirent_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_dirent *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:172
#, no-wrap
msgid ""
" void guestfs_free_dirent (struct guestfs_free_dirent *);\n"
" void guestfs_free_dirent_list (struct guestfs_free_dirent_list *);\n"
"\n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:177
#, no-wrap
msgid ""
" struct guestfs_version {\n"
"   int64_t major;\n"
"   int64_t minor;\n"
"   int64_t release;\n"
"   char *extra;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:184
#, no-wrap
msgid ""
" struct guestfs_version_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_version *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:189
#, no-wrap
msgid ""
" void guestfs_free_version (struct guestfs_free_version *);\n"
" void guestfs_free_version_list (struct guestfs_free_version_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:192
msgid "guestfs_xattr"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:194
#, no-wrap
msgid ""
" struct guestfs_xattr {\n"
"   char *attrname;\n"
"   /* The next two fields describe a byte array. */\n"
"   uint32_t attrval_len;\n"
"   char *attrval;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:201
#, no-wrap
msgid ""
" struct guestfs_xattr_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_xattr *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:206
#, no-wrap
msgid ""
" void guestfs_free_xattr (struct guestfs_free_xattr *);\n"
" void guestfs_free_xattr_list (struct guestfs_free_xattr_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:209
msgid "guestfs_inotify_event"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:211
#, no-wrap
msgid ""
" struct guestfs_inotify_event {\n"
"   int64_t in_wd;\n"
"   uint32_t in_mask;\n"
"   uint32_t in_cookie;\n"
"   char *in_name;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:218
#, no-wrap
msgid ""
" struct guestfs_inotify_event_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_inotify_event *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:223
#, no-wrap
msgid ""
" void guestfs_free_inotify_event (struct guestfs_free_inotify_event *);\n"
" void guestfs_free_inotify_event_list (struct "
"guestfs_free_inotify_event_list *);\n"
"\n"
msgstr ""

# type: =head2
#: ../src/guestfs-structs.pod:226
msgid "guestfs_partition"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:228
#, no-wrap
msgid ""
" struct guestfs_partition {\n"
"   int32_t part_num;\n"
"   uint64_t part_start;\n"
"   uint64_t part_end;\n"
"   uint64_t part_size;\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:235
#, no-wrap
msgid ""
" struct guestfs_partition_list {\n"
"   uint32_t len; /* Number of elements in list. */\n"
"   struct guestfs_partition *val; /* Elements. */\n"
" };\n"
" \n"
msgstr ""

# type: verbatim
#: ../src/guestfs-structs.pod:240
#, no-wrap
msgid ""
" void guestfs_free_partition (struct guestfs_free_partition *);\n"
" void guestfs_free_partition_list (struct guestfs_free_partition_list *);\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:5
msgid "guestfish - the libguestfs Filesystem Interactive SHell"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:9
#, no-wrap
msgid ""
" guestfish [--options] [commands]\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:11
#, no-wrap
msgid ""
" guestfish\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:13
#, no-wrap
msgid ""
" guestfish -a disk.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:15
#, no-wrap
msgid ""
" guestfish -a disk.img -m dev[:mountpoint]\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:17
#, no-wrap
msgid ""
" guestfish -d libvirt-domain\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:19
#, no-wrap
msgid ""
" guestfish -a disk.img -i\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:21
#, no-wrap
msgid ""
" guestfish -d libvirt-domain -i\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:23 ../fuse/guestmount.pod:11 ../tools/virt-edit.pl:45 ../tools/virt-win-reg.pl:52 ../tools/virt-tar.pl:60 ../tools/virt-rescue.pl:41
msgid "WARNING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:25
msgid ""
"Using guestfish in read/write mode on live virtual machines can be "
"dangerous, potentially causing disk corruption.  Use the I<--ro> (read-only) "
"option to use guestfish safely if the disk image or virtual machine might be "
"live."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:32
msgid ""
"Guestfish is a shell and command-line tool for examining and modifying "
"virtual machine filesystems.  It uses libguestfs and exposes all of the "
"functionality of the guestfs API, see L<guestfs(3)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:36
msgid ""
"Guestfish gives you structured access to the libguestfs API, from shell "
"scripts or the command line or interactively.  If you want to rescue a "
"broken virtual machine image, you should look at the L<virt-rescue(1)> "
"command."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:41 ../fish/guestfish.pod:759 ../fuse/guestmount.pod:35 ../tools/virt-edit.pl:59 ../tools/virt-resize.pl:66 ../tools/virt-cat.pl:51 ../tools/virt-tar.pl:46
msgid "EXAMPLES"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:43
msgid "As an interactive shell"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:45
#, no-wrap
msgid ""
" $ guestfish\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:47
#, no-wrap
msgid ""
" Welcome to guestfish, the libguestfs filesystem interactive shell for\n"
" editing virtual machine filesystems.\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:50
#, no-wrap
msgid ""
" Type: 'help' for a list of commands\n"
"       'man' to read the manual\n"
"       'quit' to quit the shell\n"
" \n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:54
#, no-wrap
msgid ""
" ><fs> add-ro disk.img\n"
" ><fs> run\n"
" ><fs> list-filesystems\n"
" /dev/sda1: ext4\n"
" /dev/vg_guest/lv_root: ext4\n"
" /dev/vg_guest/lv_swap: swap\n"
" ><fs> mount /dev/vg_guest/lv_root /\n"
" ><fs> cat /etc/fstab\n"
" # /etc/fstab\n"
" # Created by anaconda\n"
" [...]\n"
" ><fs> exit\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:67
msgid "From shell scripts"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:69
msgid "Create a new C</etc/motd> file in a guest or disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:71
#, no-wrap
msgid ""
" guestfish <<_EOF_\n"
" add disk.img\n"
" run\n"
" mount /dev/vg_guest/lv_root /\n"
" write /etc/motd \"Welcome, new users\"\n"
" _EOF_\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:78
msgid "List the LVM logical volumes in a disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:80
#, no-wrap
msgid ""
" guestfish -a disk.img --ro <<_EOF_\n"
" run\n"
" lvs\n"
" _EOF_\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:85
msgid "List all the filesystems in a disk image:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:87
#, no-wrap
msgid ""
" guestfish -a disk.img --ro <<_EOF_\n"
" run\n"
" list-filesystems\n"
" _EOF_\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:92
msgid "On one command line"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:94
msgid "Update C</etc/resolv.conf> in a guest:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:96
#, no-wrap
msgid ""
" guestfish \\\n"
"   add disk.img : run : mount /dev/vg_guest/lv_root / : \\\n"
"   write /etc/resolv.conf \"nameserver 1.2.3.4\"\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:100
msgid "Edit C</boot/grub/grub.conf> interactively:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:102
#, no-wrap
msgid ""
" guestfish --add disk.img \\\n"
"   --mount /dev/vg_guest/lv_root \\\n"
"   --mount /dev/sda1:/boot \\\n"
"   edit /boot/grub/grub.conf\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:107
msgid "Mount disks automatically"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:109
msgid ""
"Use the I<-i> option to automatically mount the disks from a virtual "
"machine:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:112
#, no-wrap
msgid ""
" guestfish --ro -a disk.img -i cat /etc/group\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:114
#, no-wrap
msgid ""
" guestfish --ro -d libvirt-domain -i cat /etc/group\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:116
msgid "Another way to edit C</boot/grub/grub.conf> interactively is:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:118
#, no-wrap
msgid ""
" guestfish -a disk.img -i edit /boot/grub/grub.conf\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:120
msgid "As a script interpreter"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:122
msgid "Create a 100MB disk containing an ext2-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:124
#, no-wrap
msgid ""
" #!/usr/bin/guestfish -f\n"
" sparse test1.img 100M\n"
" run\n"
" part-disk /dev/sda mbr\n"
" mkfs ext2 /dev/sda1\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:130
msgid "Start with a prepared disk"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:132
msgid ""
"An alternate way to create a 100MB disk called C<test1.img> containing a "
"single ext2-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:135
#, no-wrap
msgid ""
" guestfish -N fs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:137
msgid "To list what is available do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:139 ../fish/guestfish.pod:750
#, no-wrap
msgid ""
" guestfish -N help | less\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:141
msgid "Remote control"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:143
#, no-wrap
msgid ""
" eval `guestfish --listen`\n"
" guestfish --remote add-ro disk.img\n"
" guestfish --remote run\n"
" guestfish --remote lvs\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:148 ../test-tool/libguestfs-test-tool.pod:37 ../fuse/guestmount.pod:70 ../inspector/virt-inspector.pl:75 ../tools/virt-edit.pl:73 ../tools/virt-win-reg.pl:172 ../tools/virt-df.pl:71 ../tools/virt-ls.pl:79 ../tools/virt-resize.pl:257 ../tools/virt-list-filesystems.pl:50 ../tools/virt-cat.pl:80 ../tools/virt-tar.pl:99 ../tools/virt-rescue.pl:103 ../tools/virt-make-fs.pl:153 ../tools/virt-list-partitions.pl:51
msgid "OPTIONS"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:152 ../fuse/guestmount.pod:94 ../inspector/virt-inspector.pl:83 ../tools/virt-edit.pl:81 ../tools/virt-win-reg.pl:180 ../tools/virt-df.pl:79 ../tools/virt-ls.pl:87 ../tools/virt-resize.pl:265 ../tools/virt-list-filesystems.pl:58 ../tools/virt-cat.pl:88 ../tools/virt-tar.pl:107 ../tools/virt-rescue.pl:111 ../tools/virt-make-fs.pl:161 ../tools/virt-list-partitions.pl:59
msgid "B<--help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:154
msgid "Displays general help on options."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:156
msgid "B<-h> | B<--cmd-help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:158
msgid "Lists all available guestfish commands."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:160
msgid "B<-h cmd> | B<--cmd-help cmd>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:162
msgid "Displays detailed help on a single command C<cmd>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:164 ../fuse/guestmount.pod:74
msgid "B<-a image> | B<--add image>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:166
msgid "Add a block device or virtual machine image to the shell."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:168
msgid "B<-c URI> | B<--connect URI>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:170
msgid ""
"When used in conjunction with the I<-d> option, this specifies the libvirt "
"URI to use.  The default is to use the default libvirt connection."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:174
msgid "B<-d libvirt-domain> | B<--domain libvirt-domain>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:176
msgid ""
"Add disks from the named libvirt domain.  If the I<--ro> option is also "
"used, then any libvirt domain can be used.  However in write mode, only "
"libvirt domains which are shut down can be named here."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:180
msgid "B<-D> | B<--no-dest-paths>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:182
msgid ""
"Don't tab-complete paths on the guest filesystem.  It is useful to be able "
"to hit the tab key to complete paths on the guest filesystem, but this "
"causes extra \"hidden\" guestfs calls to be made, so this option is here to "
"allow this feature to be disabled."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:187
msgid "B<--echo-keys>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:189
msgid ""
"When prompting for keys and passphrases, guestfish normally turns echoing "
"off so you cannot see what you are typing.  If you are not worried about "
"Tempest attacks and there is no one else in the room you can specify this "
"flag to see what you are typing."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:194
msgid "B<-f file> | B<--file file>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:196
msgid "Read commands from C<file>.  To write pure guestfish scripts, use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:199
#, no-wrap
msgid ""
" #!/usr/bin/guestfish -f\n"
"\n"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:201
msgid "B<-i> | B<--inspector>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:203
msgid ""
"Using L<virt-inspector(1)> code, inspect the disks looking for an operating "
"system and mount filesystems as they would be mounted on the real virtual "
"machine."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:207
msgid "Typical usage is either:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:209
#, no-wrap
msgid ""
" guestfish -d myguest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:211
msgid "(for an inactive libvirt domain called I<myguest>), or:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:213
#, no-wrap
msgid ""
" guestfish --ro -d myguest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:215
msgid "(for active domains, readonly), or specify the block device directly:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:217
#, no-wrap
msgid ""
" guestfish -a /dev/Guests/MyGuest -i\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:219
msgid ""
"Note that the command line syntax changed slightly over older versions of "
"guestfish.  You can still use the old syntax:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:222
#, no-wrap
msgid ""
" guestfish [--ro] -i disk.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:224
#, no-wrap
msgid ""
" guestfish [--ro] -i libvirt-domain\n"
"\n"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:226
msgid "B<--keys-from-stdin>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:228
msgid ""
"Read key or passphrase parameters from stdin.  The default is to try to read "
"passphrases from the user by opening C</dev/tty>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:231
msgid "B<--listen>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:233
msgid ""
"Fork into the background and listen for remote commands.  See section "
"L</REMOTE CONTROL GUESTFISH OVER A SOCKET> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:236
msgid "B<-m dev[:mountpoint]> | B<--mount dev[:mountpoint]>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:238
msgid "Mount the named partition or logical volume on the given mountpoint."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:240
msgid "If the mountpoint is omitted, it defaults to C</>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:242
msgid "You have to mount something on C</> before most commands will work."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:244
msgid ""
"If any I<-m> or I<--mount> options are given, the guest is automatically "
"launched."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:247
msgid ""
"If you don't know what filesystems a disk image contains, you can either run "
"guestfish without this option, then list the partitions and LVs available "
"(see L</list-partitions> and L</lvs> commands), or you can use the "
"L<virt-list-filesystems(1)> program."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:252 ../fuse/guestmount.pod:106
msgid "B<-n> | B<--no-sync>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:254
msgid ""
"Disable autosync.  This is enabled by default.  See the discussion of "
"autosync in the L<guestfs(3)> manpage."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:257
msgid "B<-N type> | B<--new type> | B<-N help>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:259
msgid ""
"Prepare a fresh disk image formatted as \"type\".  This is an alternative to "
"the I<-a> option: whereas I<-a> adds an existing disk, I<-N> creates a "
"preformatted disk with a filesystem and adds it.  See L</PREPARED DISK "
"IMAGES> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:264
msgid "B<--progress-bars>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:266
msgid "Enable progress bars, even when guestfish is used non-interactively."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:268
msgid ""
"Progress bars are enabled by default when guestfish is used as an "
"interactive shell."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:271
msgid "B<--no-progress-bars>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:273
msgid "Disable progress bars."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:275
msgid "B<--remote[=pid]>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:277
msgid ""
"Send remote commands to C<$GUESTFISH_PID> or C<pid>.  See section L</REMOTE "
"CONTROL GUESTFISH OVER A SOCKET> below."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:280 ../fuse/guestmount.pod:148
msgid "B<-r> | B<--ro>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:282
msgid ""
"This changes the I<-a> and I<-m> options so that disks are added and mounts "
"are done read-only (see L<guestfs(3)/guestfs_mount_ro>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:285 ../tools/virt-rescue.pl:162
msgid ""
"The option must always be used if the disk image or virtual machine might be "
"running, and is generally recommended in cases where you don't need write "
"access to the disk."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:289
msgid ""
"Note that prepared disk images created with I<-N> are not affected by the "
"I<--ro> option."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:292 ../fuse/guestmount.pod:158 ../tools/virt-rescue.pl:170
msgid "B<--selinux>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:294
msgid "Enable SELinux support for the guest.  See L<guestfs(3)/SELINUX>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:296 ../fuse/guestmount.pod:168
msgid "B<-v> | B<--verbose>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:298
msgid ""
"Enable very verbose messages.  This is particularly useful if you find a "
"bug."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:301 ../fuse/guestmount.pod:172
msgid "B<-V> | B<--version>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:303
msgid "Display the guestfish / libguestfs version number and exit."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:305
msgid "B<-x>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:307
msgid "Echo each command before executing it."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:311
msgid "COMMANDS ON COMMAND LINE"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:313
msgid "Any additional (non-option) arguments are treated as commands to execute."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:316
msgid ""
"Commands to execute should be separated by a colon (C<:>), where the colon "
"is a separate parameter.  Thus:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:319
#, no-wrap
msgid ""
" guestfish cmd [args...] : cmd [args...] : cmd [args...] ...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:321
msgid ""
"If there are no additional arguments, then we enter a shell, either an "
"interactive shell with a prompt (if the input is a terminal) or a "
"non-interactive shell."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:325
msgid ""
"In either command line mode or non-interactive shell, the first command that "
"gives an error causes the whole shell to exit.  In interactive mode (with a "
"prompt) if a command fails, you can continue to enter commands."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:330
msgid "USING launch (OR run)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:332
msgid ""
"As with L<guestfs(3)>, you must first configure your guest by adding disks, "
"then launch it, then mount any disks you need, and finally issue "
"actions/commands.  So the general order of the day is:"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:340
msgid "add or -a/--add"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:344
msgid "launch (aka run)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:348
msgid "mount or -m/--mount"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:352
msgid "any other commands"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:356
msgid ""
"C<run> is a synonym for C<launch>.  You must C<launch> (or C<run>)  your "
"guest before mounting or performing any other commands."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:359
msgid ""
"The only exception is that if any of the I<-i>, I<-m>, I<--mount>, I<-N> or "
"I<--new> options were given then C<run> is done automatically, simply "
"because guestfish can't perform the action you asked for without doing this."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:364
msgid "QUOTING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:366
msgid ""
"You can quote ordinary parameters using either single or double quotes.  For "
"example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:369
#, no-wrap
msgid ""
" add \"file with a space.img\"\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:371
#, no-wrap
msgid ""
" rm '/file name'\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:373
#, no-wrap
msgid ""
" rm '/\"'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:375
msgid ""
"A few commands require a list of strings to be passed.  For these, use a "
"whitespace-separated list, enclosed in quotes.  Strings containing "
"whitespace to be passed through must be enclosed in single quotes.  A "
"literal single quote must be escaped with a backslash."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:380
#, no-wrap
msgid ""
" vgcreate VG \"/dev/sda1 /dev/sdb1\"\n"
" command \"/bin/echo 'foo      bar'\"\n"
" command \"/bin/echo \\'foo\\'\"\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:384
msgid "NUMBERS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:386
msgid "This section applies to all commands which can take integers as parameters."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:389
msgid "SIZE SUFFIX"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:391
msgid ""
"When the command takes a parameter measured in bytes, you can use one of the "
"following suffixes to specify kilobytes, megabytes and larger sizes:"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:397
msgid "B<k> or B<K> or B<KiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:399
msgid "The size in kilobytes (multiplied by 1024)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:401
msgid "B<KB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:403
msgid "The size in SI 1000 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:405
msgid "B<M> or B<MiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:407
msgid "The size in megabytes (multiplied by 1048576)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:409
msgid "B<MB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:411
msgid "The size in SI 1000000 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:413
msgid "B<G> or B<GiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:415
msgid "The size in gigabytes (multiplied by 2**30)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:417
msgid "B<GB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:419
msgid "The size in SI 10**9 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:421
msgid "B<T> or B<TiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:423
msgid "The size in terabytes (multiplied by 2**40)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:425
msgid "B<TB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:427
msgid "The size in SI 10**12 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:429
msgid "B<P> or B<PiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:431
msgid "The size in petabytes (multiplied by 2**50)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:433
msgid "B<PB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:435
msgid "The size in SI 10**15 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:437
msgid "B<E> or B<EiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:439
msgid "The size in exabytes (multiplied by 2**60)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:441
msgid "B<EB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:443
msgid "The size in SI 10**18 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:445
msgid "B<Z> or B<ZiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:447
msgid "The size in zettabytes (multiplied by 2**70)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:449
msgid "B<ZB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:451
msgid "The size in SI 10**21 byte units."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:453
msgid "B<Y> or B<YiB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:455
msgid "The size in yottabytes (multiplied by 2**80)."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:457
msgid "B<YB>"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:459
msgid "The size in SI 10**24 byte units."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:463
msgid "For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:465
#, no-wrap
msgid ""
" truncate-size /file 1G\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:467
msgid "would truncate the file to 1 gigabyte."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:469
msgid ""
"Be careful because a few commands take sizes in kilobytes or megabytes "
"(eg. the parameter to L</memsize> is specified in megabytes already).  "
"Adding a suffix will probably not do what you expect."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:473
msgid "OCTAL AND HEXADECIMAL NUMBERS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:475
msgid ""
"For specifying the radix (base) use the C convention: C<0> to prefix an "
"octal number or C<0x> to prefix a hexadecimal number.  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:478
#, no-wrap
msgid ""
" 1234      decimal number 1234\n"
" 02322     octal number, equivalent to decimal 1234\n"
" 0x4d2     hexadecimal number, equivalent to decimal 1234\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:482
msgid ""
"When using the C<chmod> command, you almost always want to specify an octal "
"number for the mode, and you must prefix it with C<0> (unlike the Unix "
"L<chmod(1)> program):"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:486
#, no-wrap
msgid ""
" chmod 0777 /public  # OK\n"
" chmod 777 /public   # WRONG! This is mode 777 decimal = 01411 octal.\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:489
msgid ""
"Commands that return numbers usually print them in decimal, but some "
"commands print numbers in other radices (eg. C<umask> prints the mode in "
"octal, preceeded by C<0>)."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:493
msgid "WILDCARDS AND GLOBBING"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:495
msgid ""
"Neither guestfish nor the underlying guestfs API performs wildcard expansion "
"(globbing) by default.  So for example the following will not do what you "
"expect:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:499
#, no-wrap
msgid ""
" rm-rf /home/*\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:501
msgid ""
"Assuming you don't have a directory called literally C</home/*> then the "
"above command will return an error."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:504
msgid "To perform wildcard expansion, use the C<glob> command."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:506
#, no-wrap
msgid ""
" glob rm-rf /home/*\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:508
msgid ""
"runs C<rm-rf> on each path that matches (ie. potentially running the command "
"many times), equivalent to:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:511
#, no-wrap
msgid ""
" rm-rf /home/jim\n"
" rm-rf /home/joe\n"
" rm-rf /home/mary\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:515
msgid "C<glob> only works on simple guest paths and not on device names."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:517
msgid ""
"If you have several parameters, each containing a wildcard, then glob will "
"perform a Cartesian product."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:520
msgid "COMMENTS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:522
msgid ""
"Any line which starts with a I<#> character is treated as a comment and "
"ignored.  The I<#> can optionally be preceeded by whitespace, but B<not> by "
"a command.  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:526
#, no-wrap
msgid ""
" # this is a comment\n"
"         # this is a comment\n"
" foo # NOT a comment\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:530
msgid "Blank lines are also ignored."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:532
msgid "RUNNING COMMANDS LOCALLY"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:534
msgid ""
"Any line which starts with a I<!> character is treated as a command sent to "
"the local shell (C</bin/sh> or whatever L<system(3)> uses).  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:538
#, no-wrap
msgid ""
" !mkdir local\n"
" tgz-out /remote local/remote-data.tar.gz\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:541
msgid ""
"will create a directory C<local> on the host, and then export the contents "
"of C</remote> on the mounted filesystem to C<local/remote-data.tar.gz>.  "
"(See C<tgz-out>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:545
msgid ""
"To change the local directory, use the C<lcd> command.  C<!cd> will have no "
"effect, due to the way that subprocesses work in Unix."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:548
msgid "PIPES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:550
msgid ""
"Use C<command E<lt>spaceE<gt> | command> to pipe the output of the first "
"command (a guestfish command) to the second command (any host command).  For "
"example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:554
#, no-wrap
msgid ""
" cat /etc/passwd | awk -F: '$3 == 0 { print }'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:556
msgid ""
"(where C<cat> is the guestfish cat command, but C<awk> is the host awk "
"program).  The above command would list all accounts in the guest filesystem "
"which have UID 0, ie. root accounts including backdoors.  Other examples:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:561
#, no-wrap
msgid ""
" hexdump /bin/ls | head\n"
" list-devices | tail -1\n"
" tgz-out / - | tar ztf -\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:565
msgid ""
"The space before the pipe symbol is required, any space after the pipe "
"symbol is optional.  Everything after the pipe symbol is just passed "
"straight to the host shell, so it can contain redirections, globs and "
"anything else that makes sense on the host side."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:570
msgid ""
"To use a literal argument which begins with a pipe symbol, you have to quote "
"it, eg:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:573
#, no-wrap
msgid ""
" echo \"|\"\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:575
msgid "HOME DIRECTORIES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:577
msgid ""
"If a parameter starts with the character C<~> then the tilde may be expanded "
"as a home directory path (either C<~> for the current user's home directory, "
"or C<~user> for another user)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:581
msgid ""
"Note that home directory expansion happens for users known I<on the host>, "
"not in the guest filesystem."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:584
msgid ""
"To use a literal argument which begins with a tilde, you have to quote it, "
"eg:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:587
#, no-wrap
msgid ""
" echo \"~\"\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:591
msgid ""
"Libguestfs has some support for Linux guests encrypted according to the "
"Linux Unified Key Setup (LUKS) standard, which includes nearly all whole "
"disk encryption systems used by modern Linux guests.  Currently only "
"LVM-on-LUKS is supported."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:596
msgid "Identify encrypted block devices and partitions using L</vfs-type>:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:598
#, no-wrap
msgid ""
" ><fs> vfs-type /dev/sda2\n"
" crypto_LUKS\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:601
msgid ""
"Then open those devices using L</luks-open>.  This creates a device-mapper "
"device called C</dev/mapper/luksdev>."
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:604
#, no-wrap
msgid ""
" ><fs> luks-open /dev/sda2 luksdev\n"
" Enter key or passphrase (\"key\"): <enter the passphrase>\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:607
msgid ""
"Finally you have to tell LVM to scan for volume groups on the newly created "
"mapper device:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:610
#, no-wrap
msgid ""
" vgscan\n"
" vg-activate-all true\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:613
msgid "The logical volume(s) can now be mounted in the usual way."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:615
msgid ""
"Before closing a LUKS device you must unmount any logical volumes on it and "
"deactivate the volume groups by calling C<vg-activate false VG> on each "
"one.  Then you can close the mapper device:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:619
#, no-wrap
msgid ""
" vg-activate false /dev/VG\n"
" luks-close /dev/mapper/luksdev\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:622
msgid "WINDOWS PATHS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:624
msgid ""
"If a path is prefixed with C<win:> then you can use Windows-style paths "
"(with some limitations).  The following commands are equivalent:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:627
#, no-wrap
msgid ""
" file /WINDOWS/system32/config/system.LOG\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:629
#, no-wrap
msgid ""
" file win:/windows/system32/config/system.log\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:631
#, no-wrap
msgid ""
" file win:\\windows\\system32\\config\\system.log\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:633
#, no-wrap
msgid ""
" file WIN:C:\\Windows\\SYSTEM32\\conFIG\\SYSTEM.LOG\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:635
msgid ""
"This syntax implicitly calls C<case-sensitive-path> (q.v.) so it also "
"handles case insensitivity like Windows would.  This only works in argument "
"positions that expect a path."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:639
msgid "UPLOADING AND DOWNLOADING FILES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:641
msgid ""
"For commands such as C<upload>, C<download>, C<tar-in>, C<tar-out> and "
"others which upload from or download to a local file, you can use the "
"special filename C<-> to mean \"from stdin\" or \"to stdout\".  For example:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:645
#, no-wrap
msgid ""
" upload - /foo\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:647
msgid "reads stdin and creates from that a file C</foo> in the disk image, and:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:650
#, no-wrap
msgid ""
" tar-out /etc - | tar tf -\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:652
msgid ""
"writes the tarball to stdout and then pipes that into the external \"tar\" "
"command (see L</PIPES>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:655
msgid ""
"When using C<-> to read from stdin, the input is read up to the end of "
"stdin.  You can also use a special \"heredoc\"-like syntax to read up to "
"some arbitrary end marker:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:659
#, no-wrap
msgid ""
" upload -<<END /foo\n"
" input line 1\n"
" input line 2\n"
" input line 3\n"
" END\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:665
msgid ""
"Any string of characters can be used instead of C<END>.  The end marker must "
"appear on a line of its own, without any preceeding or following characters "
"(not even spaces)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:669
msgid ""
"Note that the C<-E<lt>E<lt>> syntax only applies to parameters used to "
"upload local files (so-called \"FileIn\" parameters in the generator)."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:672
msgid "EXIT ON ERROR BEHAVIOUR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:674
msgid ""
"By default, guestfish will ignore any errors when in interactive mode "
"(ie. taking commands from a human over a tty), and will exit on the first "
"error in non-interactive mode (scripts, commands given on the command line)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:679
msgid ""
"If you prefix a command with a I<-> character, then that command will not "
"cause guestfish to exit, even if that (one) command returns an error."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:683
msgid "REMOTE CONTROL GUESTFISH OVER A SOCKET"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:685
msgid ""
"Guestfish can be remote-controlled over a socket.  This is useful "
"particularly in shell scripts where you want to make several different "
"changes to a filesystem, but you don't want the overhead of starting up a "
"guestfish process each time."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:690
msgid "Start a guestfish server process using:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:692
#, no-wrap
msgid ""
" eval `guestfish --listen`\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:694
msgid "and then send it commands by doing:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:696
#, no-wrap
msgid ""
" guestfish --remote cmd [...]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:698
msgid "To cause the server to exit, send it the exit command:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:700
#, no-wrap
msgid ""
" guestfish --remote exit\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:702
msgid ""
"Note that the server will normally exit if there is an error in a command.  "
"You can change this in the usual way.  See section L</EXIT ON ERROR "
"BEHAVIOUR>."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:706
msgid "CONTROLLING MULTIPLE GUESTFISH PROCESSES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:708
msgid ""
"The C<eval> statement sets the environment variable C<$GUESTFISH_PID>, which "
"is how the I<--remote> option knows where to send the commands.  You can "
"have several guestfish listener processes running using:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:712
#, no-wrap
msgid ""
" eval `guestfish --listen`\n"
" pid1=$GUESTFISH_PID\n"
" eval `guestfish --listen`\n"
" pid2=$GUESTFISH_PID\n"
" ...\n"
" guestfish --remote=$pid1 cmd\n"
" guestfish --remote=$pid2 cmd\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:720
msgid "REMOTE CONTROL DETAILS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:722
msgid ""
"Remote control happens over a Unix domain socket called "
"C</tmp/.guestfish-$UID/socket-$PID>, where C<$UID> is the effective user ID "
"of the process, and C<$PID> is the process ID of the server."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:726
msgid "Guestfish client and server versions must match exactly."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:728
msgid "PREPARED DISK IMAGES"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:730
msgid ""
"Use the I<-N type> or I<--new type> parameter to select one of a set of "
"preformatted disk images that guestfish can make for you to save typing.  "
"This is particularly useful for testing purposes.  This option is used "
"instead of the I<-a> option, and like I<-a> can appear multiple times (and "
"can be mixed with I<-a>)."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:736
msgid ""
"The new disk is called C<test1.img> for the first I<-N>, C<test2.img> for "
"the second and so on.  Existing files in the current directory are "
"I<overwritten>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:740
msgid ""
"The type briefly describes how the disk should be sized, partitioned, how "
"filesystem(s) should be created, and how content should be added.  "
"Optionally the type can be followed by extra parameters, separated by C<:> "
"(colon) characters.  For example, I<-N fs> creates a default 100MB, "
"sparsely-allocated disk, containing a single partition, with the partition "
"formatted as ext2.  I<-N fs:ext4:1G> is the same, but for an ext4 filesystem "
"on a 1GB disk instead."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:748
msgid "To list the available types and any extra parameters they take, run:"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:752
msgid ""
"Note that the prepared filesystem is not mounted.  You would usually have to "
"use the C<mount /dev/sda1 /> command or add the I<-m /dev/sda1> option."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:756
msgid ""
"If any I<-N> or I<--new> options are given, the guest is automatically "
"launched."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:761
msgid "Create a 100MB disk with an ext4-formatted partition:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:763
#, no-wrap
msgid ""
" guestfish -N fs:ext4\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:765
msgid "Create a 32MB disk with a VFAT-formatted partition, and mount it:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:767
#, no-wrap
msgid ""
" guestfish -N fs:vfat:32M -m /dev/sda1\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:769
msgid "Create a blank 200MB disk:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:771
#, no-wrap
msgid ""
" guestfish -N disk:200M\n"
"\n"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:773
msgid "PROGRESS BARS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:775
msgid ""
"Some (not all) long-running commands send progress notification messages as "
"they are running.  Guestfish turns these messages into progress bars."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:779
msgid ""
"When a command that supports progress bars takes longer than two seconds to "
"run, and if progress bars are enabled, then you will see one appearing below "
"the command:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:783
#, no-wrap
msgid ""
" ><fs> copy-size /large-file /another-file 2048M\n"
" / 10% [#####-----------------------------------------] 00:30\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:786
msgid ""
"The spinner on the left hand side moves round once for every progress "
"notification received from the backend.  This is a (reasonably) golden "
"assurance that the command is \"doing something\" even if the progress bar "
"is not moving, because the command is able to send the progress "
"notifications.  When the bar reaches 100% and the command finishes, the "
"spinner disappears."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:793
msgid ""
"Progress bars are enabled by default when guestfish is used interactively.  "
"You can enable them even for non-interactive modes using I<--progress-bars>, "
"and you can disable them completely using I<--no-progress-bars>."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:798
msgid "GUESTFISH COMMANDS"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:800
msgid ""
"The commands in this section are guestfish convenience commands, in other "
"words, they are not part of the L<guestfs(3)> API."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:803
msgid "help"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:805
#, no-wrap
msgid ""
" help\n"
" help cmd\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:808
msgid ""
"Without any parameter, this lists all commands.  With a C<cmd> parameter, "
"this displays detailed help for a command."
msgstr ""

# type: =head2
#: ../fish/guestfish.pod:811
msgid "quit | exit"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:813
msgid "This exits guestfish.  You can also use C<^D> key."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:815
msgid "@FISH_COMMANDS@"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:817
msgid "COMMANDS"
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:821 ../test-tool/libguestfs-test-tool.pod:83
msgid "EXIT CODE"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:823
msgid ""
"guestfish returns 0 if the commands completed without error, or 1 if there "
"was an error."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:830
msgid "EDITOR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:832
msgid ""
"The C<edit> command uses C<$EDITOR> as the editor.  If not set, it uses "
"C<vi>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:835
msgid "GUESTFISH_PID"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:837
msgid ""
"Used with the I<--remote> option to specify the remote guestfish process to "
"control.  See section L</REMOTE CONTROL GUESTFISH OVER A SOCKET>."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:841
msgid "HEXEDITOR"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:843
msgid ""
"The L</hexedit> command uses C<$HEXEDITOR> as the external hex editor.  If "
"not specified, the external L<hexedit(1)> program is used."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:847
msgid "HOME"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:849
msgid ""
"If compiled with GNU readline support, various files in the home directory "
"can be used.  See L</FILES>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:858
msgid ""
"Set C<LIBGUESTFS_DEBUG=1> to enable verbose messages.  This has the same "
"effect as using the B<-v> option."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:870
msgid ""
"Set the path that guestfish uses to search for kernel and initrd.img.  See "
"the discussion of paths in L<guestfs(3)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:881
msgid "Set C<LIBGUESTFS_TRACE=1> to enable command traces."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:883
msgid "PAGER"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:885
msgid ""
"The C<more> command uses C<$PAGER> as the pager.  If not set, it uses "
"C<more>."
msgstr ""

# type: =head1
#: ../fish/guestfish.pod:900 ../test-tool/libguestfs-test-tool.pod:88
msgid "FILES"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:904
msgid "$HOME/.guestfish"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:906
msgid ""
"If compiled with GNU readline support, then the command history is saved in "
"this file."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:909
msgid "$HOME/.inputrc"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:911
msgid "/etc/inputrc"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:913
msgid ""
"If compiled with GNU readline support, then these files can be used to "
"configure readline.  For further information, please see "
"L<readline(3)/INITIALIZATION FILE>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:917
msgid "To write rules which only apply to guestfish, use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:919
#, no-wrap
msgid ""
" $if guestfish\n"
" ...\n"
" $endif\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:923
msgid ""
"Variables that you can set in inputrc that change the behaviour of guestfish "
"in useful ways include:"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:928
msgid "completion-ignore-case (default: on)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:930
msgid ""
"By default, guestfish will ignore case when tab-completing paths on the "
"disk.  Use:"
msgstr ""

# type: verbatim
#: ../fish/guestfish.pod:933
#, no-wrap
msgid ""
" set completion-ignore-case off\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:935
msgid "to make guestfish case sensitive."
msgstr ""

# type: =item
#: ../fish/guestfish.pod:939
msgid "test1.img"
msgstr ""

# type: =item
#: ../fish/guestfish.pod:941
msgid "test2.img (etc)"
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:943
msgid ""
"When using the C<-N> or C<--new> option, the prepared disk or filesystem "
"will be created in the file C<test1.img> in the current directory.  The "
"second use of C<-N> will use C<test2.img> and so on.  Any existing file with "
"the same name will be overwritten."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:952
msgid ""
"L<guestfs(3)>, L<http://libguestfs.org/>, L<virt-cat(1)>, L<virt-df(1)>, "
"L<virt-edit(1)>, L<virt-list-filesystems(1)>, L<virt-list-partitions(1)>, "
"L<virt-ls(1)>, L<virt-make-fs(1)>, L<virt-rescue(1)>, L<virt-resize(1)>, "
"L<virt-tar(1)>, L<virt-win-reg(1)>, L<hexedit(1)>."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:976 ../test-tool/libguestfs-test-tool.pod:124 ../fuse/guestmount.pod:198 ../inspector/virt-inspector.pl:872 ../tools/virt-edit.pl:352 ../tools/virt-win-reg.pl:502 ../tools/virt-df.pl:590 ../tools/virt-ls.pl:236 ../tools/virt-resize.pl:1477 ../tools/virt-list-filesystems.pl:218 ../tools/virt-cat.pl:188 ../tools/virt-tar.pl:283 ../tools/virt-rescue.pl:256 ../tools/virt-make-fs.pl:567 ../tools/virt-list-partitions.pl:255
msgid ""
"This program is free software; you can redistribute it and/or modify it "
"under the terms of the GNU General Public License as published by the Free "
"Software Foundation; either version 2 of the License, or (at your option) "
"any later version."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:981 ../test-tool/libguestfs-test-tool.pod:129 ../fuse/guestmount.pod:203 ../inspector/virt-inspector.pl:877 ../tools/virt-edit.pl:357 ../tools/virt-win-reg.pl:507 ../tools/virt-df.pl:595 ../tools/virt-ls.pl:241 ../tools/virt-resize.pl:1482 ../tools/virt-list-filesystems.pl:223 ../tools/virt-cat.pl:193 ../tools/virt-tar.pl:288 ../tools/virt-rescue.pl:261 ../tools/virt-make-fs.pl:572 ../tools/virt-list-partitions.pl:260
msgid ""
"This program is distributed in the hope that it will be useful, but WITHOUT "
"ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or "
"FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for "
"more details."
msgstr ""

# type: textblock
#: ../fish/guestfish.pod:986 ../test-tool/libguestfs-test-tool.pod:134 ../fuse/guestmount.pod:208 ../inspector/virt-inspector.pl:882 ../tools/virt-edit.pl:362 ../tools/virt-win-reg.pl:512 ../tools/virt-df.pl:600 ../tools/virt-ls.pl:246 ../tools/virt-resize.pl:1487 ../tools/virt-list-filesystems.pl:228 ../tools/virt-cat.pl:198 ../tools/virt-tar.pl:293 ../tools/virt-rescue.pl:266 ../tools/virt-make-fs.pl:577 ../tools/virt-list-partitions.pl:265
msgid ""
"You should have received a copy of the GNU General Public License along with "
"this program; if not, write to the Free Software Foundation, Inc., 675 Mass "
"Ave, Cambridge, MA 02139, USA."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1
msgid "add-cdrom"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3
msgid "cdrom"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:5
#, no-wrap
msgid ""
" add-cdrom filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:17
msgid ""
"This call checks for the existence of C<filename>.  This stops you from "
"specifying other types of drive which are supported by qemu such as C<nbd:> "
"and C<http:> URLs.  To specify those, use the general L</config> call "
"instead."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:24
msgid ""
"If you just want to add an ISO file (often you use this as an efficient way "
"to transfer large files into the guest), then you should probably use "
"L</add-drive-ro> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:30
msgid "add-drive"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:32
msgid "add"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:34
#, no-wrap
msgid ""
" add-drive filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:53 ../fish/guestfish-actions.pod:81
msgid ""
"C<if=...> is set at compile time by the configuration option C<./configure "
"--with-drive-if=...>.  In the rare case where you might need to change this "
"at run time, use L</add-drive-with-if> or L</add-drive-ro-with-if>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:58 ../fish/guestfish-actions.pod:86
msgid ""
"Note that this call checks for the existence of C<filename>.  This stops you "
"from specifying other types of drive which are supported by qemu such as "
"C<nbd:> and C<http:> URLs.  To specify those, use the general L</config> "
"call instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:63
msgid "add-drive-ro"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:65
msgid "add-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:67
#, no-wrap
msgid ""
" add-drive-ro filename\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:91
msgid "add-drive-ro-with-if"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:93
#, no-wrap
msgid ""
" add-drive-ro-with-if filename iface\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:95
msgid ""
"This is the same as L</add-drive-ro> but it allows you to specify the QEMU "
"interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:98
msgid "add-drive-with-if"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:100
#, no-wrap
msgid ""
" add-drive-with-if filename iface\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:102
msgid ""
"This is the same as L</add-drive> but it allows you to specify the QEMU "
"interface emulation to use at run time."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:105
msgid "aug-clear"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:107
#, no-wrap
msgid ""
" aug-clear augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:112
msgid "aug-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:114
#, no-wrap
msgid ""
" aug-close\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:116
msgid ""
"Close the current Augeas handle and free up any resources used by it.  After "
"calling this, you have to call L</aug-init> again before you can use any "
"other Augeas functions."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:121
msgid "aug-defnode"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:123
#, no-wrap
msgid ""
" aug-defnode name expr val\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:128
msgid ""
"If C<expr> evaluates to an empty nodeset, a node is created, equivalent to "
"calling L</aug-set> C<expr>, C<value>.  C<name> will be the nodeset "
"containing that single node."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:136
msgid "aug-defvar"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:138
#, no-wrap
msgid ""
" aug-defvar name expr\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:147
msgid "aug-get"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:149
#, no-wrap
msgid ""
" aug-get augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:154
msgid "aug-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:156
#, no-wrap
msgid ""
" aug-init root flags\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:162
msgid "You must call this before using any other L</aug-*> commands."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:197
msgid "Do not load the tree in L</aug-init>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:201
msgid "To close the handle, you can call L</aug-close>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:205
msgid "aug-insert"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:207
#, no-wrap
msgid ""
" aug-insert augpath label true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:217
msgid "aug-load"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:219
#, no-wrap
msgid ""
" aug-load\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:226
msgid "aug-ls"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:228
#, no-wrap
msgid ""
" aug-ls augpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:230
msgid ""
"This is just a shortcut for listing L</aug-match> C<path/*> and sorting the "
"resulting nodes into alphabetical order."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:233
msgid "aug-match"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:235
#, no-wrap
msgid ""
" aug-match augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:241
msgid "aug-mv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:243
#, no-wrap
msgid ""
" aug-mv src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:248
msgid "aug-rm"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:250
#, no-wrap
msgid ""
" aug-rm augpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:256
msgid "aug-save"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:258
#, no-wrap
msgid ""
" aug-save\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:262
msgid ""
"The flags which were passed to L</aug-init> affect exactly how files are "
"saved."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:265
msgid "aug-set"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:267
#, no-wrap
msgid ""
" aug-set augpath val\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:271
msgid ""
"In the Augeas API, it is possible to clear a node by setting the value to "
"NULL.  Due to an oversight in the libguestfs API you cannot do that with "
"this call.  Instead you must use the L</aug-clear> call."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:276
msgid "available"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:278
#, no-wrap
msgid ""
" available 'groups ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:284
msgid ""
"The libguestfs groups, and the functions that those groups correspond to, "
"are listed in L<guestfs(3)/AVAILABILITY>.  You can also fetch this list at "
"runtime by calling L</available-all-groups>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:308
msgid "You must call L</launch> before calling this function."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:330
msgid ""
"This call was added in version C<1.0.80>.  In previous versions of "
"libguestfs all you could do would be to speculatively execute a command to "
"find out if the daemon implemented it.  See also L</version>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:337
msgid "available-all-groups"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:339
#, no-wrap
msgid ""
" available-all-groups\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:341
msgid ""
"This command returns a list of all optional groups that this daemon knows "
"about.  Note this returns both supported and unsupported groups.  To find "
"out which ones the daemon can actually support you have to call "
"L</available> on each member of the returned list."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:347
msgid "See also L</available> and L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:349
msgid "base64-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:351
#, no-wrap
msgid ""
" base64-in (base64file|-) filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:356 ../fish/guestfish-actions.pod:365 ../fish/guestfish-actions.pod:589 ../fish/guestfish-actions.pod:736 ../fish/guestfish-actions.pod:783 ../fish/guestfish-actions.pod:802 ../fish/guestfish-actions.pod:1179 ../fish/guestfish-actions.pod:3835 ../fish/guestfish-actions.pod:3847 ../fish/guestfish-actions.pod:3858 ../fish/guestfish-actions.pod:3869 ../fish/guestfish-actions.pod:3921 ../fish/guestfish-actions.pod:3930 ../fish/guestfish-actions.pod:3984 ../fish/guestfish-actions.pod:4007
msgid "Use C<-> instead of a filename to read/write from stdin/stdout."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:358
msgid "base64-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:360
#, no-wrap
msgid ""
" base64-out filename (base64file|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:367
msgid "blockdev-flushbufs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:369
#, no-wrap
msgid ""
" blockdev-flushbufs device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:376
msgid "blockdev-getbsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:378
#, no-wrap
msgid ""
" blockdev-getbsz device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:387
msgid "blockdev-getro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:389
#, no-wrap
msgid ""
" blockdev-getro device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:396
msgid "blockdev-getsize64"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:398
#, no-wrap
msgid ""
" blockdev-getsize64 device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:402
msgid "See also L</blockdev-getsz>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:406
msgid "blockdev-getss"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:408
#, no-wrap
msgid ""
" blockdev-getss device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:413
msgid "(Note, this is not the size in sectors, use L</blockdev-getsz> for that)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:418
msgid "blockdev-getsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:420
#, no-wrap
msgid ""
" blockdev-getsz device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:425
msgid ""
"See also L</blockdev-getss> for the real sector size of the device, and "
"L</blockdev-getsize64> for the more useful I<size in bytes>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:431
msgid "blockdev-rereadpt"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:433
#, no-wrap
msgid ""
" blockdev-rereadpt device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:439
msgid "blockdev-setbsz"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:441
#, no-wrap
msgid ""
" blockdev-setbsz device blocksize\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:450
msgid "blockdev-setro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:452
#, no-wrap
msgid ""
" blockdev-setro device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:458
msgid "blockdev-setrw"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:460
#, no-wrap
msgid ""
" blockdev-setrw device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:466
msgid "case-sensitive-path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:468
#, no-wrap
msgid ""
" case-sensitive-path path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:492
msgid ""
"Thus L</case-sensitive-path> (\"/Windows/System32\")  might return "
"C<\"/WINDOWS/system32\"> (the exact return value would depend on details of "
"how the directories were originally created under Windows)."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:500
msgid "See also L</realpath>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:502
msgid "cat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:504
#, no-wrap
msgid ""
" cat path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:508
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of string).  For "
"those you need to use the L</read-file> or L</download> functions which have "
"a more complex interface."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:516
msgid "checksum"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:518
#, no-wrap
msgid ""
" checksum csumtype path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:561
msgid "To get the checksum for a device, use L</checksum-device>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:563
msgid "To get the checksums for many files, use L</checksums-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:565
msgid "checksum-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:567
#, no-wrap
msgid ""
" checksum-device csumtype device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:569
msgid ""
"This call computes the MD5, SHAx or CRC checksum of the contents of the "
"device named C<device>.  For the types of checksums supported see the "
"L</checksum> command."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:573
msgid "checksums-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:575
#, no-wrap
msgid ""
" checksums-out csumtype directory (sumsfile|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:591
msgid "chmod"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:593
#, no-wrap
msgid ""
" chmod mode path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:604
msgid "chown"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:606
#, no-wrap
msgid ""
" chown owner group path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:614
msgid "command"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:616
#, no-wrap
msgid ""
" command 'arguments ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:623
msgid ""
"The single parameter is an argv-style list of arguments.  The first element "
"is the name of the program to run.  Subsequent elements are parameters.  The "
"list must be non-empty (ie. must contain a program name).  Note that the "
"command runs directly, and is I<not> invoked via the shell (see L</sh>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:651
msgid "command-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:653
#, no-wrap
msgid ""
" command-lines 'arguments ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:655
msgid "This is the same as L</command>, but splits the result into a list of lines."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:658
msgid "See also: L</sh-lines>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:663
msgid "config"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:665
#, no-wrap
msgid ""
" config qemuparam qemuvalue\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:676
msgid "copy-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:678
#, no-wrap
msgid ""
" copy-size src dest size\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:686
msgid "cp"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:688
#, no-wrap
msgid ""
" cp src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:693
msgid "cp-a"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:695
#, no-wrap
msgid ""
" cp-a src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:700
msgid "dd"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:702
#, no-wrap
msgid ""
" dd src dest\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:709
msgid ""
"If the destination is a device, it must be as large or larger than the "
"source file or device, otherwise the copy will fail.  This command cannot do "
"partial copies (see L</copy-size>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:713
msgid "debug"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:715
#, no-wrap
msgid ""
" debug subcmd 'extraargs ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:717
msgid ""
"The L</debug> command exposes some internals of C<guestfsd> (the guestfs "
"daemon) that runs inside the qemu subprocess."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:725
msgid "debug-upload"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:727
#, no-wrap
msgid ""
" debug-upload (filename|-) tmpname mode\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:729
msgid "The L</debug-upload> command uploads a file to the libguestfs appliance."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:738
msgid "df"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:740
#, no-wrap
msgid ""
" df\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:748
msgid "df-h"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:750
#, no-wrap
msgid ""
" df-h\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:759
msgid "dmesg"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:761
#, no-wrap
msgid ""
" dmesg\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:767
msgid ""
"Another way to get the same information is to enable verbose messages with "
"L</set-verbose> or by setting the environment variable C<LIBGUESTFS_DEBUG=1> "
"before running the program."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:772
msgid "download"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:774
#, no-wrap
msgid ""
" download remotefilename (filename|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:781
msgid "See also L</upload>, L</cat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:785
msgid "download-offset"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:787
#, no-wrap
msgid ""
" download-offset remotefilename (filename|-) offset size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:795
msgid ""
"Note that there is no limit on the amount of data that can be downloaded "
"with this call, unlike with L</pread>, and this call always reads the full "
"amount unless an error occurs."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:800
msgid "See also L</download>, L</pread>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:804
msgid "drop-caches"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:806
#, no-wrap
msgid ""
" drop-caches whattodrop\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:818
msgid "du"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:820
#, no-wrap
msgid ""
" du path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:832
msgid "e2fsck-f"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:834
#, no-wrap
msgid ""
" e2fsck-f device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:840
msgid ""
"This command is only needed because of L</resize2fs> (q.v.).  Normally you "
"should use L</fsck>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:843
msgid "echo-daemon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:845
#, no-wrap
msgid ""
" echo-daemon 'words ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:852
msgid "See also L</ping-daemon>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:854
msgid "egrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:856
#, no-wrap
msgid ""
" egrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:864
msgid "egrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:866
#, no-wrap
msgid ""
" egrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:874
msgid "equal"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:876
#, no-wrap
msgid ""
" equal file1 file2\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:883
msgid "exists"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:885
#, no-wrap
msgid ""
" exists path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:890
msgid "See also L</is-file>, L</is-dir>, L</stat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:892
msgid "fallocate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:894
#, no-wrap
msgid ""
" fallocate path len\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:911
msgid "fallocate64"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:913
#, no-wrap
msgid ""
" fallocate64 path len\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:919
msgid ""
"Note that this call allocates disk blocks for the file.  To create a sparse "
"file use L</truncate-size> instead."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:922
msgid ""
"The deprecated call L</fallocate> does the same, but owing to an oversight "
"it only allowed 30 bit lengths to be specified, effectively limiting the "
"maximum size of files created through that call to 1GB."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:931
msgid "fgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:933
#, no-wrap
msgid ""
" fgrep pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:941
msgid "fgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:943
#, no-wrap
msgid ""
" fgrepi pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:951
msgid "file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:953
#, no-wrap
msgid ""
" file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:965
msgid ""
"This command can also be used on C</dev/> devices (and partitions, LV "
"names).  You can for example use this to determine if a device contains a "
"filesystem, although it's usually better to use L</vfs-type>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:975
msgid "file-architecture"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:977
#, no-wrap
msgid ""
" file-architecture filename\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1080
msgid "filesize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1082
#, no-wrap
msgid ""
" filesize file\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1086
msgid ""
"To get other stats about a file, use L</stat>, L</lstat>, L</is-dir>, "
"L</is-file> etc.  To get the size of block devices, use "
"L</blockdev-getsize64>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1090
msgid "fill"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1092
#, no-wrap
msgid ""
" fill c len path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1098
msgid ""
"To fill a file with zero bytes (sparsely), it is much more efficient to use "
"L</truncate-size>.  To create a file with a pattern of repeating bytes use "
"L</fill-pattern>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1103
msgid "fill-pattern"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1105
#, no-wrap
msgid ""
" fill-pattern pattern len path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1107
msgid ""
"This function is like L</fill> except that it creates a new file of length "
"C<len> containing the repeating pattern of bytes in C<pattern>.  The pattern "
"is truncated if necessary to ensure the length of the file is exactly C<len> "
"bytes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1112
msgid "find"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1114
#, no-wrap
msgid ""
" find directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1128
msgid "then the returned list from L</find> C</tmp> would be 4 elements:"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1141
msgid "See also L</find0>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1146
msgid "find0"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1148
#, no-wrap
msgid ""
" find0 directory (files|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1154
msgid "This command works the same way as L</find> with the following exceptions:"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1181
msgid "findfs-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1183
#, no-wrap
msgid ""
" findfs-label label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1189
msgid "To find the label of a filesystem, use L</vfs-label>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1191
msgid "findfs-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1193
#, no-wrap
msgid ""
" findfs-uuid uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1199
msgid "To find the UUID of a filesystem, use L</vfs-uuid>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1201
msgid "fsck"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1203
#, no-wrap
msgid ""
" fsck fstype device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1233
msgid "get-append"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1235
#, no-wrap
msgid ""
" get-append\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1242
msgid "get-autosync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1244
#, no-wrap
msgid ""
" get-autosync\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1248
msgid "get-direct"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1250
#, no-wrap
msgid ""
" get-direct\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1254
msgid "get-e2label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1256
#, no-wrap
msgid ""
" get-e2label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1268
msgid "get-e2uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1270
#, no-wrap
msgid ""
" get-e2uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1282
msgid "get-memsize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1284
#, no-wrap
msgid ""
" get-memsize\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1289
msgid ""
"If L</set-memsize> was not called on this handle, and if "
"C<LIBGUESTFS_MEMSIZE> was not set, then this returns the compiled-in default "
"value for memsize."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1296
msgid "get-network"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1298
#, no-wrap
msgid ""
" get-network\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1302
msgid "get-path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1304
#, no-wrap
msgid ""
" get-path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1311
msgid "get-pid"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1313
msgid "pid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1315
#, no-wrap
msgid ""
" get-pid\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1322
msgid "get-qemu"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1324
#, no-wrap
msgid ""
" get-qemu\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1331
msgid "get-recovery-proc"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1333
#, no-wrap
msgid ""
" get-recovery-proc\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1337
msgid "get-selinux"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1339
#, no-wrap
msgid ""
" get-selinux\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1341
msgid ""
"This returns the current setting of the selinux flag which is passed to the "
"appliance at boot time.  See L</set-selinux>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1347
msgid "get-state"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1349
#, no-wrap
msgid ""
" get-state\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1356
msgid "get-trace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1358
#, no-wrap
msgid ""
" get-trace\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1362
msgid "get-umask"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1364
#, no-wrap
msgid ""
" get-umask\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1366
msgid ""
"Return the current umask.  By default the umask is C<022> unless it has been "
"set by calling L</umask>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1369
msgid "get-verbose"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1371
#, no-wrap
msgid ""
" get-verbose\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1375
msgid "getcon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1377
#, no-wrap
msgid ""
" getcon\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1381
msgid "See the documentation about SELINUX in L<guestfs(3)>, and L</setcon>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1384
msgid "getxattrs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1386
#, no-wrap
msgid ""
" getxattrs path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1394
msgid "See also: L</lgetxattrs>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1396
msgid "glob-expand"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1398
#, no-wrap
msgid ""
" glob-expand pattern\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1411
msgid "grep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1413
#, no-wrap
msgid ""
" grep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1421
msgid "grepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1423
#, no-wrap
msgid ""
" grepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1431
msgid "grub-install"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1433
#, no-wrap
msgid ""
" grub-install root device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1449
msgid "head"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1451
#, no-wrap
msgid ""
" head path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1459
msgid "head-n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1461
#, no-wrap
msgid ""
" head-n nrlines path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1474
msgid "hexdump"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1476
#, no-wrap
msgid ""
" hexdump path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1484
msgid "initrd-cat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1486
#, no-wrap
msgid ""
" initrd-cat initrdpath filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1498
msgid "See also L</initrd-list>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1503
msgid "initrd-list"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1505
#, no-wrap
msgid ""
" initrd-list path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1517
msgid "inotify-add-watch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1519
#, no-wrap
msgid ""
" inotify-add-watch path mask\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1531
msgid "inotify-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1533
#, no-wrap
msgid ""
" inotify-close\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1539
msgid "inotify-files"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1541
#, no-wrap
msgid ""
" inotify-files\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1543
msgid ""
"This function is a helpful wrapper around L</inotify-read> which just "
"returns a list of pathnames of objects that were touched.  The returned "
"pathnames are sorted and deduplicated."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1547
msgid "inotify-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1549
#, no-wrap
msgid ""
" inotify-init maxevents\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1555
msgid ""
"C<maxevents> is the maximum number of events which will be queued up between "
"calls to L</inotify-read> or L</inotify-files>.  If this is passed as C<0>, "
"then the kernel (or previously set)  default is used.  For Linux 2.6.29 the "
"default was 16384 events.  Beyond this limit, the kernel throws away events, "
"but records the fact that it threw them away by setting a flag "
"C<IN_Q_OVERFLOW> in the returned structure list (see L</inotify-read>)."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1565
msgid ""
"Before any events are generated, you have to add some watches to the "
"internal watch list.  See: L</inotify-add-watch>, L</inotify-rm-watch> and "
"L</inotify-watch-all>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1571
msgid ""
"Queued up events should be read periodically by calling L</inotify-read> (or "
"L</inotify-files> which is just a helpful wrapper around L</inotify-read>).  "
"If you don't read the events out often enough then you risk the internal "
"queue overflowing."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1578
msgid ""
"The handle should be closed after use by calling L</inotify-close>.  This "
"also removes any watches automatically."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1587
msgid "inotify-read"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1589
#, no-wrap
msgid ""
" inotify-read\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1602
msgid "inotify-rm-watch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1604
#, no-wrap
msgid ""
" inotify-rm-watch wd\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1606
msgid "Remove a previously defined inotify watch.  See L</inotify-add-watch>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1609
msgid "inspect-get-arch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1611
#, no-wrap
msgid ""
" inspect-get-arch root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1613 ../fish/guestfish-actions.pod:1629 ../fish/guestfish-actions.pod:1675 ../fish/guestfish-actions.pod:1693 ../fish/guestfish-actions.pod:1714 ../fish/guestfish-actions.pod:1729 ../fish/guestfish-actions.pod:1752 ../fish/guestfish-actions.pod:1769
msgid ""
"This function should only be called with a root device string as returned by "
"L</inspect-os>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1616
msgid ""
"This returns the architecture of the inspected operating system.  The "
"possible return values are listed under L</file-architecture>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1625
msgid "inspect-get-distro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1627
#, no-wrap
msgid ""
" inspect-get-distro root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1671
msgid "inspect-get-filesystems"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1673
#, no-wrap
msgid ""
" inspect-get-filesystems root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1686
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-mountpoints>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1689
msgid "inspect-get-major-version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1691
#, no-wrap
msgid ""
" inspect-get-major-version root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1710
msgid "inspect-get-minor-version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1712
#, no-wrap
msgid ""
" inspect-get-minor-version root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1722
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-major-version>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1725
msgid "inspect-get-mountpoints"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1727
#, no-wrap
msgid ""
" inspect-get-mountpoints root\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1745
msgid ""
"Please read L<guestfs(3)/INSPECTION> for more details.  See also "
"L</inspect-get-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1748
msgid "inspect-get-product-name"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1750
#, no-wrap
msgid ""
" inspect-get-product-name root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1765
msgid "inspect-get-type"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1767
#, no-wrap
msgid ""
" inspect-get-type root\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1796
msgid "inspect-os"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1798
#, no-wrap
msgid ""
" inspect-os\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1813
msgid ""
"You can pass the root string(s) returned to other L</inspect-get-*> "
"functions in order to query further information about each operating system, "
"such as the name and version."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1818
msgid ""
"This function uses other libguestfs features such as L</mount-ro> and "
"L</umount-all> in order to mount and unmount filesystems and look at the "
"contents.  This should be called with no disks currently mounted.  The "
"function may also use Augeas, so any existing Augeas handle will be closed."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1830 ../fish/guestfish-actions.pod:1986 ../fish/guestfish-actions.pod:2032
msgid "See also L</list-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1832
msgid "is-blockdev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1834
#, no-wrap
msgid ""
" is-blockdev path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1839 ../fish/guestfish-actions.pod:1857 ../fish/guestfish-actions.pod:1876 ../fish/guestfish-actions.pod:1885 ../fish/guestfish-actions.pod:1895 ../fish/guestfish-actions.pod:1929 ../fish/guestfish-actions.pod:1938
msgid "See also L</stat>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1841
msgid "is-busy"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1843
#, no-wrap
msgid ""
" is-busy\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1850
msgid "is-chardev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1852
#, no-wrap
msgid ""
" is-chardev path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1859
msgid "is-config"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1861
#, no-wrap
msgid ""
" is-config\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1868
msgid "is-dir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1870
#, no-wrap
msgid ""
" is-dir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1878
msgid "is-fifo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1880
#, no-wrap
msgid ""
" is-fifo path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1887
msgid "is-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1889
#, no-wrap
msgid ""
" is-file path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1897
msgid "is-launching"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1899
#, no-wrap
msgid ""
" is-launching\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1906
msgid "is-lv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1908
#, no-wrap
msgid ""
" is-lv device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1913
msgid "is-ready"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1915
#, no-wrap
msgid ""
" is-ready\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1922
msgid "is-socket"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1924
#, no-wrap
msgid ""
" is-socket path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1931
msgid "is-symlink"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1933
#, no-wrap
msgid ""
" is-symlink path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1940
msgid "kill-subprocess"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1942
#, no-wrap
msgid ""
" kill-subprocess\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1946
msgid "launch"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1948
msgid "run"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1950
#, no-wrap
msgid ""
" launch\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1958
msgid "lchown"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1960
#, no-wrap
msgid ""
" lchown owner group path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1962
msgid ""
"Change the file owner to C<owner> and group to C<group>.  This is like "
"L</chown> but if C<path> is a symlink then the link itself is changed, not "
"the target."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1970
msgid "lgetxattrs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1972
#, no-wrap
msgid ""
" lgetxattrs path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:1974
msgid ""
"This is the same as L</getxattrs>, but if C<path> is a symbolic link, then "
"it returns the extended attributes of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1978
msgid "list-devices"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1980
#, no-wrap
msgid ""
" list-devices\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:1988
msgid "list-filesystems"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:1990
#, no-wrap
msgid ""
" list-filesystems\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2009
msgid ""
"This command runs other libguestfs commands, which might include L</mount> "
"and L</umount>, and therefore you should use this soon after launch and only "
"when nothing is mounted."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2013
msgid ""
"Not all of the filesystems returned will be mountable.  In particular, swap "
"partitions are returned in the list.  Also this command does not check that "
"each filesystem found is valid and mountable, and some filesystems might be "
"mountable but require special options.  Filesystems may not all belong to a "
"single logical operating system (use L</inspect-os> to look for OSes)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2021
msgid "list-partitions"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2023
#, no-wrap
msgid ""
" list-partitions\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2029
msgid ""
"This does not return logical volumes.  For that you will need to call "
"L</lvs>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2034
msgid "ll"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2036
#, no-wrap
msgid ""
" ll directory\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2044
msgid "ln"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2046
#, no-wrap
msgid ""
" ln target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2050
msgid "ln-f"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2052
#, no-wrap
msgid ""
" ln-f target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2057
msgid "ln-s"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2059
#, no-wrap
msgid ""
" ln-s target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2063
msgid "ln-sf"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2065
#, no-wrap
msgid ""
" ln-sf target linkname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2070
msgid "lremovexattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2072
#, no-wrap
msgid ""
" lremovexattr xattr path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2074
msgid ""
"This is the same as L</removexattr>, but if C<path> is a symbolic link, then "
"it removes an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2078
msgid "ls"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2080
#, no-wrap
msgid ""
" ls directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2086
msgid ""
"This command is mostly useful for interactive sessions.  Programs should "
"probably use L</readdir> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2089
msgid "lsetxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2091
#, no-wrap
msgid ""
" lsetxattr xattr val vallen path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2093
msgid ""
"This is the same as L</setxattr>, but if C<path> is a symbolic link, then it "
"sets an extended attribute of the link itself."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2097
msgid "lstat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2099
#, no-wrap
msgid ""
" lstat path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2103
msgid ""
"This is the same as L</stat> except that if C<path> is a symbolic link, then "
"the link is stat-ed, not the file it refers to."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2109
msgid "lstatlist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2111
#, no-wrap
msgid ""
" lstatlist path 'names ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2113
msgid ""
"This call allows you to perform the L</lstat> operation on multiple files, "
"where all files are in the directory C<path>.  C<names> is the list of files "
"from this directory."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2122
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also L</lxattrlist> for a "
"similarly efficient call for getting extended attributes.  Very long "
"directory listings might cause the protocol message size to be exceeded, "
"causing this call to fail.  The caller must split up such requests into "
"smaller groups of names."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2130
msgid "luks-add-key"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2132
#, no-wrap
msgid ""
" luks-add-key device keyslot\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2139
msgid ""
"Note that if C<keyslot> already contains a key, then this command will "
"fail.  You have to use L</luks-kill-slot> first to remove that key."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2143 ../fish/guestfish-actions.pod:2165 ../fish/guestfish-actions.pod:2178 ../fish/guestfish-actions.pod:2192 ../fish/guestfish-actions.pod:2215 ../fish/guestfish-actions.pod:2225
msgid ""
"This command has one or more key or passphrase parameters.  Guestfish will "
"prompt for these separately."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2146
msgid "luks-close"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2148
#, no-wrap
msgid ""
" luks-close device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2150
msgid ""
"This closes a LUKS device that was created earlier by L</luks-open> or "
"L</luks-open-ro>.  The C<device> parameter must be the name of the LUKS "
"mapping device (ie. C</dev/mapper/mapname>) and I<not> the name of the "
"underlying block device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2156
msgid "luks-format"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2158
#, no-wrap
msgid ""
" luks-format device keyslot\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2171
msgid "luks-format-cipher"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2173
#, no-wrap
msgid ""
" luks-format-cipher device keyslot cipher\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2175
msgid ""
"This command is the same as L</luks-format> but it also allows you to set "
"the C<cipher> used."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2184
msgid "luks-kill-slot"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2186
#, no-wrap
msgid ""
" luks-kill-slot device keyslot\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2195
msgid "luks-open"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2197
#, no-wrap
msgid ""
" luks-open device mapname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2211
msgid ""
"If this block device contains LVM volume groups, then calling L</vgscan> "
"followed by L</vg-activate-all> will make them visible."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2218
msgid "luks-open-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2220
#, no-wrap
msgid ""
" luks-open-ro device mapname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2222
msgid ""
"This is the same as L</luks-open> except that a read-only mapping is "
"created."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2228
msgid "lvcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2230
#, no-wrap
msgid ""
" lvcreate logvol volgroup mbytes\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2235
msgid "lvm-clear-filter"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2237
#, no-wrap
msgid ""
" lvm-clear-filter\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2239
msgid ""
"This undoes the effect of L</lvm-set-filter>.  LVM will be able to see every "
"block device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2245
msgid "lvm-remove-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2247
#, no-wrap
msgid ""
" lvm-remove-all\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2255
msgid "lvm-set-filter"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2257
#, no-wrap
msgid ""
" lvm-set-filter 'devices ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2282
msgid "lvremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2284
#, no-wrap
msgid ""
" lvremove device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2292
msgid "lvrename"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2294
#, no-wrap
msgid ""
" lvrename logvol newlogvol\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2298
msgid "lvresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2300
#, no-wrap
msgid ""
" lvresize device mbytes\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2306
msgid "lvresize-free"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2308
#, no-wrap
msgid ""
" lvresize-free lv percent\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2316
msgid "lvs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2318
#, no-wrap
msgid ""
" lvs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2326
msgid "See also L</lvs-full>, L</list-filesystems>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2328
msgid "lvs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2330
#, no-wrap
msgid ""
" lvs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2335
msgid "lvuuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2337
#, no-wrap
msgid ""
" lvuuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2341
msgid "lxattrlist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2343
#, no-wrap
msgid ""
" lxattrlist path 'names ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2359
msgid ""
"This call is intended for programs that want to efficiently list a directory "
"contents without making many round-trips.  See also L</lstatlist> for a "
"similarly efficient call for getting standard stats.  Very long directory "
"listings might cause the protocol message size to be exceeded, causing this "
"call to fail.  The caller must split up such requests into smaller groups of "
"names."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2367
msgid "mkdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2369
#, no-wrap
msgid ""
" mkdir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2373
msgid "mkdir-mode"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2375
#, no-wrap
msgid ""
" mkdir-mode path mode\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2384
msgid "See also L</mkdir>, L</umask>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2386
msgid "mkdir-p"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2388
#, no-wrap
msgid ""
" mkdir-p path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2393
msgid "mkdtemp"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2395
#, no-wrap
msgid ""
" mkdtemp template\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2416
msgid "mke2fs-J"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2418
#, no-wrap
msgid ""
" mke2fs-J fstype blocksize device journal\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2426
msgid "See also L</mke2journal>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2428
msgid "mke2fs-JL"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2430
#, no-wrap
msgid ""
" mke2fs-JL fstype blocksize device label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2435
msgid "See also L</mke2journal-L>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2437
msgid "mke2fs-JU"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2439
#, no-wrap
msgid ""
" mke2fs-JU fstype blocksize device uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2444
msgid "See also L</mke2journal-U>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2446
msgid "mke2journal"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2448
#, no-wrap
msgid ""
" mke2journal blocksize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2455
msgid "mke2journal-L"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2457
#, no-wrap
msgid ""
" mke2journal-L blocksize label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2461
msgid "mke2journal-U"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2463
#, no-wrap
msgid ""
" mke2journal-U blocksize uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2467
msgid "mkfifo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2469
#, no-wrap
msgid ""
" mkfifo mode path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2471
msgid ""
"This call creates a FIFO (named pipe) called C<path> with mode C<mode>.  It "
"is just a convenient wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2477
msgid "mkfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2479
#, no-wrap
msgid ""
" mkfs fstype device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2485
msgid "mkfs-b"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2487
#, no-wrap
msgid ""
" mkfs-b fstype blocksize device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2489
msgid ""
"This call is similar to L</mkfs>, but it allows you to control the block "
"size of the resulting filesystem.  Supported block sizes depend on the "
"filesystem type, but typically they are C<1024>, C<2048> or C<4096> only."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2497
msgid "mkmountpoint"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2499
#, no-wrap
msgid ""
" mkmountpoint exemptpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2501
msgid ""
"L</mkmountpoint> and L</rmmountpoint> are specialized calls that can be used "
"to create extra mountpoints before mounting the first filesystem."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2525
msgid "mknod"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2527
#, no-wrap
msgid ""
" mknod mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2537
msgid ""
"Note that, just like L<mknod(2)>, the mode must be bitwise OR'd with "
"S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a "
"regular file).  These constants are available in the standard Linux header "
"files, or you can use L</mknod-b>, L</mknod-c> or L</mkfifo> which are "
"wrappers around this command which bitwise OR in the appropriate constant "
"for you."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2547
msgid "mknod-b"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2549
#, no-wrap
msgid ""
" mknod-b mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2551
msgid ""
"This call creates a block device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2557
msgid "mknod-c"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2559
#, no-wrap
msgid ""
" mknod-c mode devmajor devminor path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2561
msgid ""
"This call creates a char device node called C<path> with mode C<mode> and "
"device major/minor C<devmajor> and C<devminor>.  It is just a convenient "
"wrapper around L</mknod>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2567
msgid "mkswap"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2569
#, no-wrap
msgid ""
" mkswap device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2573
msgid "mkswap-L"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2575
#, no-wrap
msgid ""
" mkswap-L label device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2583
msgid "mkswap-U"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2585
#, no-wrap
msgid ""
" mkswap-U uuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2589
msgid "mkswap-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2591
#, no-wrap
msgid ""
" mkswap-file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2595
msgid ""
"This command just writes a swap file signature to an existing file.  To "
"create the file itself, use something like L</fallocate>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2598
msgid "modprobe"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2600
#, no-wrap
msgid ""
" modprobe modulename\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2607
msgid "mount"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2609
#, no-wrap
msgid ""
" mount device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2625
msgid ""
"B<Important note:> When you use this call, the filesystem options C<sync> "
"and C<noatime> are set implicitly.  This was originally done because we "
"thought it would improve reliability, but it turns out that I<-o sync> has a "
"very large negative performance impact and negligible effect on "
"reliability.  Therefore we recommend that you avoid using L</mount> in any "
"code that needs performance, and instead use L</mount-options> (use an empty "
"string for the first parameter if you don't want any options)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2635
msgid "mount-loop"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2637
#, no-wrap
msgid ""
" mount-loop file mountpoint\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2643
msgid "mount-options"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2645
#, no-wrap
msgid ""
" mount-options options device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2647
msgid ""
"This is the same as the L</mount> command, but it allows you to set the "
"mount options as for the L<mount(8)> I<-o> flag."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2655
msgid "mount-ro"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2657
#, no-wrap
msgid ""
" mount-ro device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2659
msgid ""
"This is the same as the L</mount> command, but it mounts the filesystem with "
"the read-only (I<-o ro>) flag."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2662
msgid "mount-vfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2664
#, no-wrap
msgid ""
" mount-vfs options vfstype device mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2666
msgid ""
"This is the same as the L</mount> command, but it allows you to set both the "
"mount options and the vfstype as for the L<mount(8)> I<-o> and I<-t> flags."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2670
msgid "mountpoints"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2672
#, no-wrap
msgid ""
" mountpoints\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2674
msgid ""
"This call is similar to L</mounts>.  That call returns a list of devices.  "
"This one returns a hash table (map) of device name to directory where the "
"device is mounted."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2678
msgid "mounts"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2680
#, no-wrap
msgid ""
" mounts\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2687
msgid "See also: L</mountpoints>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2689
msgid "mv"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2691
#, no-wrap
msgid ""
" mv src dest\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2696
msgid "ntfs-3g-probe"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2698
#, no-wrap
msgid ""
" ntfs-3g-probe true|false device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2712
msgid "ntfsresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2714
#, no-wrap
msgid ""
" ntfsresize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2720
msgid "ntfsresize-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2722
#, no-wrap
msgid ""
" ntfsresize-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2724
msgid ""
"This command is the same as L</ntfsresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2727
msgid "part-add"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2729
#, no-wrap
msgid ""
" part-add device prlogex startsect endsect\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2731
msgid ""
"This command adds a partition to C<device>.  If there is no partition table "
"on the device, call L</part-init> first."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2743
msgid ""
"Creating a partition which covers the whole disk is not so easy.  Use "
"L</part-disk> to do that."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2746
msgid "part-del"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2748
#, no-wrap
msgid ""
" part-del device partnum\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2756
msgid "part-disk"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2758
#, no-wrap
msgid ""
" part-disk device parttype\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2760
msgid ""
"This command is simply a combination of L</part-init> followed by "
"L</part-add> to create a single primary partition covering the whole disk."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2764
msgid ""
"C<parttype> is the partition table type, usually C<mbr> or C<gpt>, but other "
"possible values are described in L</part-init>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2770
msgid "part-get-bootable"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2772
#, no-wrap
msgid ""
" part-get-bootable device partnum\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2777
msgid "See also L</part-set-bootable>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2779
msgid "part-get-mbr-id"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2781
#, no-wrap
msgid ""
" part-get-mbr-id device partnum\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2786 ../fish/guestfish-actions.pod:2924
msgid ""
"Note that only MBR (old DOS-style) partitions have type bytes.  You will get "
"undefined results for other partition table types (see "
"L</part-get-parttype>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2790
msgid "part-get-parttype"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2792
#, no-wrap
msgid ""
" part-get-parttype device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2797
msgid ""
"Common return values include: C<msdos> (a DOS/Windows style MBR partition "
"table), C<gpt> (a GPT/EFI-style partition table).  Other values are "
"possible, although unusual.  See L</part-init> for a full list."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2802
msgid "part-init"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2804
#, no-wrap
msgid ""
" part-init device parttype\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2810
msgid ""
"Initially there are no partitions.  Following this, you should call "
"L</part-add> for each partition required."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2873
msgid "part-list"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2875
#, no-wrap
msgid ""
" part-list device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2890
msgid ""
"Start of the partition I<in bytes>.  To get sectors you have to divide by "
"the device's sector size, see L</blockdev-getss>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2903
msgid "part-set-bootable"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2905
#, no-wrap
msgid ""
" part-set-bootable device partnum true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2914
msgid "part-set-mbr-id"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2916
#, no-wrap
msgid ""
" part-set-mbr-id device partnum idbyte\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2928
msgid "part-set-name"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2930
#, no-wrap
msgid ""
" part-set-name device partnum name\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2938
msgid "part-to-dev"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2940
#, no-wrap
msgid ""
" part-to-dev partition\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2946
msgid ""
"The named partition must exist, for example as a string returned from "
"L</list-partitions>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2949
msgid "ping-daemon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2951
#, no-wrap
msgid ""
" ping-daemon\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2958
msgid "pread"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2960
#, no-wrap
msgid ""
" pread path count offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2968
msgid "See also L</pwrite>, L</pread-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2973
msgid "pread-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2975
#, no-wrap
msgid ""
" pread-device device count offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:2983
msgid "See also L</pread>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2988
msgid "pvcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2990
#, no-wrap
msgid ""
" pvcreate device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:2996
msgid "pvremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:2998
#, no-wrap
msgid ""
" pvremove device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3007
msgid "pvresize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3009
#, no-wrap
msgid ""
" pvresize device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3014
msgid "pvresize-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3016
#, no-wrap
msgid ""
" pvresize-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3018
msgid ""
"This command is the same as L</pvresize> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3021
msgid "pvs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3023
#, no-wrap
msgid ""
" pvs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3031
msgid "See also L</pvs-full>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3033
msgid "pvs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3035
#, no-wrap
msgid ""
" pvs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3040
msgid "pvuuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3042
#, no-wrap
msgid ""
" pvuuid device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3046
msgid "pwrite"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3048
#, no-wrap
msgid ""
" pwrite path content offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3059
msgid "See also L</pread>, L</pwrite-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3064
msgid "pwrite-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3066
#, no-wrap
msgid ""
" pwrite-device device content offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3076
msgid "See also L</pwrite>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3081
msgid "read-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3083
#, no-wrap
msgid ""
" read-file path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3088
msgid ""
"Unlike L</cat>, this function can correctly handle files that contain "
"embedded ASCII NUL characters.  However unlike L</download>, this function "
"is limited in the total size of file that can be handled."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3096
msgid "read-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3098
#, no-wrap
msgid ""
" read-lines path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3105
msgid ""
"Note that this function cannot correctly handle binary files (specifically, "
"files containing C<\\0> character which is treated as end of line).  For "
"those you need to use the L</read-file> function which has a more complex "
"interface."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3110
msgid "readdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3112
#, no-wrap
msgid ""
" readdir dir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3164
msgid ""
"This function is primarily intended for use by programs.  To get a simple "
"list of names, use L</ls>.  To get a printable directory for human "
"consumption, use L</ll>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3168
msgid "readlink"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3170
#, no-wrap
msgid ""
" readlink path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3174
msgid "readlinklist"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3176
#, no-wrap
msgid ""
" readlinklist path 'names ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3200
msgid "realpath"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3202
#, no-wrap
msgid ""
" realpath path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3207
msgid "removexattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3209
#, no-wrap
msgid ""
" removexattr xattr path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3214
msgid "See also: L</lremovexattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3216
msgid "resize2fs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3218
#, no-wrap
msgid ""
" resize2fs device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3223
msgid ""
"I<Note:> It is sometimes required that you run L</e2fsck-f> on the C<device> "
"before calling this command.  For unknown reasons C<resize2fs> sometimes "
"gives an error about this and sometimes not.  In any case, it is always safe "
"to call L</e2fsck-f> before calling this function."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3229
msgid "resize2fs-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3231
#, no-wrap
msgid ""
" resize2fs-size device size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3233
msgid ""
"This command is the same as L</resize2fs> except that it allows you to "
"specify the new size (in bytes) explicitly."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3236
msgid "rm"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3238
#, no-wrap
msgid ""
" rm path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3242
msgid "rm-rf"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3244
#, no-wrap
msgid ""
" rm-rf path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3250
msgid "rmdir"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3252
#, no-wrap
msgid ""
" rmdir path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3256
msgid "rmmountpoint"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3258
#, no-wrap
msgid ""
" rmmountpoint exemptpath\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3260
msgid ""
"This calls removes a mountpoint that was previously created with "
"L</mkmountpoint>.  See L</mkmountpoint> for full details."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3264
msgid "scrub-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3266
#, no-wrap
msgid ""
" scrub-device device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3277
msgid "scrub-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3279
#, no-wrap
msgid ""
" scrub-file file\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3289
msgid "scrub-freespace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3291
#, no-wrap
msgid ""
" scrub-freespace dir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3293
msgid ""
"This command creates the directory C<dir> and then fills it with files until "
"the filesystem is full, and scrubs the files as for L</scrub-file>, and "
"deletes them.  The intention is to scrub any free space on the partition "
"containing C<dir>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3302
msgid "set-append"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3304
msgid "append"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3306
#, no-wrap
msgid ""
" set-append append\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3317
msgid "set-autosync"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3319
msgid "autosync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3321
#, no-wrap
msgid ""
" set-autosync true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3323
msgid ""
"If C<autosync> is true, this enables autosync.  Libguestfs will make a best "
"effort attempt to run L</umount-all> followed by L</sync> when the handle is "
"closed (also if the program exits without closing handles)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3331
msgid "set-direct"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3333
msgid "direct"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3335
#, no-wrap
msgid ""
" set-direct true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3341
msgid ""
"One consequence of this is that log messages aren't caught by the library "
"and handled by L</set-log-message-callback>, but go straight to stdout."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3350
msgid "set-e2label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3352
#, no-wrap
msgid ""
" set-e2label device label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3358
msgid ""
"You can use either L</tune2fs-l> or L</get-e2label> to return the existing "
"label on a filesystem."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3361
msgid "set-e2uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3363
#, no-wrap
msgid ""
" set-e2uuid device uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3370
msgid ""
"You can use either L</tune2fs-l> or L</get-e2uuid> to return the existing "
"UUID of a filesystem."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3373
msgid "set-memsize"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3375
msgid "memsize"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3377
#, no-wrap
msgid ""
" set-memsize memsize\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3379
msgid ""
"This sets the memory size in megabytes allocated to the qemu subprocess.  "
"This only has any effect if called before L</launch>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3390
msgid "set-network"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3392
msgid "network"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3394
#, no-wrap
msgid ""
" set-network true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3402
msgid "You must call this before calling L</launch>, otherwise it has no effect."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3405
msgid "set-path"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3407
msgid "path"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3409
#, no-wrap
msgid ""
" set-path searchpath\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3418
msgid "set-qemu"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3420
msgid "qemu"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3422
#, no-wrap
msgid ""
" set-qemu qemu\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3442
msgid "set-recovery-proc"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3444
msgid "recovery-proc"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3446
#, no-wrap
msgid ""
" set-recovery-proc true|false\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3448
msgid ""
"If this is called with the parameter C<false> then L</launch> does not "
"create a recovery process.  The purpose of the recovery process is to stop "
"runaway qemu processes in the case where the main program aborts abruptly."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3453
msgid ""
"This only has any effect if called before L</launch>, and the default is "
"true."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3462
msgid "set-selinux"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3464
msgid "selinux"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3466
#, no-wrap
msgid ""
" set-selinux true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3477
msgid "set-trace"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3479
msgid "trace"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3481
#, no-wrap
msgid ""
" set-trace true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3497
msgid "set-verbose"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3499
msgid "verbose"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3501
#, no-wrap
msgid ""
" set-verbose true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3508
msgid "setcon"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3510
#, no-wrap
msgid ""
" setcon context\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3517
msgid "setxattr"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3519
#, no-wrap
msgid ""
" setxattr xattr val vallen path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3525
msgid "See also: L</lsetxattr>, L<attr(5)>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3527
msgid "sfdisk"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3529
#, no-wrap
msgid ""
" sfdisk device cyls heads sectors 'lines ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3551
msgid "See also: L</sfdisk-l>, L</sfdisk-N>, L</part-init>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3557
msgid "sfdiskM"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3559
#, no-wrap
msgid ""
" sfdiskM device 'lines ...'\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3561
msgid ""
"This is a simplified interface to the L</sfdisk> command, where partition "
"sizes are specified in megabytes only (rounded to the nearest cylinder) and "
"you don't need to specify the cyls, heads and sectors parameters which were "
"rarely if ever used anyway."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3567
msgid "See also: L</sfdisk>, the L<sfdisk(8)> manpage and L</part-disk>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3573
msgid "sfdisk-N"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3575
#, no-wrap
msgid ""
" sfdisk-N device partnum cyls heads sectors line\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3580
msgid ""
"For other parameters, see L</sfdisk>.  You should usually pass C<0> for the "
"cyls/heads/sectors parameters."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3583
msgid "See also: L</part-add>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3588
msgid "sfdisk-disk-geometry"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3590
#, no-wrap
msgid ""
" sfdisk-disk-geometry device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3592
msgid ""
"This displays the disk geometry of C<device> read from the partition table.  "
"Especially in the case where the underlying block device has been resized, "
"this can be different from the kernel's idea of the geometry (see "
"L</sfdisk-kernel-geometry>)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3600
msgid "sfdisk-kernel-geometry"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3602
#, no-wrap
msgid ""
" sfdisk-kernel-geometry device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3609
msgid "sfdisk-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3611
#, no-wrap
msgid ""
" sfdisk-l device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3617
msgid "See also: L</part-list>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3619
msgid "sh"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3621
#, no-wrap
msgid ""
" sh command\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3626
msgid "This is like L</command>, but passes the command to:"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3634
msgid "All the provisos about L</command> apply to this call."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3636
msgid "sh-lines"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3638
#, no-wrap
msgid ""
" sh-lines command\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3640
msgid "This is the same as L</sh>, but splits the result into a list of lines."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3643
msgid "See also: L</command-lines>"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3645
msgid "sleep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3647
#, no-wrap
msgid ""
" sleep secs\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3651
msgid "stat"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3653
#, no-wrap
msgid ""
" stat path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3659
msgid "statvfs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3661
#, no-wrap
msgid ""
" statvfs path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3669
msgid "strings"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3671
#, no-wrap
msgid ""
" strings path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3679
msgid "strings-e"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3681
#, no-wrap
msgid ""
" strings-e encoding path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3683
msgid ""
"This is like the L</strings> command, but allows you to specify the encoding "
"of strings that are looked for in the source file C<path>."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3693
msgid ""
"Single 7-bit-byte characters like ASCII and the ASCII-compatible parts of "
"ISO-8859-X (this is what L</strings> uses)."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3725
msgid "swapoff-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3727
#, no-wrap
msgid ""
" swapoff-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3729
msgid ""
"This command disables the libguestfs appliance swap device or partition "
"named C<device>.  See L</swapon-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3733
msgid "swapoff-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3735
#, no-wrap
msgid ""
" swapoff-file file\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3739
msgid "swapoff-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3741
#, no-wrap
msgid ""
" swapoff-label label\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3746
msgid "swapoff-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3748
#, no-wrap
msgid ""
" swapoff-uuid uuid\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3753
msgid "swapon-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3755
#, no-wrap
msgid ""
" swapon-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3757
msgid ""
"This command enables the libguestfs appliance to use the swap device or "
"partition named C<device>.  The increased memory is made available for all "
"commands, for example those run using L</command> or L</sh>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3769
msgid "swapon-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3771
#, no-wrap
msgid ""
" swapon-file file\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3773
msgid "This command enables swap to a file.  See L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3776
msgid "swapon-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3778
#, no-wrap
msgid ""
" swapon-label label\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3780
msgid ""
"This command enables swap to a labeled swap partition.  See "
"L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3783
msgid "swapon-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3785
#, no-wrap
msgid ""
" swapon-uuid uuid\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3787
msgid ""
"This command enables swap to a swap partition with the given UUID.  See "
"L</swapon-device> for other notes."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3790
msgid "sync"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3792
#, no-wrap
msgid ""
" sync\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3800
msgid "tail"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3802
#, no-wrap
msgid ""
" tail path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3810
msgid "tail-n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3812
#, no-wrap
msgid ""
" tail-n nrlines path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3825
msgid "tar-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3827
#, no-wrap
msgid ""
" tar-in (tarfile|-) directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3832
msgid "To upload a compressed tarball, use L</tgz-in> or L</txz-in>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3837
msgid "tar-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3839
#, no-wrap
msgid ""
" tar-out directory (tarfile|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3844
msgid "To download a compressed tarball, use L</tgz-out> or L</txz-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3849
msgid "tgz-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3851
#, no-wrap
msgid ""
" tgz-in (tarball|-) directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3856
msgid "To upload an uncompressed tarball, use L</tar-in>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3860
msgid "tgz-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3862
#, no-wrap
msgid ""
" tgz-out directory (tarball|-)\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3867
msgid "To download an uncompressed tarball, use L</tar-out>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3871
msgid "touch"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3873
#, no-wrap
msgid ""
" touch path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3882
msgid "truncate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3884
#, no-wrap
msgid ""
" truncate path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3889
msgid "truncate-size"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3891
#, no-wrap
msgid ""
" truncate-size path size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3896
msgid ""
"If the current file size is less than C<size> then the file is extended to "
"the required size with zero bytes.  This creates a sparse file (ie. disk "
"blocks are not allocated for the file until you write to it).  To create a "
"non-sparse file of zeroes, use L</fallocate64> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3902
msgid "tune2fs-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3904
#, no-wrap
msgid ""
" tune2fs-l device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3914
msgid "txz-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3916
#, no-wrap
msgid ""
" txz-in (tarball|-) directory\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3923
msgid "txz-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3925
#, no-wrap
msgid ""
" txz-out directory (tarball|-)\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3932
msgid "umask"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3934
#, no-wrap
msgid ""
" umask mask\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3948
msgid "See also L</get-umask>, L<umask(2)>, L</mknod>, L</mkdir>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3953
msgid "umount"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3955
msgid "unmount"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3957
#, no-wrap
msgid ""
" umount pathordevice\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3963
msgid "umount-all"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3965
msgid "unmount-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3967
#, no-wrap
msgid ""
" umount-all\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3973
msgid "upload"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3975
#, no-wrap
msgid ""
" upload (filename|-) remotefilename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:3982
msgid "See also L</download>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:3986
msgid "upload-offset"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:3988
#, no-wrap
msgid ""
" upload-offset (filename|-) remotefilename offset\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4000
msgid ""
"Note that there is no limit on the amount of data that can be uploaded with "
"this call, unlike with L</pwrite>, and this call always writes the full "
"amount unless an error occurs."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4005
msgid "See also L</upload>, L</pwrite>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4009
msgid "utimens"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4011
#, no-wrap
msgid ""
" utimens path atsecs atnsecs mtsecs mtnsecs\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4030
msgid "version"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4032
#, no-wrap
msgid ""
" version\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4059
msgid ""
"I<Note:> Don't use this call to test for availability of features.  In "
"enterprise distributions we backport features from later versions into "
"earlier versions, making this an unreliable way to test for features.  Use "
"L</available> instead."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4065
msgid "vfs-label"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4067
#, no-wrap
msgid ""
" vfs-label device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4074
msgid "To find a filesystem from the label, use L</findfs-label>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4076
msgid "vfs-type"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4078
#, no-wrap
msgid ""
" vfs-type device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4088
msgid "vfs-uuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4090
#, no-wrap
msgid ""
" vfs-uuid device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4097
msgid "To find a filesystem from the UUID, use L</findfs-uuid>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4099
msgid "vg-activate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4101
#, no-wrap
msgid ""
" vg-activate true|false 'volgroups ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4114
msgid "vg-activate-all"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4116
#, no-wrap
msgid ""
" vg-activate-all true|false\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4126
msgid "vgcreate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4128
#, no-wrap
msgid ""
" vgcreate volgroup 'physvols ...'\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4133
msgid "vglvuuids"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4135
#, no-wrap
msgid ""
" vglvuuids vgname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4140
msgid ""
"You can use this along with L</lvs> and L</lvuuid> calls to associate "
"logical volumes and volume groups."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4143
msgid "See also L</vgpvuuids>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4145
msgid "vgpvuuids"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4147
#, no-wrap
msgid ""
" vgpvuuids vgname\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4152
msgid ""
"You can use this along with L</pvs> and L</pvuuid> calls to associate "
"physical volumes and volume groups."
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4155
msgid "See also L</vglvuuids>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4157
msgid "vgremove"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4159
#, no-wrap
msgid ""
" vgremove vgname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4166
msgid "vgrename"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4168
#, no-wrap
msgid ""
" vgrename volgroup newvolgroup\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4172
msgid "vgs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4174
#, no-wrap
msgid ""
" vgs\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4182
msgid "See also L</vgs-full>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4184
msgid "vgs-full"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4186
#, no-wrap
msgid ""
" vgs-full\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4191
msgid "vgscan"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4193
#, no-wrap
msgid ""
" vgscan\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4198
msgid "vguuid"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4200
#, no-wrap
msgid ""
" vguuid vgname\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4204
msgid "wc-c"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4206
#, no-wrap
msgid ""
" wc-c path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4211
msgid "wc-l"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4213
#, no-wrap
msgid ""
" wc-l path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4218
msgid "wc-w"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4220
#, no-wrap
msgid ""
" wc-w path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4225
msgid "write"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4227
#, no-wrap
msgid ""
" write path content\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4235
msgid "write-file"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4237
#, no-wrap
msgid ""
" write-file path content size\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4260
msgid "zegrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4262
#, no-wrap
msgid ""
" zegrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4270
msgid "zegrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4272
#, no-wrap
msgid ""
" zegrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4280
msgid "zero"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4282
#, no-wrap
msgid ""
" zero device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4290
msgid "See also: L</zero-device>, L</scrub-device>."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4292
msgid "zero-device"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4294
#, no-wrap
msgid ""
" zero-device device\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4296
msgid ""
"This command writes zeroes over the entire C<device>.  Compare with L</zero> "
"which just zeroes the first few blocks of a device."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4303
msgid "zerofree"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4305
#, no-wrap
msgid ""
" zerofree device\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4318
msgid "zfgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4320
#, no-wrap
msgid ""
" zfgrep pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4328
msgid "zfgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4330
#, no-wrap
msgid ""
" zfgrepi pattern path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4338
msgid "zfile"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4340
#, no-wrap
msgid ""
" zfile meth path\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-actions.pod:4347
msgid "Since 1.0.63, use L</file> instead which can now process compressed files."
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4357
msgid "zgrep"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4359
#, no-wrap
msgid ""
" zgrep regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-actions.pod:4367
msgid "zgrepi"
msgstr ""

# type: verbatim
#: ../fish/guestfish-actions.pod:4369
#, no-wrap
msgid ""
" zgrepi regex path\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:1
msgid "alloc"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:3
msgid "allocate"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:5
#, no-wrap
msgid ""
" alloc filename size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:7
msgid ""
"This creates an empty (zeroed) file of the given size, and then adds so it "
"can be further examined."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:10 ../fish/guestfish-commands.pod:168
msgid "For more advanced image creation, see L<qemu-img(1)> utility."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:12 ../fish/guestfish-commands.pod:170
msgid "Size can be specified using standard suffixes, eg. C<1M>."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:14
msgid ""
"To create a sparse file, use L</sparse> instead.  To create a prepared disk "
"image, see L</PREPARED DISK IMAGES>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:17
msgid "copy-in"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:19
#, no-wrap
msgid ""
" copy-in local [local ...] /remotedir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:21
msgid ""
"C<copy-in> copies local files or directories recursively into the disk "
"image, placing them in the directory called C</remotedir> (which must "
"exist).  This guestfish meta-command turns into a sequence of L</tar-in> and "
"other commands as necessary."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:26
msgid ""
"Multiple local files and directories can be specified, but the last "
"parameter must always be a remote directory.  Wildcards cannot be used."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:30
msgid "copy-out"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:32
#, no-wrap
msgid ""
" copy-out remote [remote ...] localdir\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:34
msgid ""
"C<copy-out> copies remote files or directories recursively out of the disk "
"image, placing them on the host disk in a local directory called C<localdir> "
"(which must exist).  This guestfish meta-command turns into a sequence of "
"L</download>, L</tar-out> and other commands as necessary."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:40
msgid ""
"Multiple remote files and directories can be specified, but the last "
"parameter must always be a local directory.  To download to the current "
"directory, use C<.> as in:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:44
#, no-wrap
msgid ""
" copy-out /home .\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:46
msgid ""
"Wildcards cannot be used in the ordinary command, but you can use them with "
"the help of L</glob> like this:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:49
#, no-wrap
msgid ""
" glob copy-out /home/* .\n"
"\n"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:51
msgid "echo"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:53
#, no-wrap
msgid ""
" echo [params ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:55
msgid "This echos the parameters to the terminal."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:57
msgid "edit"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:59
msgid "vi"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:61
msgid "emacs"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:63
#, no-wrap
msgid ""
" edit filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:65
msgid ""
"This is used to edit a file.  It downloads the file, edits it locally using "
"your editor, then uploads the result."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:68
msgid ""
"The editor is C<$EDITOR>.  However if you use the alternate commands C<vi> "
"or C<emacs> you will get those corresponding editors."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:72
msgid "glob"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:74
#, no-wrap
msgid ""
" glob command args...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:76
msgid ""
"Expand wildcards in any paths in the args list, and run C<command> "
"repeatedly on each matching path."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:79
msgid "See L</WILDCARDS AND GLOBBING>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:81
msgid "hexedit"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:83
#, no-wrap
msgid ""
" hexedit <filename|device>\n"
" hexedit <filename|device> <max>\n"
" hexedit <filename|device> <start> <max>\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:87
msgid ""
"Use hexedit (a hex editor) to edit all or part of a binary file or block "
"device."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:90
msgid ""
"This command works by downloading potentially the whole file or device, "
"editing it locally, then uploading it.  If the file or device is large, you "
"have to specify which part you wish to edit by using C<max> and/or C<start> "
"C<max> parameters.  C<start> and C<max> are specified in bytes, with the "
"usual modifiers allowed such as C<1M> (1 megabyte)."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:97
msgid "For example to edit the first few sectors of a disk you might do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:100
#, no-wrap
msgid ""
" hexedit /dev/sda 1M\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:102
msgid ""
"which would allow you to edit anywhere within the first megabyte of the "
"disk."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:105
msgid "To edit the superblock of an ext2 filesystem on C</dev/sda1>, do:"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:107
#, no-wrap
msgid ""
" hexedit /dev/sda1 0x400 0x400\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:109
msgid "(assuming the superblock is in the standard location)."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:111
msgid ""
"This command requires the external L<hexedit(1)> program.  You can specify "
"another program to use by setting the C<HEXEDITOR> environment variable."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:115
msgid "See also L</hexdump>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:117
msgid "lcd"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:119
#, no-wrap
msgid ""
" lcd directory\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:121
msgid "Change the local directory, ie. the current directory of guestfish itself."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:124
msgid "Note that C<!cd> won't do what you might expect."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:126
msgid "man"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:128
msgid "manual"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:130
#, no-wrap
msgid ""
"  man\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:132
msgid "Opens the manual page for guestfish."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:134
msgid "more"
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:136
msgid "less"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:138
#, no-wrap
msgid ""
" more filename\n"
"\n"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:140
#, no-wrap
msgid ""
" less filename\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:142
msgid "This is used to view a file."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:144
msgid ""
"The default viewer is C<$PAGER>.  However if you use the alternate command "
"C<less> you will get the C<less> command specifically."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:147
msgid "reopen"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:149
#, no-wrap
msgid ""
"  reopen\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:151
msgid ""
"Close and reopen the libguestfs handle.  It is not necessary to use this "
"normally, because the handle is closed properly when guestfish exits.  "
"However this is occasionally useful for testing."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:155
msgid "sparse"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:157
#, no-wrap
msgid ""
" sparse filename size\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:159
msgid ""
"This creates an empty sparse file of the given size, and then adds so it can "
"be further examined."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:162
msgid ""
"In all respects it works the same as the L</alloc> command, except that the "
"image file is allocated sparsely, which means that disk blocks are not "
"assigned to the file until they are needed.  Sparse disk files only use "
"space when written to, but they are slower and there is a danger you could "
"run out of real disk space during a write operation."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:172
msgid "supported"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:174
#, no-wrap
msgid ""
" supported\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:176
msgid ""
"This command returns a list of the optional groups known to the daemon, and "
"indicates which ones are supported by this build of the libguestfs "
"appliance."
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:180
msgid "See also L<guestfs(3)/AVAILABILITY>."
msgstr ""

# type: =head2
#: ../fish/guestfish-commands.pod:182
msgid "time"
msgstr ""

# type: verbatim
#: ../fish/guestfish-commands.pod:184
#, no-wrap
msgid ""
" time command args...\n"
"\n"
msgstr ""

# type: textblock
#: ../fish/guestfish-commands.pod:186
msgid ""
"Run the command as usual, but print the elapsed time afterwards.  This can "
"be useful for benchmarking operations."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:5
msgid "libguestfs-test-tool - End user tests for libguestfs"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:9
#, no-wrap
msgid ""
" libguestfs-test-tool [--options]\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:13
msgid ""
"libguestfs-test-tool is a test program shipped with libguestfs to end users "
"and developers, to allow them to check basic libguestfs functionality is "
"working.  This is needed because libguestfs occasionally breaks for reasons "
"beyond our control: usually because of changes in the underlying qemu or "
"kernel packages, or the host environment."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:20
msgid "If you suspect a problem in libguestfs, then just run:"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:22
#, no-wrap
msgid ""
" libguestfs-test-tool\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:24
msgid "It will print lots of diagnostic messages."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:26
msgid "If it runs to completion successfully, you will see this near the end:"
msgstr ""

# type: verbatim
#: ../test-tool/libguestfs-test-tool.pod:28
#, no-wrap
msgid ""
" ===== TEST FINISHED OK =====\n"
"\n"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:30
msgid "and the test tool will exit with code 0."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:32
msgid ""
"If it fails (and/or exits with non-zero error code), please paste the "
"B<complete, unedited> output of the test tool into a bug report.  More "
"information about reporting bugs can be found on the "
"L<http://libguestfs.org/> website."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:41
msgid "I<--help>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:43
msgid "Display short usage information and exit."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:45
msgid "I<--helper /path/to/libguestfs-test-tool-helper>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:47
msgid ""
"Pass an alternate name for the helper program.  libguestfs-test-tool will "
"normally look in the C<$libexec> directory that was configured when the tool "
"was built."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:51
msgid "I<--qemu qemu_binary>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:53
msgid ""
"If you have downloaded another qemu binary, point this option at the full "
"path of the binary to try it."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:56
msgid "I<--qemudir qemu_source_dir>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:58
msgid ""
"If you have compiled qemu from source, point this option at the source "
"directory to try it."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:61
msgid "I<--timeout N>"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:63
msgid ""
"Set the launch timeout to C<N> seconds.  The default is 120 seconds which "
"does not usually need to be adjusted unless your machine is very slow."
msgstr ""

# type: =head1
#: ../test-tool/libguestfs-test-tool.pod:69
msgid "TRYING OUT A DIFFERENT VERSION OF QEMU"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:71
msgid ""
"If you have compiled another version of qemu from source and would like to "
"try that, then you can use the I<--qemudir> option to point to the qemu "
"source directory."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:75
msgid ""
"If you have downloaded a qemu binary from somewhere, use the I<--qemu> "
"option to point to the binary."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:78
msgid ""
"When using an alternate qemu with libguestfs, usually you would need to "
"write a qemu wrapper script (see section I<QEMU WRAPPERS> in "
"L<guestfs(3)>).  libguestfs-test-tool writes a temporary qemu wrapper script "
"when you use either of the I<--qemudir> or I<--qemu> options."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:85
msgid ""
"libguestfs-test-tool returns I<0> if the tests completed without error, or "
"I<1> if there was an error."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:92
msgid "/usr/libexec/libguestfs-test-tool-helper"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:94
msgid ""
"This helper program is run inside the appliance and provides additional "
"tests."
msgstr ""

# type: =item
#: ../test-tool/libguestfs-test-tool.pod:97
msgid "/usr/bin/mkisofs"
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:99
msgid ""
"The C<mkisofs> command is required in order to construct a CD-ROM ISO file "
"which is used as part of the tests."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:106
msgid ""
"For the full list of environment variables which may affect libguestfs, "
"please see the L<guestfs(3)> manual page."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:111
msgid "L<guestfs(3)>, L<http://libguestfs.org/>, L<http://qemu.org/>."
msgstr ""

# type: textblock
#: ../test-tool/libguestfs-test-tool.pod:121 ../fuse/guestmount.pod:195
msgid "Copyright (C) 2009 Red Hat Inc.  L<http://libguestfs.org/>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:5
msgid "guestmount - Mount a guest filesystem on the host using FUSE and libguestfs"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:9
#, no-wrap
msgid ""
" guestmount [--options] -a disk.img -m device [--ro] mountpoint\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:13
msgid ""
"You must I<not> use C<guestmount> in read-write mode on live virtual "
"machines.  If you do this, you risk disk corruption in the VM."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:18
msgid ""
"The guestmount program can be used to mount virtual machine filesystems and "
"other disk images on the host.  It uses libguestfs for access to the guest "
"filesystem, and FUSE (the \"filesystem in userspace\") to make it appear as "
"a mountable device."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:23
msgid ""
"Along with other options, you have to give at least one device (I<-a> "
"option) and at least one mountpoint (I<-m> option).  How this works is "
"better explained in the L<guestfish(1)> manual page, or you can use "
"L<virt-inspector(1)> and/or the wrapper script C<guestmount-wrapper> to help "
"you."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:29
msgid ""
"FUSE lets you mount filesystems as non-root.  The mountpoint must be owned "
"by you, and the filesystem will not be visible to any other users unless you "
"make certain global configuration changes to C</etc/fuse.conf>.  To unmount "
"the filesystem, use the C<fusermount -u> command."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:37
msgid ""
"For a typical Windows guest which has its main filesystem on the first "
"partition:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:40
#, no-wrap
msgid ""
" guestmount -a windows.img -m /dev/sda1 --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:42
msgid ""
"For a typical Linux guest which has a /boot filesystem on the first "
"partition, and the root filesystem on a logical volume:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:45
#, no-wrap
msgid ""
" guestmount -a linux.img -m /dev/VG/LV -m /dev/sda1:/boot --ro /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:47
msgid ""
"To get L<virt-inspector(1)> to do the hard work of detecting guest "
"mountpoints for you:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:50
#, no-wrap
msgid ""
" guestmount $(virt-inspector --ro-fish MyGuest) /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:52
msgid ""
"(or use --fish if you don't want it to be a read only mount).  The option is "
"called I<--ro-fish> or I<--fish> because these parameters are compatible "
"with L<guestfish(1)>."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:56
msgid ""
"If you don't know what filesystems are contained in a guest or disk image, "
"use L<virt-list-filesystems(1)> first:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:59
#, no-wrap
msgid ""
" virt-list-filesystems MyGuest\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:61
msgid ""
"If you want to trace the libguestfs calls but without excessive debugging, "
"we recommend:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:64
#, no-wrap
msgid ""
" guestmount [-a ... -m ...] --trace /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:66
msgid "If you want to debug the program, we recommend:"
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:68
#, no-wrap
msgid ""
" guestmount [-a ... -m ...] --trace --verbose /mnt\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:76
msgid "Add a block device or virtual machine image."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:78
msgid "B<--dir-cache-timeout N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:80
msgid ""
"Set the readdir cache timeout to I<N> seconds, the default being 60 "
"seconds.  The readdir cache [actually, there are several semi-independent "
"caches] is populated after a readdir(2) call with the stat and extended "
"attributes of the files in the directory, in anticipation that they will be "
"requested soon after."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:86
msgid ""
"There is also a different attribute cache implemented by FUSE (see the FUSE "
"option I<-o attr_timeout>), but the FUSE cache does not anticipate future "
"requests, only cache existing ones."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:90
msgid "B<--fuse-help>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:92
msgid "Display help on special FUSE options (see I<-o> below)."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:96
msgid "Display brief help and exit."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:98
msgid "B<-m dev[:mnt]> | B<--mount dev[:mnt]>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:100
msgid ""
"Mount the named partition or logical volume on the given mountpoint B<in the "
"guest> (this has nothing to do with mountpoints in the host)."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:103
msgid ""
"If the mountpoint is omitted, it defaults to C</>.  You have to mount "
"something on C</>."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:108
msgid ""
"By default, we attempt to sync the guest disk when the FUSE mountpoint is "
"unmounted.  If you specify this option, then we don't attempt to sync the "
"disk.  See the discussion of autosync in the L<guestfs(3)> manpage."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:113
msgid "B<-o option> | B<--option option>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:115
msgid "Pass extra options to FUSE."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:117
msgid ""
"To get a list of all the extra options supported by FUSE, use the command "
"below.  Note that only the FUSE I<-o> options can be passed, and only some "
"of them are a good idea."
msgstr ""

# type: verbatim
#: ../fuse/guestmount.pod:121
#, no-wrap
msgid ""
" guestmount --fuse-help\n"
"\n"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:123
msgid "Some potentially useful FUSE options:"
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:127
msgid "B<-o allow_other>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:129
msgid "Allow other users to see the filesystem."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:131
msgid "B<-o attr_timeout=N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:133
msgid "Enable attribute caching by FUSE, and set the timeout to I<N> seconds."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:135
msgid "B<-o kernel_cache>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:137
msgid ""
"Allow the kernel to cache files (reduces the number of reads that have to go "
"through the L<guestfs(3)> API).  This is generally a good idea if you can "
"afford the extra memory usage."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:141
msgid "B<-o uid=N> B<-o gid=N>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:143
msgid ""
"Use these options to map all UIDs and GIDs inside the guest filesystem to "
"the chosen values."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:150
msgid ""
"Add devices and mount everything read-only.  Also disallow writes and make "
"the disk appear read-only to FUSE."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:153
msgid ""
"This is highly recommended if you are not going to edit the guest disk.  If "
"the guest is running and this option is I<not> supplied, then there is a "
"strong risk of disk corruption in the guest.  We try to prevent this from "
"happening, but it is not always possible."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:160
msgid "Enable SELinux support for the guest."
msgstr ""

# type: =item
#: ../fuse/guestmount.pod:162
msgid "B<--trace>"
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:164
msgid "Trace libguestfs calls (to stderr)."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:166
msgid "This also stops the daemon from forking into the background."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:170
msgid "Enable verbose messages from underlying libguestfs."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:174
msgid "Display the program version and exit."
msgstr ""

# type: textblock
#: ../fuse/guestmount.pod:180
msgid ""
"L<guestfish(1)>, L<virt-inspector(1)>, L<virt-cat(1)>, L<virt-edit(1)>, "
"L<virt-tar(1)>, L<guestfs(3)>, L<http://libguestfs.org/>, "
"L<http://fuse.sf.net/>."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:40
msgid ""
"virt-inspector - Display OS version, kernel, drivers, mount points, "
"applications, etc. in a virtual machine"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:44
#, no-wrap
msgid ""
" virt-inspector [--connect URI] domname\n"
"\n"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:46
#, no-wrap
msgid ""
" virt-inspector guest.img [guest.img ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:50
msgid ""
"B<virt-inspector> examines a virtual machine and tries to determine the "
"version of the OS, the kernel version, what drivers are installed, whether "
"the virtual machine is fully virtualized (FV) or para-virtualized (PV), what "
"applications are installed and more."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:55
msgid ""
"Virt-inspector can produce output in several formats, including a readable "
"text report, and XML for feeding into other programs."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:58
msgid ""
"In the normal usage, use C<virt-inspector domname> where C<domname> is the "
"libvirt domain (see: C<virsh list --all>)."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:61
msgid ""
"You can also run virt-inspector directly on disk images from a single "
"virtual machine.  Use C<virt-inspector guest.img>.  In rare cases a domain "
"has several block devices, in which case you should list them one after "
"another, with the first corresponding to the guest's C</dev/sda>, the second "
"to the guest's C</dev/sdb> and so on."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:67
msgid ""
"Virt-inspector can only inspect and report upon I<one domain at a time>.  To "
"inspect several virtual machines, you have to run virt-inspector several "
"times (for example, from a shell script for-loop)."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:72
msgid ""
"Because virt-inspector needs direct access to guest images, it won't "
"normally work over remote libvirt connections."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:85 ../tools/virt-edit.pl:83 ../tools/virt-win-reg.pl:182 ../tools/virt-df.pl:81 ../tools/virt-ls.pl:89 ../tools/virt-list-filesystems.pl:60 ../tools/virt-cat.pl:90 ../tools/virt-tar.pl:109 ../tools/virt-rescue.pl:113 ../tools/virt-make-fs.pl:163 ../tools/virt-list-partitions.pl:61
msgid "Display brief help."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:91 ../tools/virt-edit.pl:89 ../tools/virt-win-reg.pl:188 ../tools/virt-df.pl:87 ../tools/virt-ls.pl:95 ../tools/virt-resize.pl:273 ../tools/virt-list-filesystems.pl:66 ../tools/virt-cat.pl:96 ../tools/virt-tar.pl:115 ../tools/virt-rescue.pl:119 ../tools/virt-make-fs.pl:169 ../tools/virt-list-partitions.pl:67
msgid "B<--version>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:93 ../tools/virt-edit.pl:91 ../tools/virt-win-reg.pl:190 ../tools/virt-df.pl:89 ../tools/virt-ls.pl:97 ../tools/virt-resize.pl:275 ../tools/virt-list-filesystems.pl:68 ../tools/virt-cat.pl:98 ../tools/virt-tar.pl:117 ../tools/virt-rescue.pl:121 ../tools/virt-make-fs.pl:171 ../tools/virt-list-partitions.pl:69
msgid "Display version number and exit."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:99 ../tools/virt-edit.pl:113 ../tools/virt-win-reg.pl:204 ../tools/virt-df.pl:95 ../tools/virt-ls.pl:103 ../tools/virt-list-filesystems.pl:74 ../tools/virt-cat.pl:104 ../tools/virt-tar.pl:123 ../tools/virt-rescue.pl:135 ../tools/virt-list-partitions.pl:75
msgid "B<--connect URI> | B<-c URI>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:101 ../tools/virt-edit.pl:115 ../tools/virt-win-reg.pl:206 ../tools/virt-df.pl:97 ../tools/virt-ls.pl:105 ../tools/virt-list-filesystems.pl:76 ../tools/virt-cat.pl:106 ../tools/virt-tar.pl:125 ../tools/virt-rescue.pl:137 ../tools/virt-list-partitions.pl:77
msgid ""
"If using libvirt, connect to the given I<URI>.  If omitted, then we connect "
"to the default libvirt hypervisor."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:104
msgid ""
"Libvirt is only used if you specify a C<domname> on the command line.  If "
"you specify guest block devices directly, then libvirt is not used at all."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:114
msgid ""
"The following options select the output format.  Use only one of them.  The "
"default is a readable text report."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:119
msgid "B<--text> (default)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:121
msgid "Plain text report."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:123
msgid "B<--none>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:125
msgid "Produce no output at all."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:127
msgid "B<--xml>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:129
msgid ""
"If you select I<--xml> then you get XML output which can be fed to other "
"programs."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:132
msgid "B<--yaml>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:134
msgid ""
"If you select I<--yaml> then you get YAML output which can be fed to other "
"programs."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:137
msgid "B<--perl>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:139
msgid ""
"If you select I<--perl> then you get Perl structures output which can be "
"used directly in another Perl program."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:142
msgid "B<--fish>"
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:144
msgid "B<--ro-fish>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:146
msgid ""
"If you select I<--fish> then we print a L<guestfish(1)> command line which "
"will automatically mount up the filesystems on the correct mount points.  "
"Try this for example:"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:150
#, no-wrap
msgid ""
" guestfish $(virt-inspector --fish guest.img)\n"
"\n"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:152
msgid ""
"I<--ro-fish> is the same, but the I<--ro> option is passed to guestfish so "
"that the filesystems are mounted read-only."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:155
msgid "B<--query>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:157
msgid ""
"In \"query mode\" we answer common questions about the guest, such as "
"whether it is fullvirt or needs a Xen hypervisor to run."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:160
msgid "See section I<QUERY MODE> below."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:166
msgid "B<--windows-registry>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:168
msgid ""
"This flag is ignored for compatibility with earlier releases of the "
"software."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:171
msgid ""
"In this version, if L<Win::Hivex(3)> is available, then we attempt to parse "
"information out of the Registry for any Windows guest."
msgstr ""

# type: =head1
#: ../inspector/virt-inspector.pl:218
msgid "OUTPUT FORMAT"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:220
#, no-wrap
msgid ""
" Operating system(s)\n"
" -------------------\n"
" Linux (distro + version)\n"
" Windows (version)\n"
"    |\n"
"    |\n"
"    +--- Filesystems ---------- Installed apps --- Kernel & drivers\n"
"         -----------            --------------     ----------------\n"
"         mount point => device  List of apps       Extra information\n"
"         mount point => device  and versions       about kernel(s)\n"
"              ...                                  and drivers\n"
"         swap => swap device\n"
"         (plus lots of extra information\n"
"         about each filesystem)\n"
"\n"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:235
msgid "The output of virt-inspector is a complex two-level data structure."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:237
msgid ""
"At the top level is a list of the operating systems installed on the guest.  "
"(For the vast majority of guests, only a single OS is installed.)  The data "
"returned for the OS includes the name (Linux, Windows), the distribution and "
"version."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:242
msgid "The diagram above shows what we return for each OS."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:244
msgid ""
"With the I<--xml> option the output is mapped into an XML document.  There "
"is a RELAX-NG schema for this XML in the file I<virt-inspector.rng> which "
"normally ships with virt-inspector, or can be found in the source."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:249
msgid ""
"With the I<--fish> or I<--ro-fish> option the mount points are mapped to "
"L<guestfish(1)> command line parameters, so that you can go in afterwards "
"and inspect the guest with everything mounted in the right place.  For "
"example:"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:254
#, no-wrap
msgid ""
" guestfish $(virt-inspector --ro-fish guest.img)\n"
" ==> guestfish --ro -a guest.img -m /dev/VG/LV:/ -m /dev/sda1:/boot\n"
"\n"
msgstr ""

# type: =head1
#: ../inspector/virt-inspector.pl:589
msgid "QUERY MODE"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:591
msgid ""
"When you use C<virt-inspector --query>, the output is a series of lines of "
"the form:"
msgstr ""

# type: verbatim
#: ../inspector/virt-inspector.pl:594
#, no-wrap
msgid ""
" windows=no\n"
" linux=yes\n"
" fullvirt=yes\n"
" xen_pv_drivers=no\n"
"\n"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:599
msgid ""
"(each answer is usually C<yes> or C<no>, or the line is completely missing "
"if we could not determine the answer at all)."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:602
msgid ""
"If the guest is multiboot, you can get apparently conflicting answers "
"(eg. C<windows=yes> and C<linux=yes>, or a guest which is both fullvirt and "
"has a Xen PV kernel).  This is normal, and just means that the guest can do "
"both things, although it might require operator intervention such as "
"selecting a boot option when the guest is booting."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:609
msgid "This section describes the full range of answers possible."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:630
msgid "windows=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:632
msgid "Answer C<yes> if Microsoft Windows is installed in the guest."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:645
msgid "linux=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:647
msgid "Answer C<yes> if a Linux kernel is installed in the guest."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:660
msgid "rhel=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:662
msgid "Answer C<yes> if the guest contains Red Hat Enterprise Linux."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:676
msgid "fedora=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:678
msgid "Answer C<yes> if the guest contains the Fedora Linux distribution."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:691
msgid "debian=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:693
msgid "Answer C<yes> if the guest contains the Debian Linux distribution."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:706
msgid "fullvirt=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:708
msgid ""
"Answer C<yes> if there is at least one operating system kernel installed in "
"the guest which runs fully virtualized.  Such a guest would require a "
"hypervisor which supports full system virtualization."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:731
msgid "xen_domU_kernel=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:733
msgid ""
"Answer C<yes> if there is at least one Linux kernel installed in the guest "
"which is compiled as a Xen DomU (a Xen paravirtualized guest)."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:753
msgid "xen_pv_drivers=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:755
msgid ""
"Answer C<yes> if the guest has Xen paravirtualized drivers installed "
"(usually the kernel itself will be fully virtualized, but the PV drivers "
"have been installed by the administrator for performance reasons)."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:777
msgid "virtio_drivers=(yes|no)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:779
msgid ""
"Answer C<yes> if the guest has virtio paravirtualized drivers installed.  "
"Virtio drivers are commonly used to improve the performance of KVM."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:800
msgid "userspace_arch=(x86_64|...)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:802
msgid "Print the architecture of userspace."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:804 ../inspector/virt-inspector.pl:825
msgid "NB. For multi-boot VMs this can print several lines."
msgstr ""

# type: =item
#: ../inspector/virt-inspector.pl:821
msgid "kernel_arch=(x86_64|...)"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:823
msgid "Print the architecture of the kernel."
msgstr ""

# type: =head1
#: ../inspector/virt-inspector.pl:846 ../tools/virt-edit.pl:325 ../tools/virt-win-reg.pl:142 ../tools/virt-win-reg.pl:461 ../tools/virt-df.pl:566 ../tools/virt-ls.pl:210 ../tools/virt-resize.pl:1440 ../tools/virt-list-filesystems.pl:191 ../tools/virt-cat.pl:163 ../tools/virt-tar.pl:257 ../tools/virt-rescue.pl:231 ../tools/virt-make-fs.pl:527 ../tools/virt-list-partitions.pl:229
msgid "SHELL QUOTING"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:848 ../tools/virt-edit.pl:327 ../tools/virt-win-reg.pl:463 ../tools/virt-df.pl:568 ../tools/virt-ls.pl:212 ../tools/virt-resize.pl:1442 ../tools/virt-list-filesystems.pl:193 ../tools/virt-cat.pl:165 ../tools/virt-tar.pl:259 ../tools/virt-rescue.pl:233 ../tools/virt-make-fs.pl:529 ../tools/virt-list-partitions.pl:231
msgid ""
"Libvirt guest names can contain arbitrary characters, some of which have "
"meaning to the shell such as C<#> and space.  You may need to quote or "
"escape these characters on the command line.  See the shell manual page "
"L<sh(1)> for details."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:855 ../tools/virt-df.pl:575
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<Sys::Guestfs(3)>, L<Sys::Guestfs::Lib(3)>, "
"L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:864 ../tools/virt-edit.pl:346 ../tools/virt-win-reg.pl:496 ../tools/virt-df.pl:584 ../tools/virt-ls.pl:230 ../tools/virt-resize.pl:1471 ../tools/virt-list-filesystems.pl:212 ../tools/virt-cat.pl:182 ../tools/virt-tar.pl:277 ../tools/virt-rescue.pl:250 ../tools/virt-make-fs.pl:561 ../tools/virt-list-partitions.pl:249
msgid "Richard W.M. Jones L<http://people.redhat.com/~rjones/>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:866
msgid "Matthew Booth L<mbooth@redhat.com>"
msgstr ""

# type: textblock
#: ../inspector/virt-inspector.pl:870 ../tools/virt-ls.pl:234 ../tools/virt-list-filesystems.pl:216 ../tools/virt-cat.pl:186 ../tools/virt-tar.pl:281
msgid "Copyright (C) 2009 Red Hat Inc."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:35
msgid "virt-edit - Edit a file in a virtual machine"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:39
#, no-wrap
msgid ""
" virt-edit [--options] domname file\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:41
#, no-wrap
msgid ""
" virt-edit [--options] disk.img [disk.img ...] file\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:43
#, no-wrap
msgid ""
" virt-edit [domname|disk.img] file -e 'expr'\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:47
msgid ""
"You must I<not> use C<virt-edit> on live virtual machines.  If you do this, "
"you risk disk corruption in the VM.  C<virt-edit> tries to stop you from "
"doing this, but doesn't catch all cases."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:53
msgid ""
"C<virt-edit> is a command line tool to edit C<file> where C<file> exists in "
"the named virtual machine (or disk image)."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:56
msgid ""
"If you want to just view a file, use L<virt-cat(1)>.  For more complex cases "
"you should look at the L<guestfish(1)> tool."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:61
msgid "Edit the named files interactively:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:63
#, no-wrap
msgid ""
" virt-edit mydomain /boot/grub/grub.conf\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:65
#, no-wrap
msgid ""
" virt-edit mydomain /etc/passwd\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:67
msgid ""
"You can also edit files non-interactively (see L</NON-INTERACTIVE EDITING> "
"below).  To change the init default level to 5:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:71
#, no-wrap
msgid ""
" virt-edit mydomain /etc/inittab -e 's/^id:.*/id:5:initdefault:/'\n"
"\n"
msgstr ""

# type: =item
#: ../tools/virt-edit.pl:97
msgid "B<--backup extension> | B<-b extension>"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:99
msgid ""
"Create a backup of the original file I<in the guest disk image>.  The backup "
"has the original filename with C<extension> added."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:102
msgid ""
"Usually the first character of C<extension> would be a dot C<.> so you would "
"write:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:105
#, no-wrap
msgid ""
" virt-edit -b .orig [etc]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:107
msgid "By default, no backup file is made."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:118 ../tools/virt-win-reg.pl:209 ../tools/virt-df.pl:100 ../tools/virt-ls.pl:108 ../tools/virt-list-filesystems.pl:79 ../tools/virt-cat.pl:109 ../tools/virt-tar.pl:128 ../tools/virt-rescue.pl:140 ../tools/virt-list-partitions.pl:80
msgid ""
"If you specify guest block devices directly, then libvirt is not used at "
"all."
msgstr ""

# type: =item
#: ../tools/virt-edit.pl:125
msgid "B<--expr EXPR> | B<-e EXPR>"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:127
msgid ""
"Instead of launching the external editor, non-interactively apply the Perl "
"expression C<EXPR> to each line in the file.  See L</NON-INTERACTIVE "
"EDITING> below."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:131
msgid ""
"Be careful to properly quote the expression to prevent it from being altered "
"by the shell."
msgstr ""

# type: =head1
#: ../tools/virt-edit.pl:250
msgid "NON-INTERACTIVE EDITING"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:252
msgid ""
"C<virt-edit> normally calls out to C<$EDITOR> (or vi) so the system "
"administrator can interactively edit the file."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:255
msgid ""
"There are two ways also to use C<virt-edit> from scripts in order to make "
"automated edits to files.  (Note that although you I<can> use C<virt-edit> "
"like this, it's less error-prone to write scripts directly using the "
"libguestfs API and Augeas for configuration file editing.)"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:261
msgid ""
"The first method is to temporarily set C<$EDITOR> to any script or program "
"you want to run.  The script is invoked as C<$EDITOR tmpfile> and it should "
"update C<tmpfile> in place however it likes."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:265
msgid ""
"The second method is to use the C<-e> parameter of C<virt-edit> to run a "
"short Perl snippet in the style of L<sed(1)>.  For example to replace all "
"instances of C<foo> with C<bar> in a file:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:269
#, no-wrap
msgid ""
" virt-edit domname filename -e 's/foo/bar/'\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:271
msgid ""
"The full power of Perl regular expressions can be used (see L<perlre(1)>).  "
"For example to delete root's password you could do:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:274
#, no-wrap
msgid ""
" virt-edit domname /etc/passwd -e 's/^root:.*?:/root::/'\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:276
msgid ""
"What really happens is that the snippet is evaluated as a Perl expression "
"for each line of the file.  The line, including the final C<\\n>, is passed "
"in C<$_> and the expression should update C<$_> or leave it unchanged."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:281
msgid ""
"To delete a line, set C<$_> to the empty string.  For example, to delete the "
"C<apache> user account from the password file you can do:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:284
#, no-wrap
msgid ""
" virt-edit mydomain /etc/passwd -e '$_ = \"\" if /^apache:/'\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:286
msgid ""
"To insert a line, prepend or append it to C<$_>.  However appending lines to "
"the end of the file is rather difficult this way since there is no concept "
"of \"last line of the file\" - your expression just doesn't get called "
"again.  You might want to use the first method (setting C<$EDITOR>) if you "
"want to do this."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:292
msgid ""
"The variable C<$lineno> contains the current line number.  As is "
"traditional, the first line in the file is number C<1>."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:295
msgid ""
"The return value from the expression is ignored, but the expression may call "
"C<die> in order to abort the whole program, leaving the original file "
"untouched."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:299
msgid ""
"Remember when matching the end of a line that C<$_> may contain the final "
"C<\\n>, or (for DOS files) C<\\r\\n>, or if the file does not end with a "
"newline then neither of these.  Thus to match or substitute some text at the "
"end of a line, use this regular expression:"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:304
#, no-wrap
msgid ""
" /some text(\\r?\\n)?$/\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:306
msgid ""
"Alternately, use the perl C<chomp> function, being careful not to chomp "
"C<$_> itself (since that would remove all newlines from the file):"
msgstr ""

# type: verbatim
#: ../tools/virt-edit.pl:310
#, no-wrap
msgid ""
" my $m = $_; chomp $m; $m =~ /some text$/\n"
"\n"
msgstr ""

# type: =item
#: ../tools/virt-edit.pl:316
msgid "C<EDITOR>"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:318
msgid ""
"If set, this string is used as the editor.  It may contain arguments, "
"eg. C<\"emacs -nw\">"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:321
msgid "If not set, C<vi> is used."
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:334
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-cat(1)>, L<Sys::Guestfs(3)>, "
"L<Sys::Guestfs::Lib(3)>, L<Sys::Virt(3)>, L<http://libguestfs.org/>, "
"L<perl(1)>, L<perlre(1)>."
msgstr ""

# type: =head1
#: ../tools/virt-edit.pl:344 ../tools/virt-win-reg.pl:494 ../tools/virt-df.pl:582 ../tools/virt-ls.pl:228 ../tools/virt-resize.pl:1469 ../tools/virt-list-filesystems.pl:210 ../tools/virt-cat.pl:180 ../tools/virt-tar.pl:275 ../tools/virt-rescue.pl:248 ../tools/virt-make-fs.pl:559 ../tools/virt-list-partitions.pl:247
msgid "AUTHOR"
msgstr ""

# type: textblock
#: ../tools/virt-edit.pl:350 ../tools/virt-df.pl:588 ../tools/virt-rescue.pl:254 ../tools/virt-list-partitions.pl:253
msgid "Copyright (C) 2009-2010 Red Hat Inc."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:38
msgid ""
"virt-win-reg - Export and merge Windows Registry entries from a Windows "
"guest"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:42
#, no-wrap
msgid ""
" virt-win-reg domname 'HKLM\\Path\\To\\Subkey'\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:44
#, no-wrap
msgid ""
" virt-win-reg domname 'HKLM\\Path\\To\\Subkey' name\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:46
#, no-wrap
msgid ""
" virt-win-reg domname 'HKLM\\Path\\To\\Subkey' @\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:48
#, no-wrap
msgid ""
" virt-win-reg --merge domname [input.reg ...]\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:50
#, no-wrap
msgid ""
" virt-win-reg [--options] disk.img ... # instead of domname\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:54
msgid ""
"You must I<not> use C<virt-win-reg> with the C<--merge> option on live "
"virtual machines.  If you do this, you I<will> get irreversible disk "
"corruption in the VM.  C<virt-win-reg> tries to stop you from doing this, "
"but doesn't catch all cases."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:59
msgid ""
"Modifying the Windows Registry is an inherently risky operation.  The format "
"is deliberately obscure and undocumented, and Registry changes can leave the "
"system unbootable.  Therefore when using the C<--merge> option, make sure "
"you have a reliable backup first."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:66
msgid ""
"This program can export and merge Windows Registry entries from a Windows "
"guest."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:69
msgid ""
"The first parameter is the libvirt guest name or the raw disk image of a "
"Windows guest."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:72
msgid ""
"If C<--merge> is I<not> specified, then the chosen registry key is "
"displayed/exported (recursively).  For example:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:75
#, no-wrap
msgid ""
" $ virt-win-reg Windows7 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft'\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:77
msgid "You can also display single values from within registry keys, for example:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:80
#, no-wrap
msgid ""
" $ cvkey='HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'\n"
" $ virt-win-reg Windows7 $cvkey ProductName\n"
" Windows 7 Enterprise\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:84
msgid ""
"With C<--merge>, you can merge a textual regedit file into the Windows "
"Registry:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:87
#, no-wrap
msgid ""
" $ virt-win-reg --merge Windows7 changes.reg\n"
"\n"
msgstr ""

# type: =head2
#: ../tools/virt-win-reg.pl:89
msgid "SUPPORTED SYSTEMS"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:91
msgid ""
"The program currently supports Windows NT-derived guests starting with "
"Windows XP through to at least Windows 7."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:94
msgid ""
"Registry support is done for C<HKEY_LOCAL_MACHINE\\SAM>, "
"C<HKEY_LOCAL_MACHINE\\SECURITY>, C<HKEY_LOCAL_MACHINE\\SOFTWARE>, "
"C<HKEY_LOCAL_MACHINE\\SYSTEM> and C<HKEY_USERS\\.DEFAULT>."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:98
msgid ""
"You can use C<HKLM> as a shorthand for C<HKEY_LOCAL_MACHINE>, and C<HKU> for "
"C<HKEY_USERS>."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:101
msgid ""
"C<HKEY_USERS\\$SID> and C<HKEY_CURRENT_USER> are B<not> supported at this "
"time."
msgstr ""

# type: =head2
#: ../tools/virt-win-reg.pl:104
msgid "NOTE"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:106
msgid ""
"This program is only meant for simple access to the registry.  If you want "
"to do complicated things with the registry, we suggest you download the "
"Registry hive files from the guest using L<libguestfs(3)> or L<guestfish(1)> "
"and access them locally, eg. using L<hivex(3)>, L<hivexsh(1)> or "
"L<hivexregedit(1)>."
msgstr ""

# type: =head2
#: ../tools/virt-win-reg.pl:112
msgid "ENCODING"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:114
msgid ""
"C<virt-win-reg> expects that regedit files have already been reencoded in "
"the local encoding.  Usually on Linux hosts, this means UTF-8 with "
"Unix-style line endings.  Since Windows regedit files are often in UTF-16LE "
"with Windows-style line endings, you may need to reencode the whole file "
"before or after processing."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:120
msgid ""
"To reencode a file from Windows format to Linux (before processing it with "
"the C<--merge> option), you would do something like this:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:123
#, no-wrap
msgid ""
" iconv -f utf-16le -t utf-8 < win.reg | dos2unix > linux.reg\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:125
msgid ""
"To go in the opposite direction, after exporting and before sending the file "
"to a Windows user, do something like this:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:128
#, no-wrap
msgid ""
" unix2dos linux.reg | iconv -f utf-8 -t utf-16le > win.reg\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:130
msgid "For more information about encoding, see L<Win::Hivex::Regedit(3)>."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:132
msgid ""
"If you are unsure about the current encoding, use the L<file(1)> command.  "
"Recent versions of Windows regedit.exe produce a UTF-16LE file with "
"Windows-style (CRLF) line endings, like this:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:136
#, no-wrap
msgid ""
" $ file software.reg\n"
" software.reg: Little-endian UTF-16 Unicode text, with very long lines,\n"
" with CRLF line terminators\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:140
msgid "This file would need conversion before you could C<--merge> it."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:144
msgid ""
"Be careful when passing parameters containing C<\\> (backslash) in the "
"shell.  Usually you will have to use 'single quotes' or double backslashes "
"(but not both) to protect them from the shell."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:148
msgid "Paths and value names are case-insensitive."
msgstr ""

# type: =head2
#: ../tools/virt-win-reg.pl:150
msgid "CurrentControlSet etc."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:152
msgid ""
"Registry keys like C<CurrentControlSet> don't really exist in the Windows "
"Registry at the level of the hive file, and therefore you cannot modify "
"these."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:156
msgid ""
"C<CurrentControlSet> is usually an alias for C<ControlSet001>.  In some "
"circumstances it might refer to another control set.  The way to find out is "
"to look at the C<HKLM\\SYSTEM\\Select> key:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:160
#, no-wrap
msgid ""
" # virt-win-reg WindowsGuest 'HKLM\\SYSTEM\\Select'\n"
" [HKEY_LOCAL_MACHINE\\SYSTEM\\Select]\n"
" \"Current\"=dword:00000001\n"
" \"Default\"=dword:00000001\n"
" \"Failed\"=dword:00000000\n"
" \"LastKnownGood\"=dword:00000002\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:167
msgid "\"Default\" is the one which Windows will choose when it boots."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:169
msgid "Similarly, other C<Current...> keys in the path may need to be replaced."
msgstr ""

# type: =item
#: ../tools/virt-win-reg.pl:196 ../tools/virt-make-fs.pl:177
msgid "B<--debug>"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:198 ../tools/virt-resize.pl:501
msgid "Enable debugging messages."
msgstr ""

# type: =item
#: ../tools/virt-win-reg.pl:216
msgid "B<--merge>"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:218
msgid ""
"In merge mode, this merges a textual regedit file into the Windows Registry "
"of the virtual machine.  If this flag is I<not> given then virt-win-reg "
"displays or exports Registry entries instead."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:222
msgid ""
"Note that C<--merge> is I<unsafe> to use on live virtual machines, and will "
"result in disk corruption.  However exporting (without this flag)  is always "
"safe."
msgstr ""

# type: =item
#: ../tools/virt-win-reg.pl:230
msgid "B<--encoding> UTF-16LE|ASCII"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:232
msgid ""
"When merging (only), you may need to specify the encoding for strings to be "
"used in the hive file.  This is explained in detail in "
"L<Win::Hivex::Regedit(3)/ENCODING STRINGS>."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:236
msgid ""
"The default is to use UTF-16LE, which should work with recent versions of "
"Windows."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:470
msgid ""
"L<hivex(3)>, L<hivexsh(1)>, L<hivexregedit(1)>, L<guestfs(3)>, "
"L<guestfish(1)>, L<virt-cat(1)>, L<Sys::Guestfs(3)>, "
"L<Sys::Guestfs::Lib(3)>, L<Win::Hivex(3)>, L<Win::Hivex::Regedit(3)>, "
"L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:485 ../tools/virt-make-fs.pl:550
msgid ""
"When reporting bugs, please enable debugging and capture the I<complete> "
"output:"
msgstr ""

# type: verbatim
#: ../tools/virt-win-reg.pl:488
#, no-wrap
msgid ""
" export LIBGUESTFS_DEBUG=1\n"
" virt-win-reg --debug [... rest ...] > /tmp/virt-win-reg.log 2>&1\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:491
msgid ""
"Attach /tmp/virt-win-reg.log to a new bug report at "
"L<https://bugzilla.redhat.com/>"
msgstr ""

# type: textblock
#: ../tools/virt-win-reg.pl:500 ../tools/virt-resize.pl:1475 ../tools/virt-make-fs.pl:565
msgid "Copyright (C) 2010 Red Hat Inc."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:36
msgid "virt-df - Display free space on virtual filesystems"
msgstr ""

# type: verbatim
#: ../tools/virt-df.pl:40
#, no-wrap
msgid ""
" virt-df [--options]\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-df.pl:42
#, no-wrap
msgid ""
" virt-df [--options] domname\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-df.pl:44
#, no-wrap
msgid ""
" virt-df [--options] disk.img [disk.img ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:48
msgid ""
"C<virt-df> is a command line tool to display free space on virtual machine "
"filesystems.  Unlike other tools, it doesn't just display the amount of "
"space allocated to a virtual machine, but can look inside the virtual "
"machine to see how much space is really being used."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:53
msgid ""
"It is like the L<df(1)> command, but for virtual machines, except that it "
"also works for Windows virtual machines."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:56
msgid ""
"If used without any arguments, C<virt-df> checks with libvirt to get a list "
"of all active and inactive guests, and performs a C<df>-type operation on "
"each one in turn, printing out the results."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:60
msgid ""
"If used with any argument(s), C<virt-df> performs a C<df>-type operation on "
"either the single named libvirt domain, or on the disk image(s) listed on "
"the command line (which must all belong to a single VM).  In this mode (with "
"arguments), C<virt-df> will I<only work for a single guest>.  If you want to "
"run on multiple guests, then you have to invoke C<virt-df> multiple times."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:67
msgid ""
"Use the C<--csv> option to get a format which can be easily parsed by other "
"programs.  Other options are mostly similar to standard C<df> options.  See "
"below for the complete list."
msgstr ""

# type: =item
#: ../tools/virt-df.pl:107
msgid "B<--csv>"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:109
msgid ""
"Write out the results in CSV format (comma-separated values).  This format "
"can be imported easily into databases and spreadsheets, but read L</NOTE "
"ABOUT CSV FORMAT> below."
msgstr ""

# type: =item
#: ../tools/virt-df.pl:117
msgid "B<--human-readable> | B<-h>"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:119
msgid "Print sizes in human-readable format."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:121
msgid "You are not allowed to use I<-h> and I<--csv> at the same time."
msgstr ""

# type: =item
#: ../tools/virt-df.pl:127
msgid "B<--inodes> | B<-i>"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:129
msgid "Print inodes instead of blocks."
msgstr ""

# type: =item
#: ../tools/virt-df.pl:135
msgid "B<--one-per-guest>"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:137
msgid ""
"Run one libguestfs appliance per guest.  Normally C<virt-df> will add the "
"disks from several guests to a single libguestfs appliance."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:140
msgid "You might use this option in the following circumstances:"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:146
msgid ""
"If you think an untrusted guest might actively try to exploit the libguestfs "
"appliance kernel, then this prevents one guest from interfering with the "
"stats printed for another guest."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:152
msgid ""
"If the kernel has a bug which stops it from accessing a filesystem in one "
"guest (see for example RHBZ#635373) then this allows libguestfs to continue "
"and report stats for further guests."
msgstr ""

# type: =head1
#: ../tools/virt-df.pl:542
msgid "NOTE ABOUT CSV FORMAT"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:544
msgid ""
"Comma-separated values (CSV) is a deceptive format.  It I<seems> like it "
"should be easy to parse, but it is definitely not easy to parse."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:547
msgid ""
"Myth: Just split fields at commas.  Reality: This does I<not> work "
"reliably.  This example has two columns:"
msgstr ""

# type: verbatim
#: ../tools/virt-df.pl:550
#, no-wrap
msgid ""
" \"foo,bar\",baz\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:552
msgid ""
"Myth: Read the file one line at a time.  Reality: This does I<not> work "
"reliably.  This example has one row:"
msgstr ""

# type: verbatim
#: ../tools/virt-df.pl:555
#, no-wrap
msgid ""
" \"foo\n"
" bar\",baz\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:558
msgid ""
"For shell scripts, use C<csvtool> (L<http://merjis.com/developers/csv> also "
"packaged in major Linux distributions)."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:561
msgid ""
"For other languages, use a CSV processing library (eg. C<Text::CSV> for Perl "
"or Python's built-in csv library)."
msgstr ""

# type: textblock
#: ../tools/virt-df.pl:564
msgid "Most spreadsheets and databases can import CSV directly."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:35
msgid "virt-ls - List files in a virtual machine"
msgstr ""

# type: verbatim
#: ../tools/virt-ls.pl:39
#, no-wrap
msgid ""
" virt-ls [--options] domname directory\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-ls.pl:41
#, no-wrap
msgid ""
" virt-ls [--options] disk.img [disk.img ...] directory\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:45
msgid ""
"C<virt-ls> is a command line tool to list the names of files in a directory "
"inside a virtual machine or disk image."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:48
msgid ""
"C<virt-ls> is just a simple wrapper around L<libguestfs(3)> functionality.  "
"For more complex cases you should look at the L<guestfish(1)> tool."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:52
msgid ""
"C<virt-ls> can be used in one of three modes: simple, long and recursive.  A "
"simple listing is like the ordinary L<ls(1)> command:"
msgstr ""

# type: verbatim
#: ../tools/virt-ls.pl:55
#, no-wrap
msgid ""
" $ virt-ls myguest /\n"
" bin\n"
" boot\n"
" [etc.]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:60
msgid "With the C<-l> (C<--long>) option, C<virt-ls> shows more detail:"
msgstr ""

# type: verbatim
#: ../tools/virt-ls.pl:62
#, no-wrap
msgid ""
" $ virt-ls -l myguest /\n"
" total 204\n"
" dr-xr-xr-x.   2 root root   4096 2009-08-25 19:06 bin\n"
" dr-xr-xr-x.   5 root root   3072 2009-08-25 19:06 boot\n"
" [etc.]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:68
msgid ""
"With the C<-R> (C<--recursive>) option, C<virt-ls> lists the names of files "
"and directories recursively:"
msgstr ""

# type: verbatim
#: ../tools/virt-ls.pl:71
#, no-wrap
msgid ""
" $ virt-ls -R myguest /tmp\n"
" foo\n"
" foo/bar\n"
" [etc.]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:76
msgid ""
"You I<cannot> combine these options.  To do more complicated things, use "
"L<guestfish(1)>."
msgstr ""

# type: =item
#: ../tools/virt-ls.pl:115 ../tools/virt-list-filesystems.pl:86 ../tools/virt-list-partitions.pl:95
msgid "B<-l> | B<--long>"
msgstr ""

# type: =item
#: ../tools/virt-ls.pl:117
msgid "B<-R> | B<--recursive>"
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:119
msgid ""
"Select the mode.  With neither of these options, C<virt-ls> produces a "
"simple, flat list of the files in the named directory."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:122
msgid ""
"C<virt-ls -l> produces a \"long listing\", which shows more detail (just "
"like the plain C<ls -l> command)."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:125
msgid ""
"C<virt-ls -R> produces a recursive list of files starting at the named "
"directory.  See the documentation for the C<guestfs_find> command "
"L<guestfs(3)> for precise details."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:129
msgid "You cannot combine these options."
msgstr ""

# type: textblock
#: ../tools/virt-ls.pl:219
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-cat(1)>, L<virt-tar(1)>, "
"L<Sys::Guestfs(3)>, L<Sys::Guestfs::Lib(3)>, L<Sys::Virt(3)>, "
"L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:42
msgid "virt-resize - Resize a virtual machine disk"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:46
#, no-wrap
msgid ""
" virt-resize [--resize /dev/sdaN=[+/-]<size>[%]]\n"
"   [--expand /dev/sdaN] [--shrink /dev/sdaN]\n"
"   [--ignore /dev/sdaN] [--delete /dev/sdaN] [...] indisk outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:52
msgid ""
"Virt-resize is a tool which can resize a virtual machine disk, making it "
"larger or smaller overall, and resizing or deleting any partitions contained "
"within."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:56
msgid ""
"Virt-resize B<cannot> resize disk images in-place.  Virt-resize B<should "
"not> be used on live virtual machines - for consistent results, shut the "
"virtual machine down before resizing it."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:60
msgid ""
"If you are not familiar with the associated tools: "
"L<virt-list-partitions(1)>, L<virt-list-filesystems(1)> and L<virt-df(1)>, "
"we recommend you go and read those manual pages first."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:68
msgid ""
"Copy C<olddisk> to C<newdisk>, extending one of the guest's partitions to "
"fill the extra 5GB of space."
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:71
#, no-wrap
msgid ""
" truncate -r olddisk newdisk; truncate -s +5G newdisk\n"
" virt-list-partitions -lht olddisk\n"
" # Note \"/dev/sda2\" is a partition inside the \"olddisk\" file.\n"
" virt-resize --expand /dev/sda2 olddisk newdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:76
msgid ""
"As above, but make the /boot partition 200MB bigger, while giving the "
"remaining space to /dev/sda2:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:79
#, no-wrap
msgid ""
" virt-resize --resize /dev/sda1=+200M --expand /dev/sda2 olddisk newdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:81
msgid "As above, but the output format will be uncompressed qcow2:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:83
#, no-wrap
msgid ""
" qemu-img create -f qcow2 newdisk.qcow2 15G\n"
" virt-resize --expand /dev/sda2 olddisk newdisk.qcow2\n"
"\n"
msgstr ""

# type: =head1
#: ../tools/virt-resize.pl:86
msgid "DETAILED USAGE"
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:88
msgid "EXPANDING A VIRTUAL MACHINE DISK"
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:92
msgid "1. Shut down the virtual machine"
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:94
msgid "2. Locate input disk image"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:96
msgid ""
"Locate the input disk image (ie. the file or device on the host containing "
"the guest's disk).  If the guest is managed by libvirt, you can use C<virsh "
"dumpxml> like this to find the disk image name:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:100
#, no-wrap
msgid ""
" # virsh dumpxml guestname | xpath /domain/devices/disk/source\n"
" Found 1 nodes:\n"
" -- NODE --\n"
" <source dev=\"/dev/vg/lv_guest\" />\n"
"\n"
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:105
msgid "3. Look at current sizing"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:107
msgid "Use L<virt-list-partitions(1)> to display the current partitions and sizes:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:110
#, no-wrap
msgid ""
" # virt-list-partitions -lht /dev/vg/lv_guest\n"
" /dev/sda1 ext3 101.9M\n"
" /dev/sda2 pv 7.9G\n"
" /dev/sda device 8.0G\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:115
msgid ""
"(This example is a virtual machine with an 8 GB disk which we would like to "
"expand up to 10 GB)."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:118
msgid "4. Create output disk"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:120
msgid ""
"Virt-resize cannot do in-place disk modifications.  You have to have space "
"to store the resized output disk."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:123
msgid "To store the resized disk image in a file, create a file of a suitable size:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:126
#, no-wrap
msgid ""
" # rm -f outdisk\n"
" # truncate -s 10G outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:129
msgid "Or use L<lvcreate(1)> to create a logical volume:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:131
#, no-wrap
msgid ""
" # lvcreate -L 10G -n lv_name vg_name\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:133
msgid "Or use L<virsh(1)> vol-create-as to create a libvirt storage volume:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:135
#, no-wrap
msgid ""
" # virsh pool-list\n"
" # virsh vol-create-as poolname newvol 10G\n"
"\n"
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:138
msgid "5. Resize"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:140
msgid ""
"virt-resize takes two mandatory parameters, the input disk (eg. device or "
"file) and the output disk.  The output disk is the one created in the "
"previous step."
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:144
#, no-wrap
msgid ""
" # virt-resize indisk outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:146
msgid ""
"This command just copies disk image C<indisk> to disk image C<outdisk> "
"I<without> resizing or changing any existing partitions.  If C<outdisk> is "
"larger, then an extra, empty partition is created at the end of the disk "
"covering the extra space.  If C<outdisk> is smaller, then it will give an "
"error."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:152
msgid ""
"More realistically you'd want to expand existing partitions in the disk "
"image by passing extra options (for the full list see the L</OPTIONS> "
"section below)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:156
msgid ""
"L</--expand> is the most useful option.  It expands the named partition "
"within the disk to fill any extra space:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:159
#, no-wrap
msgid ""
" # virt-resize --expand /dev/sda2 indisk outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:161
msgid ""
"(In this case, an extra partition is I<not> created at the end of the disk, "
"because there will be no unused space)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:164
msgid ""
"L</--resize> is the other commonly used option.  The following would "
"increase the size of /dev/sda1 by 200M, and expand /dev/sda2 to fill the "
"rest of the available space:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:168
#, no-wrap
msgid ""
" # virt-resize --resize /dev/sda1=+200M --expand /dev/sda2 \\\n"
"     indisk outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:171
msgid ""
"If the expanded partition in the image contains a filesystem or LVM PV, then "
"if virt-resize knows how, it will resize the contents, the equivalent of "
"calling a command such as L<pvresize(8)>, L<resize2fs(8)> or "
"L<ntfsresize(8)>.  However virt-resize does not know how to resize some "
"filesystems, so you would have to online resize them after booting the "
"guest.  And virt-resize also does not resize anything inside an LVM PV, it "
"just resizes the PV itself and leaves the user to resize any LVs inside that "
"PV as desired."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:180
msgid "Other options are covered below."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:182
msgid "6. Test"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:184
msgid "Thoroughly test the new disk image I<before> discarding the old one."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:186
msgid "If you are using libvirt, edit the XML to point at the new disk:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:188
#, no-wrap
msgid ""
" # virsh edit guestname\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:190
msgid ""
"Change E<lt>source ...E<gt>, see "
"L<http://libvirt.org/formatdomain.html#elementsDisks>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:193
msgid "Then start up the domain with the new, resized disk:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:195
#, no-wrap
msgid ""
" # virsh start guestname\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:197
msgid ""
"and check that it still works.  See also the L</NOTES> section below for "
"additional information."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:200
msgid "7. Resize LVs etc inside the guest"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:202
msgid "(This can also be done offline using L<guestfish(1)>)"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:204
msgid ""
"Once the guest has booted you should see the new space available, at least "
"for filesystems that virt-resize knows how to resize, and for PVs.  The user "
"may need to resize LVs inside PVs, and also resize filesystem types that "
"virt-resize does not know how to expand."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:211
msgid "SHRINKING A VIRTUAL MACHINE DISK"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:213
msgid ""
"Shrinking is somewhat more complex than expanding, and only an overview is "
"given here."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:216
msgid ""
"Firstly virt-resize will not attempt to shrink any partition content (PVs, "
"filesystems).  The user has to shrink content before passing the disk image "
"to virt-resize, and virt-resize will check that the content has been shrunk "
"properly."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:221
msgid "(Shrinking can also be done offline using L<guestfish(1)>)"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:223
msgid ""
"After shrinking PVs and filesystems, shut down the guest, and proceed with "
"steps 3 and 4 above to allocate a new disk image."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:226
msgid "Then run virt-resize with any of the C<--shrink> and/or C<--resize> options."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:229
msgid "IGNORING OR DELETING PARTITIONS"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:231
msgid ""
"virt-resize also gives a convenient way to ignore or delete partitions when "
"copying from the input disk to the output disk.  Ignoring a partition speeds "
"up the copy where you don't care about the existing contents of a "
"partition.  Deleting a partition removes it completely, but note that it "
"also renumbers any partitions after the one which is deleted, which can "
"leave some guests unbootable."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:238
msgid "QCOW2 AND NON-SPARSE RAW FORMATS"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:240
msgid ""
"If the input disk is in qcow2 format, then you may prefer that the output is "
"in qcow2 format as well.  Alternately, virt-resize can convert the format on "
"the fly.  The output format is simply determined by the format of the empty "
"output container that you provide.  Thus to create qcow2 output, use:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:246
#, no-wrap
msgid ""
" qemu-img create [-c] -f qcow2 outdisk [size]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:248
msgid "instead of the truncate command (use C<-c> for a compressed disk)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:250
msgid "Similarly, to get non-sparse raw output use:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:252
#, no-wrap
msgid ""
" fallocate -l size outdisk\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:254
msgid ""
"(on older systems that don't have the L<fallocate(1)> command use C<dd "
"if=/dev/zero of=outdisk bs=1M count=..>)"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:267
msgid "Display help."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:281
msgid "B<--resize part=size>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:283
msgid ""
"Resize the named partition (expanding or shrinking it) so that it has the "
"given size."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:286
msgid ""
"C<size> can be expressed as an absolute number followed by b/K/M/G/T/P/E to "
"mean bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Petabytes or "
"Exabytes; or as a percentage of the current size; or as a relative number or "
"percentage.  For example:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:291
#, no-wrap
msgid ""
" --resize /dev/sda2=10G\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:293
#, no-wrap
msgid ""
" --resize /dev/sda4=90%\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:295
#, no-wrap
msgid ""
" --resize /dev/sda2=+1G\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:297
#, no-wrap
msgid ""
" --resize /dev/sda2=-200M\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:299
#, no-wrap
msgid ""
" --resize /dev/sda1=+128K\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:301
#, no-wrap
msgid ""
" --resize /dev/sda1=+10%\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:303
#, no-wrap
msgid ""
" --resize /dev/sda1=-10%\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:305
msgid ""
"You can increase the size of any partition.  Virt-resize will expand the "
"direct content of the partition if it knows how (see C<--expand> below)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:309
msgid ""
"You can only I<decrease> the size of partitions that contain filesystems or "
"PVs which have already been shrunk.  Virt-resize will check this has been "
"done before proceeding, or else will print an error (see also "
"C<--resize-force>)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:314 ../tools/virt-resize.pl:406 ../tools/virt-resize.pl:423
msgid "You can give this option multiple times."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:320
msgid "B<--resize-force part=size>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:322
msgid ""
"This is the same as C<--resize> except that it will let you decrease the "
"size of any partition.  Generally this means you will lose any data which "
"was at the end of the partition you shrink, but you may not care about that "
"(eg. if shrinking an unused partition, or if you can easily recreate it such "
"as a swap partition)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:328
msgid "See also the C<--ignore> option."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:334
msgid "B<--expand part>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:336
msgid ""
"Expand the named partition so it uses up all extra space (space left over "
"after any other resize changes that you request have been done)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:339
msgid ""
"If virt-resize knows how, it will expand the direct content of the "
"partition.  For example, if the partition is an LVM PV, it will expand the "
"PV to fit (like calling L<pvresize(8)>).  Virt-resize leaves any other "
"content it doesn't know about alone."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:344
msgid "Currently virt-resize can resize:"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:350
msgid ""
"ext2, ext3 and ext4 filesystems when they are contained directly inside a "
"partition."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:355
msgid ""
"NTFS filesystems contained directly in a partition, if libguestfs was "
"compiled with support for NTFS."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:358
msgid ""
"The filesystem must have been shut down consistently last time it was used.  "
"Additionally, L<ntfsresize(8)> marks the resized filesystem as requiring a "
"consistency check, so at the first boot after resizing Windows will check "
"the disk."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:365
msgid ""
"LVM PVs (physical volumes).  However virt-resize does I<not> resize anything "
"inside the PV.  The user will have to resize LVs as desired."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:371 ../tools/virt-resize.pl:393
msgid "Note that you cannot use C<--expand> and C<--shrink> together."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:377
msgid "B<--shrink part>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:379
msgid ""
"Shrink the named partition until the overall disk image fits in the "
"destination.  The named partition B<must> contain a filesystem or PV which "
"has already been shrunk using another tool (eg. L<guestfish(1)> or other "
"online tools).  Virt-resize will check this and give an error if it has not "
"been done."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:385
msgid ""
"The amount by which the overall disk must be shrunk (after carrying out all "
"other operations requested by the user) is called the \"deficit\".  For "
"example, a straight copy (assume no other operations)  from a 5GB disk image "
"to a 4GB disk image results in a 1GB deficit.  In this case, virt-resize "
"would give an error unless the user specified a partition to shrink and that "
"partition had more than a gigabyte of free space."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:399
msgid "B<--ignore part>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:401
msgid ""
"Ignore the named partition.  Effectively this means the partition is "
"allocated on the destination disk, but the content is not copied across from "
"the source disk.  The content of the partition will be blank (all zero "
"bytes)."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:412
msgid "B<--delete part>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:414
msgid ""
"Delete the named partition.  It would be more accurate to describe this as "
"\"don't copy it over\", since virt-resize doesn't do in-place changes and "
"the original disk image is left intact."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:418
msgid ""
"Note that when you delete a partition, then anything contained in the "
"partition is also deleted.  Furthermore, this causes any partitions that "
"come after to be I<renumbered>, which can easily make your guest unbootable."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:429
msgid "B<--LV-expand logvol>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:431
msgid ""
"This takes the logical volume and, as a final step, expands it to fill all "
"the space available in its volume group.  A typical usage, assuming a Linux "
"guest with a single PV C</dev/sda2> and a root device called "
"C</dev/vg_guest/lv_root> would be:"
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:436
#, no-wrap
msgid ""
" virt-resize indisk outdisk \\\n"
"   --expand /dev/sda2 --LV-expand /dev/vg_guest/lv_root\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:439
msgid ""
"This would first expand the partition (and PV), and then expand the root "
"device to fill the extra space in the PV."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:442
msgid ""
"The contents of the LV are also resized if virt-resize knows how to do "
"that.  You can stop virt-resize from trying to expand the content by using "
"the option C<--no-expand-content>."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:446
msgid "Use L<virt-list-filesystems(1)> to list the filesystems in the guest."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:449
msgid ""
"You can give this option multiple times, I<but> it doesn't make sense to do "
"this unless the logical volumes you specify are all in different volume "
"groups."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:457
msgid "B<--no-copy-boot-loader>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:459
msgid ""
"By default, virt-resize copies over some sectors at the start of the disk "
"(up to the beginning of the first partition).  Commonly these sectors "
"contain the Master Boot Record (MBR) and the boot loader, and are required "
"in order for the guest to boot correctly."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:464
msgid ""
"If you specify this flag, then this initial copy is not done.  You may need "
"to reinstall the boot loader in this case."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:472
msgid "B<--no-extra-partition>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:474
msgid ""
"By default, virt-resize creates an extra partition if there is any extra, "
"unused space after all resizing has happened.  Use this option to prevent "
"the extra partition from being created.  If you do this then the extra space "
"will be inaccessible until you run fdisk, parted, or some other partitioning "
"tool in the guest."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:480
msgid ""
"Note that if the surplus space is smaller than 10 MB, no extra partition "
"will be created."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:487
msgid "B<--no-expand-content>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:489
msgid ""
"By default, virt-resize will try to expand the direct contents of "
"partitions, if it knows how (see C<--expand> option above)."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:492
msgid ""
"If you give the C<--no-expand-content> option then virt-resize will not "
"attempt this."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:499
msgid "B<-d> | B<--debug>"
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:507
msgid "B<-n> | B<--dryrun>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:509
msgid "Print a summary of what would be done, but don't do anything."
msgstr ""

# type: =item
#: ../tools/virt-resize.pl:515
msgid "B<-q> | B<--quiet>"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:517
msgid "Don't print the summary."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:1383 ../tools/virt-rescue.pl:90
msgid "NOTES"
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:1385
msgid "\"Partition 1 does not end on cylinder boundary.\""
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1387
msgid ""
"Virt-resize aligns partitions to multiples of 64 sectors.  Usually this "
"means the partitions will not be aligned to the ancient CHS geometry.  "
"However CHS geometry is meaningless for disks manufactured since the early "
"1990s, and doubly so for virtual hard drives.  Alignment of partitions to "
"cylinders is not required by any modern operating system."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:1394
msgid "RESIZING WINDOWS VIRTUAL MACHINES"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1396
msgid ""
"In Windows Vista and later versions, Microsoft switched to using a separate "
"boot partition.  In these VMs, typically C</dev/sda1> is the boot partition "
"and C</dev/sda2> is the main (C:) drive.  We have not had any luck resizing "
"the boot partition.  Doing so seems to break the guest completely.  However "
"expanding the second partition (ie. C: drive) should work."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1403
msgid ""
"Windows may initiate a lengthy \"chkdsk\" on first boot after a resize, if "
"NTFS partitions have been expanded.  This is just a safety check and (unless "
"it find errors) is nothing to worry about."
msgstr ""

# type: =head2
#: ../tools/virt-resize.pl:1407
msgid "GUEST BOOT STUCK AT \"GRUB\""
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1409
msgid ""
"If a Linux guest does not boot after resizing, and the boot is stuck after "
"printing C<GRUB> on the console, try reinstalling grub.  This sometimes "
"happens on older (RHEL 5-era) guests, for reasons we don't fully understand, "
"although we think is to do with partition alignment."
msgstr ""

# type: verbatim
#: ../tools/virt-resize.pl:1414
#, no-wrap
msgid ""
" guestfish -i -a newdisk\n"
" ><fs> cat /boot/grub/device.map\n"
" # check the contents of this file are sensible or\n"
" # edit the file if necessary\n"
" ><fs> grub-install / /dev/vda\n"
" ><fs> exit\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1421
msgid ""
"For more flexible guest reconfiguration, including if you need to specify "
"other parameters to grub-install, use L<virt-rescue(1)>."
msgstr ""

# type: =head1
#: ../tools/virt-resize.pl:1424
msgid "ALTERNATIVE TOOLS"
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1426
msgid ""
"There are several proprietary tools for resizing partitions.  We won't "
"mention any here."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1429
msgid ""
"L<parted(8)> and its graphical shell gparted can do some types of resizing "
"operations on disk images.  They can resize and move partitions, but I don't "
"think they can do anything with the contents, and they certainly don't "
"understand LVM."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1434
msgid ""
"L<guestfish(1)> can do everything that virt-resize can do and a lot more, "
"but at a much lower level.  You will probably end up hand-calculating sector "
"offsets, which is something that virt-resize was designed to avoid.  If you "
"want to see the guestfish-equivalent commands that virt-resize runs, use the "
"C<--debug> flag."
msgstr ""

# type: textblock
#: ../tools/virt-resize.pl:1449
msgid ""
"L<virt-list-partitions(1)>, L<virt-list-filesystems(1)>, L<virt-df(1)>, "
"L<guestfs(3)>, L<guestfish(1)>, L<lvm(8)>, L<pvresize(8)>, L<lvresize(8)>, "
"L<resize2fs(8)>, L<ntfsresize(8)>, L<virsh(1)>, L<parted(8)>, "
"L<truncate(1)>, L<fallocate(1)>, L<grub(8)>, L<grub-install(8)>, "
"L<virt-rescue(1)>, L<Sys::Guestfs(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:32
msgid "virt-list-filesystems - List filesystems in a virtual machine or disk image"
msgstr ""

# type: verbatim
#: ../tools/virt-list-filesystems.pl:36
#, no-wrap
msgid ""
" virt-list-filesystems [--options] domname\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-list-filesystems.pl:38
#, no-wrap
msgid ""
" virt-list-filesystems [--options] disk.img [disk.img ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:42
msgid ""
"C<virt-list-filesystems> is a command line tool to list the filesystems that "
"are contained in a virtual machine or disk image."
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:46
msgid ""
"C<virt-list-filesystems> is just a simple wrapper around L<libguestfs(3)> "
"functionality.  For more complex cases you should look at the "
"L<guestfish(1)> tool."
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:88
msgid ""
"With this option, C<virt-list-filesystems> displays the type of each "
"filesystem too (where \"type\" means C<ext3>, C<xfs> etc.)"
msgstr ""

# type: =item
#: ../tools/virt-list-filesystems.pl:95
msgid "B<-a> | B<--all>"
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:97
msgid ""
"Normally we only show mountable filesystems.  If this option is given then "
"swap devices are shown too."
msgstr ""

# type: textblock
#: ../tools/virt-list-filesystems.pl:200
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-cat(1)>, L<virt-tar(1)>, "
"L<virt-list-partitions(1)>, L<Sys::Guestfs(3)>, L<Sys::Guestfs::Lib(3)>, "
"L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:34
msgid "virt-cat - Display a file in a virtual machine"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:38
#, no-wrap
msgid ""
" virt-cat [--options] domname file\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:40
#, no-wrap
msgid ""
" virt-cat [--options] disk.img [disk.img ...] file\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:44
msgid ""
"C<virt-cat> is a command line tool to display the contents of C<file> where "
"C<file> exists in the named virtual machine (or disk image)."
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:47
msgid ""
"C<virt-cat> can be used to quickly view a single file.  To edit a file, use "
"C<virt-edit>.  For more complex cases you should look at the L<guestfish(1)> "
"tool."
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:53
msgid "Display C</etc/fstab> file from inside the libvirt VM called C<mydomain>:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:56
#, no-wrap
msgid ""
" virt-cat mydomain /etc/fstab\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:58
msgid "List syslog messages from a VM:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:60
#, no-wrap
msgid ""
" virt-cat mydomain /var/log/messages | tail\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:62
msgid "Find out what DHCP IP address a VM acquired:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:64
#, no-wrap
msgid ""
" virt-cat mydomain /var/log/messages | grep 'dhclient: bound to' | tail\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:66
msgid "Find out what packages were recently installed:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:68
#, no-wrap
msgid ""
" virt-cat mydomain /var/log/yum.log | tail\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:70
msgid "Find out who is logged on inside a virtual machine:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:72
#, no-wrap
msgid ""
" virt-cat mydomain /var/run/utmp > /tmp/utmp\n"
" who /tmp/utmp\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:75
msgid "or who was logged on:"
msgstr ""

# type: verbatim
#: ../tools/virt-cat.pl:77
#, no-wrap
msgid ""
" virt-cat mydomain /var/log/wtmp > /tmp/wtmp\n"
" last -f /tmp/wtmp\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-cat.pl:172
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-edit(1)>, L<Sys::Guestfs(3)>, "
"L<Sys::Guestfs::Lib(3)>, L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:34
msgid "virt-tar - Extract or upload files to a virtual machine"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:38
#, no-wrap
msgid ""
" virt-tar [--options] -x domname directory tarball\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:40
#, no-wrap
msgid ""
" virt-tar [--options] -u domname tarball directory\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:42
#, no-wrap
msgid ""
" virt-tar [--options] disk.img [disk.img ...] -x directory tarball\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:44
#, no-wrap
msgid ""
" virt-tar [--options] disk.img [disk.img ...] -u tarball directory\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:48
msgid "Download C</home> from the VM into a local tarball:"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:50
#, no-wrap
msgid ""
" virt-tar -x domname /home home.tar\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:52
#, no-wrap
msgid ""
" virt-tar -zx domname /home home.tar.gz\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:54
msgid "Upload a local tarball and unpack it inside C</tmp> in the VM:"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:56
#, no-wrap
msgid ""
" virt-tar -u domname uploadstuff.tar /tmp\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-tar.pl:58
#, no-wrap
msgid ""
" virt-tar -zu domname uploadstuff.tar.gz /tmp\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:62
msgid ""
"You must I<not> use C<virt-tar> with the C<-u> option (upload) on live "
"virtual machines.  If you do this, you risk disk corruption in the VM.  "
"C<virt-tar> tries to stop you from doing this, but doesn't catch all cases."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:67
msgid ""
"You can use C<-x> (extract) on live virtual machines, but you might get "
"inconsistent results or errors if there is filesystem activity inside the "
"VM.  If the live VM is synched and quiescent, then C<virt-tar> will usually "
"work, but the only way to guarantee consistent results is if the virtual "
"machine is shut down."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:75
msgid ""
"C<virt-tar> is a general purpose archive tool for downloading and uploading "
"parts of a guest filesystem.  There are many possibilities: making backups, "
"uploading data files, snooping on guest activity, fixing or customizing "
"guests, etc."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:80
msgid ""
"If you want to just view a single file, use L<virt-cat(1)>.  If you just "
"want to edit a single file, use L<virt-edit(1)>.  For more complex cases you "
"should look at the L<guestfish(1)> tool."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:84
msgid ""
"There are two modes of operation: C<-x> (eXtract) downloads a directory and "
"its contents (recursively) from the virtual machine into a local tarball.  "
"C<-u> uploads from a local tarball, unpacking it into a directory inside the "
"virtual machine.  You cannot use these two options together."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:90
msgid ""
"In addition, you may need to use the C<-z> (gZip) option to enable "
"compression.  When uploading, you have to specify C<-z> if the upload file "
"is compressed because virt-tar won't detect this on its own."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:94
msgid ""
"C<virt-tar> can only handle tar (optionally gzipped) format tarballs.  For "
"example it cannot do PKZip files or bzip2 compression.  If you want that "
"then you'll have to rebuild the tarballs yourself.  (This is a limitation of "
"the L<libguestfs(3)> API)."
msgstr ""

# type: =item
#: ../tools/virt-tar.pl:135
msgid "B<-x> | B<--extract> | B<--download>"
msgstr ""

# type: =item
#: ../tools/virt-tar.pl:137
msgid "B<-u> | B<--upload>"
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:139
msgid ""
"Use C<-x> to extract (download) a directory from a virtual machine to a "
"local tarball."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:142
msgid ""
"Use C<-u> to upload and unpack from a local tarball into a virtual machine.  "
"Please read the L</WARNING> section above before using this option."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:146
msgid "You must specify exactly one of these options."
msgstr ""

# type: =item
#: ../tools/virt-tar.pl:152
msgid "B<-z> | B<--gzip>"
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:154
msgid "Specify that the input or output tarball is gzip-compressed."
msgstr ""

# type: textblock
#: ../tools/virt-tar.pl:266
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-cat(1)>, L<virt-edit(1)>, "
"L<Sys::Guestfs(3)>, L<Sys::Guestfs::Lib(3)>, L<Sys::Virt(3)>, "
"L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:33
msgid "virt-rescue - Run a rescue shell on a virtual machine"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:37
#, no-wrap
msgid ""
" virt-rescue [--options] domname\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:39
#, no-wrap
msgid ""
" virt-rescue [--options] disk.img [disk.img ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:43
msgid ""
"You must I<not> use C<virt-rescue> on live virtual machines.  Doing so will "
"probably result in disk corruption in the VM.  C<virt-rescue> tries to stop "
"you from doing this, but doesn't catch all cases."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:47
msgid ""
"However if you use the I<--ro> (read only) option, then you can attach a "
"shell to a live virtual machine.  The results might be strange or "
"inconsistent at times but you won't get disk corruption."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:53
msgid ""
"virt-rescue is like a Rescue CD, but for virtual machines, and without the "
"need for a CD.  virt-rescue gives you a rescue shell and some simple "
"recovery tools which you can use to examine or rescue a virtual machine or "
"disk image."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:58
msgid ""
"You can run virt-rescue on any virtual machine known to libvirt, or directly "
"on disk image(s):"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:61
#, no-wrap
msgid ""
" virt-rescue GuestName\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:63
#, no-wrap
msgid ""
" virt-rescue --ro /path/to/disk.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:65
#, no-wrap
msgid ""
" virt-rescue /dev/sdc\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:67
msgid "For live VMs you I<must> use the --ro option."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:69
msgid ""
"When you run virt-rescue on a virtual machine or disk image, you are placed "
"in an interactive bash shell where you can use many ordinary Linux "
"commands.  What you see in C</> (C</bin>, C</lib> etc) is the rescue "
"appliance.  You must mount the virtual machine's filesystems by hand.  There "
"is an empty directory called C</sysroot> where you can mount filesystems."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:76
msgid ""
"In the example below, we list logical volumes, then choose one to mount "
"under C</sysroot>:"
msgstr ""

# type: verbatim
#: ../tools/virt-rescue.pl:79
#, no-wrap
msgid ""
" ><rescue> lvs\n"
" LV      VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert\n"
" lv_root vg_f11x64 -wi-a-   8.83G\n"
" lv_swap vg_f11x64 -wi-a- 992.00M\n"
" ><rescue> mount /dev/vg_f11x64/lv_root /sysroot\n"
" ><rescue> ls /sysroot\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:86
msgid ""
"If you don't know what filesystems are available on the virtual machine then "
"you can use commands such as L<parted(8)> and L<lvs(8)> to find out."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:92
msgid ""
"Virt-rescue can be used on I<any> disk image file or device, not just a "
"virtual machine.  For example you can use it on a blank file if you want to "
"partition that file (although we would recommend using L<guestfish(1)> "
"instead as it is more suitable for this purpose).  You can even use "
"virt-rescue on things like SD cards."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:98
msgid ""
"This tool is just designed for quick interactive hacking on a virtual "
"machine.  For more structured access to a virtual machine disk image, you "
"should use L<guestfs(3)>.  To get a structured shell that you can use to "
"make scripted changes to guests, use L<guestfish(1)>."
msgstr ""

# type: =item
#: ../tools/virt-rescue.pl:127
msgid "B<--append kernelopts>"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:129
msgid "Pass additional options to the rescue kernel."
msgstr ""

# type: =item
#: ../tools/virt-rescue.pl:147
msgid "B<--memsize MB> | B<-m MB>"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:149
msgid ""
"Change the amount of memory allocated to the rescue system.  The default is "
"set by libguestfs and is small but adequate for running system tools.  The "
"occasional program might need more memory.  The parameter is specified in "
"megabytes."
msgstr ""

# type: =item
#: ../tools/virt-rescue.pl:158
msgid "B<--ro> | B<-r>"
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:160
msgid "Open the image read-only."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:172
msgid ""
"Enable SELinux in the rescue appliance.  You should read "
"L<guestfs(3)/SELINUX> before using this option."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:228
msgid ""
"Several environment variables affect virt-rescue.  See "
"L<guestfs(3)/ENVIRONMENT VARIABLES> for the complete list."
msgstr ""

# type: textblock
#: ../tools/virt-rescue.pl:240
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-cat(1)>, L<Sys::Guestfs(3)>, "
"L<Sys::Guestfs::Lib(3)>, L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:37
msgid "virt-make-fs - Make a filesystem from a tar archive or files"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:41
#, no-wrap
msgid ""
" virt-make-fs [--options] input.tar output.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:43
#, no-wrap
msgid ""
" virt-make-fs [--options] input.tar.gz output.img\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:45
#, no-wrap
msgid ""
" virt-make-fs [--options] directory output.img\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:49
msgid ""
"Virt-make-fs is a command line tool for creating a filesystem from a tar "
"archive or some files in a directory.  It is similar to tools like "
"L<mkisofs(1)>, L<genisoimage(1)> and L<mksquashfs(1)>.  Unlike those tools, "
"it can create common filesystem types like ext2/3 or NTFS, which can be "
"useful if you want to attach these filesystems to existing virtual machines "
"(eg. to import large amounts of read-only data to a VM)."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:57
msgid "Basic usage is:"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:59
#, no-wrap
msgid ""
" virt-make-fs input output\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:61
msgid ""
"where C<input> is either a directory containing files that you want to add, "
"or a tar archive (either uncompressed tar or gzip-compressed tar); and "
"C<output> is a disk image.  The input type is detected automatically.  The "
"output disk image defaults to a raw ext2 image unless you specify extra "
"flags (see L</OPTIONS> below)."
msgstr ""

# type: =head2
#: ../tools/virt-make-fs.pl:67
msgid "EXTRA SPACE"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:69
msgid ""
"Unlike formats such as tar and squashfs, a filesystem does not \"just fit\" "
"the files that it contains, but might have extra space.  Depending on how "
"you are going to use the output, you might think this extra space is wasted "
"and want to minimize it, or you might want to leave space so that more files "
"can be added later.  Virt-make-fs defaults to minimizing the extra space, "
"but you can use the C<--size> flag to leave space in the filesystem if you "
"want it."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:77
msgid ""
"An alternative way to leave extra space but not make the output image any "
"bigger is to use an alternative disk image format (instead of the default "
"\"raw\" format).  Using C<--format=qcow2> will use the native QEmu/KVM qcow2 "
"image format (check your hypervisor supports this before using it).  This "
"allows you to choose a large C<--size> but the extra space won't actually be "
"allocated in the image until you try to store something in it."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:85
msgid ""
"Don't forget that you can also use local commands including L<resize2fs(8)> "
"and L<virt-resize(1)> to resize existing filesystems, or rerun "
"virt-make-resize to build another image from scratch."
msgstr ""

# type: =head3
#: ../tools/virt-make-fs.pl:89 ../tools/virt-make-fs.pl:123 ../tools/virt-make-fs.pl:142
msgid "EXAMPLE"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:91
#, no-wrap
msgid ""
" virt-make-fs --format=qcow2 --size=+200M input output.img\n"
"\n"
msgstr ""

# type: =head2
#: ../tools/virt-make-fs.pl:93
msgid "FILESYSTEM TYPE"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:95
msgid ""
"The default filesystem type is C<ext2>.  Just about any filesystem type that "
"libguestfs supports can be used (but I<not> read-only formats like "
"ISO9660).  Here are some of the more common choices:"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:101
msgid "I<ext3>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:103
msgid ""
"Note that ext3 filesystems contain a journal, typically 1-32 MB in size.  If "
"you are not going to use the filesystem in a way that requires the journal, "
"then this is just wasted overhead."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:107
msgid "I<ntfs> or I<vfat>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:109
msgid "Useful if exporting data to a Windows guest."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:111
msgid ""
"I<Note for vfat>: The tar archive or local directory must only contain files "
"which are owned by root (ie. UID:GID = 0:0).  The reason is that the tar "
"program running within libguestfs is unable to change the ownership of "
"non-root files, since vfat itself does not support this."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:116
msgid "I<minix>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:118
msgid ""
"Lower overhead than C<ext2>, but certain limitations on filename length and "
"total filesystem size."
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:125
#, no-wrap
msgid ""
" virt-make-fs --type=minix input minixfs.img\n"
"\n"
msgstr ""

# type: =head2
#: ../tools/virt-make-fs.pl:127
msgid "TO PARTITION OR NOT TO PARTITION"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:129
msgid "Optionally virt-make-fs can add a partition table to the output disk."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:131
msgid ""
"Adding a partition can make the disk image more compatible with certain "
"virtualized operating systems which don't expect to see a filesystem "
"directly located on a block device (Linux doesn't care and will happily "
"handle both types)."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:136
msgid ""
"On the other hand, if you have a partition table then the output image is no "
"longer a straight filesystem.  For example you cannot run L<fsck(8)> "
"directly on a partitioned disk image.  (However libguestfs tools such as "
"L<guestfish(1)> and L<virt-resize(1)> can still be used)."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:144
msgid "Add an MBR partition:"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:146
#, no-wrap
msgid ""
" virt-make-fs --partition -- input disk.img\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:148
msgid ""
"If the output disk image could be terabyte-sized or larger, it's better to "
"use an EFI/GPT-compatible partition table:"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:151
#, no-wrap
msgid ""
" virt-make-fs --partition=gpt --size=+4T --format=qcow2 input disk.img\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:179
msgid "Enable debugging information."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:185
msgid "B<--size=E<lt>NE<gt>>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:187
msgid "B<--size=+E<lt>NE<gt>>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:189
msgid "B<-s E<lt>NE<gt>>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:191
msgid "B<-s +E<lt>NE<gt>>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:193
msgid "Use the C<--size> (or C<-s>) option to choose the size of the output image."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:196
msgid ""
"If this option is I<not> given, then the output image will be just large "
"enough to contain all the files, with not much wasted space."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:199
msgid ""
"To choose a fixed size output disk, specify an absolute number followed by "
"b/K/M/G/T/P/E to mean bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, "
"Petabytes or Exabytes.  This must be large enough to contain all the input "
"files, else you will get an error."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:204
msgid ""
"To leave extra space, specify C<+> (plus sign) and a number followed by "
"b/K/M/G/T/P/E to mean bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, "
"Petabytes or Exabytes.  For example: C<--size=+200M> means enough space for "
"the input files, and (approximately) an extra 200 MB free space."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:210
msgid ""
"Note that virt-make-fs estimates free space, and therefore will not produce "
"filesystems containing precisely the free space requested.  (It is much more "
"expensive and time-consuming to produce a filesystem which has precisely the "
"desired free space)."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:219
msgid "B<--format=E<lt>fmtE<gt>>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:221
msgid "B<-F E<lt>fmtE<gt>>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:223
msgid "Choose the output disk image format."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:225
msgid "The default is C<raw> (raw disk image)."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:227
msgid ""
"For other choices, see the L<qemu-img(1)> manpage.  The only other choice "
"that would really make sense here is C<qcow2>."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:234
msgid "B<--type=E<lt>fsE<gt>>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:236
msgid "B<-t E<lt>fsE<gt>>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:238
msgid "Choose the output filesystem type."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:240
msgid "The default is C<ext2>."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:242
msgid "Any filesystem which is supported read-write by libguestfs can be used here."
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:249
msgid "B<--partition>"
msgstr ""

# type: =item
#: ../tools/virt-make-fs.pl:251
msgid "B<--partition=E<lt>parttypeE<gt>>"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:253
msgid ""
"If specified, this flag adds an MBR partition table to the output disk "
"image."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:256
msgid ""
"You can change the partition table type, eg. C<--partition=gpt> for large "
"disks."
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:259
msgid ""
"Note that if you just use a lonesome C<--partition>, the Perl option parser "
"might consider the next parameter to be the partition type.  For example:"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:263
#, no-wrap
msgid ""
" virt-make-fs --partition input.tar ...\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:265
msgid ""
"would cause virt-make-fs to think you wanted to use a partition type of "
"C<input.tar> which is completely wrong.  To avoid this, use C<--> (a double "
"dash) between options and the input file argument:"
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:269
#, no-wrap
msgid ""
" virt-make-fs --partition -- input.tar ...\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:536
msgid ""
"L<guestfish(1)>, L<virt-resize(1)>, L<virt-tar(1)>, L<mkisofs(1)>, "
"L<genisoimage(1)>, L<mksquashfs(1)>, L<mke2fs(8)>, L<resize2fs(8)>, "
"L<guestfs(3)>, L<Sys::Guestfs(3)>, L<http://libguestfs.org/>."
msgstr ""

# type: verbatim
#: ../tools/virt-make-fs.pl:553
#, no-wrap
msgid ""
" export LIBGUESTFS_DEBUG=1\n"
" virt-make-fs --debug [...] > /tmp/virt-make-fs.log 2>&1\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-make-fs.pl:556
msgid ""
"Attach /tmp/virt-make-fs.log to a new bug report at "
"L<https://bugzilla.redhat.com/>"
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:32
msgid "virt-list-partitions - List partitions in a virtual machine or disk image"
msgstr ""

# type: verbatim
#: ../tools/virt-list-partitions.pl:36
#, no-wrap
msgid ""
" virt-list-partitions [--options] domname\n"
"\n"
msgstr ""

# type: verbatim
#: ../tools/virt-list-partitions.pl:38
#, no-wrap
msgid ""
" virt-list-partitions [--options] disk.img [disk.img ...]\n"
"\n"
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:42
msgid ""
"C<virt-list-partitions> is a command line tool to list the partitions that "
"are contained in a virtual machine or disk image.  It is mainly useful as a "
"first step to using L<virt-resize(1)>."
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:47
msgid ""
"C<virt-list-partitions> is just a simple wrapper around L<libguestfs(3)> "
"functionality.  For more complex cases you should look at the "
"L<guestfish(1)> tool."
msgstr ""

# type: =item
#: ../tools/virt-list-partitions.pl:87
msgid "B<-h> | B<--human-readable>"
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:89
msgid "Show sizes in human-readable form (eg. \"1G\")."
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:97
msgid ""
"With this option, C<virt-list-partitions> displays the type and size of each "
"partition too (where \"type\" means C<ext3>, C<pv> etc.)"
msgstr ""

# type: =item
#: ../tools/virt-list-partitions.pl:104
msgid "B<-t> | B<--total>"
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:106
msgid "Display the total size of each block device (as a separate row or rows)."
msgstr ""

# type: textblock
#: ../tools/virt-list-partitions.pl:238
msgid ""
"L<guestfs(3)>, L<guestfish(1)>, L<virt-list-filesystems(1)>, "
"L<virt-resize(1)>, L<Sys::Guestfs(3)>, L<Sys::Guestfs::Lib(3)>, "
"L<Sys::Virt(3)>, L<http://libguestfs.org/>."
msgstr ""
